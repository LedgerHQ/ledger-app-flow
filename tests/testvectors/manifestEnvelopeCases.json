[
  [
    "TH.01 - Withdraw Unlocked FLOW",
    {
      "script": "import FungibleToken from 0x9a0766d93b6608b7\nimport FlowToken from 0x7e60df042a9c0868\nimport LockedTokens from 0x95e019a17d0e23d7\n\ntransaction(amount: UFix64) {\n\n    let holderRef: &LockedTokens.TokenHolder\n    let vaultRef: &FlowToken.Vault\n\n    prepare(acct: AuthAccount) {\n        self.holderRef = acct.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"Could not borrow a reference to TokenHolder\")\n\n        self.vaultRef = acct.borrow<&FlowToken.Vault>(from: /storage/flowTokenVault)\n            ?? panic(\"Could not borrow flow token vault ref\")\n    }\n\n    execute {\n        self.vaultRef.deposit(from: <-self.holderRef.withdraw(amount: amount))\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Testnet"
  ],
  [
    "TH.02 - Deposit Unlocked FLOW",
    {
      "script": "import FungibleToken from 0x9a0766d93b6608b7\nimport FlowToken from 0x7e60df042a9c0868\nimport LockedTokens from 0x95e019a17d0e23d7\n\ntransaction(amount: UFix64) {\n\n    let holderRef: &LockedTokens.TokenHolder\n    let vaultRef: &FlowToken.Vault\n\n    prepare(acct: AuthAccount) {\n        self.holderRef = acct.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"Could not borrow a reference to TokenHolder\")\n\n        self.vaultRef = acct.borrow<&FlowToken.Vault>(from: /storage/flowTokenVault)\n            ?? panic(\"Could not borrow flow token vault ref\")\n    }\n\n    execute {\n        self.holderRef.deposit(from: <-self.vaultRef.withdraw(amount: amount))\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Testnet"
  ],
  [
    "TH.06 - Register Node",
    {
      "script": "import LockedTokens from 0x95e019a17d0e23d7\nimport StakingProxy from 0x7aad92e5a0715d21\n\ntransaction(id: String, role: UInt8, networkingAddress: String, networkingKey: String, stakingKey: String, amount: UFix64) {\n\n    let holderRef: &LockedTokens.TokenHolder\n\n    prepare(account: AuthAccount) {\n        self.holderRef = account.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"Could not borrow ref to TokenHolder\")\n    }\n\n    execute {\n        let nodeInfo = StakingProxy.NodeInfo(id: id, role: role, networkingAddress: networkingAddress, networkingKey: networkingKey, stakingKey: stakingKey)\n\n        self.holderRef.createNodeStaker(nodeInfo: nodeInfo, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "type": "UInt8",
          "value": "1"
        },
        {
          "type": "String",
          "value": "flow-node.test:3569"
        },
        {
          "type": "String",
          "value": "1348307bc77c688e80049de9d081aa09755da33e6997605fa059db2144fc85e560cbe6f7da8d74b453f5916618cb8fd392c2db856f3e78221dc68db1b1d914e4"
        },
        {
          "type": "String",
          "value": "9e9ae0d645fd5fd9050792e0b0daa82cc1686d9133afa0f81a784b375c42ae48567d1545e7a9e1965f2c1a32f73cf8575ebb7a967f6e4d104d2df78eb8be409135d12da0499b8a00771f642c1b9c49397f22b440439f036c3bdee82f5309dab3"
        },
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Testnet"
  ],
  [
    "TH.08 - Stake New Locked FLOW",
    {
      "script": "import FlowToken from 0x7e60df042a9c0868\nimport FungibleToken from 0x9a0766d93b6608b7\n\nimport LockedTokens from 0x95e019a17d0e23d7\nimport StakingProxy from 0x7aad92e5a0715d21\n\ntransaction(amount: UFix64) {\n\n    let holderRef: &LockedTokens.TokenHolder\n\n    let vaultRef: &FlowToken.Vault\n\n    prepare(account: AuthAccount) {\n        self.holderRef = account.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"Could not borrow reference to TokenHolder\")\n\n        self.vaultRef = account.borrow<&FlowToken.Vault>(from: /storage/flowTokenVault)\n            ?? panic(\"Could not borrow flow token vault reference\")\n    }\n\n    execute {\n        let stakerProxy = self.holderRef.borrowStaker()\n\n        let lockedBalance = self.holderRef.getLockedAccountBalance()\n\n        if amount <= lockedBalance {\n\n            stakerProxy.stakeNewTokens(amount: amount)\n\n        } else if ((amount - lockedBalance) <= self.vaultRef.balance) {\n\n            self.holderRef.deposit(from: <-self.vaultRef.withdraw(amount: amount - lockedBalance))\n\n            stakerProxy.stakeNewTokens(amount: amount)\n            \n        } else {\n            panic(\"Not enough tokens to stake!\")\n        }\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Testnet"
  ],
  [
    "TH.09 - Re-stake Unstaked FLOW",
    {
      "script": "import LockedTokens from 0x95e019a17d0e23d7\nimport StakingProxy from 0x7aad92e5a0715d21\n\ntransaction(amount: UFix64) {\n\n    let holderRef: &LockedTokens.TokenHolder\n\n    prepare(account: AuthAccount) {\n        self.holderRef = account.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"Could not borrow reference to TokenHolder\")\n    }\n\n    execute {\n        let stakerProxy = self.holderRef.borrowStaker()\n\n        stakerProxy.stakeUnstakedTokens(amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Testnet"
  ],
  [
    "TH.10 - Re-stake Rewarded FLOW",
    {
      "script": "import LockedTokens from 0x95e019a17d0e23d7\nimport StakingProxy from 0x7aad92e5a0715d21\n\ntransaction(amount: UFix64) {\n\n    let holderRef: &LockedTokens.TokenHolder\n\n    prepare(account: AuthAccount) {\n        self.holderRef = account.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"Could not borrow reference to TokenHolder\")\n    }\n\n    execute {\n        let stakerProxy = self.holderRef.borrowStaker()\n\n        stakerProxy.stakeRewardedTokens(amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Testnet"
  ],
  [
    "TH.11 - Request Unstake of FLOW",
    {
      "script": "import LockedTokens from 0x95e019a17d0e23d7\nimport StakingProxy from 0x7aad92e5a0715d21\n\ntransaction(amount: UFix64) {\n\n    let holderRef: &LockedTokens.TokenHolder\n\n    prepare(account: AuthAccount) {\n        self.holderRef = account.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"Could not borrow reference to TokenHolder\")\n    }\n\n    execute {\n        let stakerProxy = self.holderRef.borrowStaker()\n\n        stakerProxy.requestUnstaking(amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Testnet"
  ],
  [
    "TH.12 - Unstake All FLOW",
    {
      "script": "import LockedTokens from 0x95e019a17d0e23d7\nimport StakingProxy from 0x7aad92e5a0715d21\n\ntransaction() {\n\n    let holderRef: &LockedTokens.TokenHolder\n\n    prepare(account: AuthAccount) {\n        self.holderRef = account.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"Could not borrow reference to TokenHolder\")\n    }\n\n    execute {\n        let stakerProxy = self.holderRef.borrowStaker()\n\n        stakerProxy.unstakeAll()\n    }\n}\n",
      "arguments": [],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Testnet"
  ],
  [
    "TH.13 - Withdraw Unstaked FLOW",
    {
      "script": "import LockedTokens from 0x95e019a17d0e23d7\nimport StakingProxy from 0x7aad92e5a0715d21\n\ntransaction(amount: UFix64) {\n\n    let holderRef: &LockedTokens.TokenHolder\n\n    prepare(account: AuthAccount) {\n        self.holderRef = account.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"Could not borrow reference to TokenHolder\")\n    }\n\n    execute {\n        let stakerProxy = self.holderRef.borrowStaker()\n\n        stakerProxy.withdrawUnstakedTokens(amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Testnet"
  ],
  [
    "TH.14 - Withdraw Rewarded FLOW",
    {
      "script": "import LockedTokens from 0x95e019a17d0e23d7\nimport StakingProxy from 0x7aad92e5a0715d21\n\ntransaction(amount: UFix64) {\n\n    let holderRef: &LockedTokens.TokenHolder\n\n    prepare(account: AuthAccount) {\n        self.holderRef = account.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"Could not borrow reference to TokenHolder\")\n    }\n\n    execute {\n        let stakerProxy = self.holderRef.borrowStaker()\n\n        stakerProxy.withdrawRewardedTokens(amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Testnet"
  ],
  [
    "TH.16 - Register Operator Node",
    {
      "script": "import LockedTokens from 0x95e019a17d0e23d7\nimport StakingProxy from 0x7aad92e5a0715d21\n\ntransaction(address: Address, id: String, amount: UFix64) {\n\n    let holderRef: &LockedTokens.TokenHolder\n\n    prepare(account: AuthAccount) {\n        self.holderRef = account.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"Could not borrow reference to TokenHolder\")\n    }\n\n    execute {\n        let nodeOperatorRef = getAccount(address).getCapability\n            <&StakingProxy.NodeStakerProxyHolder{StakingProxy.NodeStakerProxyHolderPublic}>\n            (StakingProxy.NodeOperatorCapabilityPublicPath)!.borrow() \n            ?? panic(\"Could not borrow node operator public capability\")\n\n        let nodeInfo = nodeOperatorRef.getNodeInfo(nodeID: id)\n            ?? panic(\"Couldn't get info for nodeID=\".concat(id))\n\n        self.holderRef.createNodeStaker(nodeInfo: nodeInfo, amount: amount)\n\n        let nodeStakerProxy = self.holderRef.borrowStaker()\n\n        nodeOperatorRef.addStakingProxy(nodeID: nodeInfo.id, proxy: nodeStakerProxy)\n    }\n}\n",
      "arguments": [
        {
          "type": "Address",
          "value": "0x8624b52f9ddcd04a"
        },
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Testnet"
  ],
  [
    "TH.17 - Register Delegator",
    {
      "script": "import LockedTokens from 0x95e019a17d0e23d7\n\ntransaction(id: String, amount: UFix64) {\n\n    let holderRef: &LockedTokens.TokenHolder\n\n    prepare(account: AuthAccount) {\n        self.holderRef = account.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath) \n            ?? panic(\"TokenHolder is not saved at specified path\")\n    }\n\n    execute {\n        self.holderRef.createNodeDelegator(nodeID: id)\n\n        let delegatorProxy = self.holderRef.borrowDelegator()\n\n        delegatorProxy.delegateNewTokens(amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Testnet"
  ],
  [
    "TH.19 - Delegate New Locked FLOW",
    {
      "script": "import FlowToken from 0x7e60df042a9c0868\nimport FungibleToken from 0x9a0766d93b6608b7\nimport LockedTokens from 0x95e019a17d0e23d7\n\ntransaction(amount: UFix64) {\n\n    let holderRef: &LockedTokens.TokenHolder\n\n    let vaultRef: &FlowToken.Vault\n\n    prepare(account: AuthAccount) {\n        self.holderRef = account.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"Could not borrow reference to TokenHolder\")\n\n        self.vaultRef = account.borrow<&FlowToken.Vault>(from: /storage/flowTokenVault)\n            ?? panic(\"Could not borrow flow token vault reference\")\n    }\n\n    execute {\n        let stakerProxy = self.holderRef.borrowDelegator()\n\n        let lockedBalance = self.holderRef.getLockedAccountBalance()\n\n        if amount <= lockedBalance {\n\n            stakerProxy.delegateNewTokens(amount: amount)\n\n        } else if ((amount - lockedBalance) <= self.vaultRef.balance) {\n\n            self.holderRef.deposit(from: <-self.vaultRef.withdraw(amount: amount - lockedBalance))\n\n            stakerProxy.delegateNewTokens(amount: amount)\n        } else {\n            panic(\"Not enough tokens to stake!\")\n        }\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Testnet"
  ],
  [
    "TH.20 - Re-delegate Unstaked FLOW",
    {
      "script": "import LockedTokens from 0x95e019a17d0e23d7\n\ntransaction(amount: UFix64) {\n    let nodeDelegatorProxy: LockedTokens.LockedNodeDelegatorProxy\n\n    prepare(account: AuthAccount) {\n        let holderRef = account.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath) \n            ?? panic(\"TokenHolder is not saved at specified path\")\n\n        self.nodeDelegatorProxy = holderRef.borrowDelegator()\n    }\n\n    execute {\n        self.nodeDelegatorProxy.delegateUnstakedTokens(amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Testnet"
  ],
  [
    "TH.21 - Re-delegate Rewarded FLOW",
    {
      "script": "import LockedTokens from 0x95e019a17d0e23d7\n\ntransaction(amount: UFix64) {\n    let nodeDelegatorProxy: LockedTokens.LockedNodeDelegatorProxy\n\n    prepare(account: AuthAccount) {\n        let holderRef = account.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath) \n            ?? panic(\"TokenHolder is not saved at specified path\")\n        \n        self.nodeDelegatorProxy = holderRef.borrowDelegator()\n    }\n\n    execute {\n        self.nodeDelegatorProxy.delegateRewardedTokens(amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Testnet"
  ],
  [
    "TH.22 - Unstake Delegated FLOW",
    {
      "script": "import LockedTokens from 0x95e019a17d0e23d7\n\ntransaction(amount: UFix64) {\n    let nodeDelegatorProxy: LockedTokens.LockedNodeDelegatorProxy\n\n    prepare(account: AuthAccount) {\n        let holderRef = account.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath) \n            ?? panic(\"TokenHolder is not saved at specified path\")\n        \n        self.nodeDelegatorProxy = holderRef.borrowDelegator()\n    }\n\n    execute {\n        self.nodeDelegatorProxy.requestUnstaking(amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Testnet"
  ],
  [
    "TH.23 - Withdraw Unstaked FLOW",
    {
      "script": "import LockedTokens from 0x95e019a17d0e23d7\n\ntransaction(amount: UFix64) {\n    let nodeDelegatorProxy: LockedTokens.LockedNodeDelegatorProxy\n\n    prepare(account: AuthAccount) {\n        let holderRef = account.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath) \n            ?? panic(\"TokenHolder is not saved at specified path\")\n        \n        self.nodeDelegatorProxy = holderRef.borrowDelegator()\n    }\n\n    execute {\n        self.nodeDelegatorProxy.withdrawUnstakedTokens(amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Testnet"
  ],
  [
    "TH.24 - Withdraw Rewarded FLOW",
    {
      "script": "import LockedTokens from 0x95e019a17d0e23d7\n\ntransaction(amount: UFix64) {\n    let nodeDelegatorProxy: LockedTokens.LockedNodeDelegatorProxy\n\n    prepare(account: AuthAccount) {\n        let holderRef = account.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath) \n            ?? panic(\"TokenHolder is not saved at specified path\")\n        \n        self.nodeDelegatorProxy = holderRef.borrowDelegator()\n    }\n\n    execute {\n        self.nodeDelegatorProxy.withdrawRewardedTokens(amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Testnet"
  ],
  [
    "TH.01 - Withdraw Unlocked FLOW",
    {
      "script": "import FungibleToken from 0xf233dcee88fe0abe\nimport FlowToken from 0x1654653399040a61\nimport LockedTokens from 0x8d0e87b65159ae63\n\ntransaction(amount: UFix64) {\n\n    let holderRef: &LockedTokens.TokenHolder\n    let vaultRef: &FlowToken.Vault\n\n    prepare(acct: AuthAccount) {\n        self.holderRef = acct.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"Could not borrow a reference to TokenHolder\")\n\n        self.vaultRef = acct.borrow<&FlowToken.Vault>(from: /storage/flowTokenVault)\n            ?? panic(\"Could not borrow flow token vault ref\")\n    }\n\n    execute {\n        self.vaultRef.deposit(from: <-self.holderRef.withdraw(amount: amount))\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Mainnet"
  ],
  [
    "TH.02 - Deposit Unlocked FLOW",
    {
      "script": "import FungibleToken from 0xf233dcee88fe0abe\nimport FlowToken from 0x1654653399040a61\nimport LockedTokens from 0x8d0e87b65159ae63\n\ntransaction(amount: UFix64) {\n\n    let holderRef: &LockedTokens.TokenHolder\n    let vaultRef: &FlowToken.Vault\n\n    prepare(acct: AuthAccount) {\n        self.holderRef = acct.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"Could not borrow a reference to TokenHolder\")\n\n        self.vaultRef = acct.borrow<&FlowToken.Vault>(from: /storage/flowTokenVault)\n            ?? panic(\"Could not borrow flow token vault ref\")\n    }\n\n    execute {\n        self.holderRef.deposit(from: <-self.vaultRef.withdraw(amount: amount))\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Mainnet"
  ],
  [
    "TH.06 - Register Node",
    {
      "script": "import LockedTokens from 0x8d0e87b65159ae63\nimport StakingProxy from 0x62430cf28c26d095\n\ntransaction(id: String, role: UInt8, networkingAddress: String, networkingKey: String, stakingKey: String, amount: UFix64) {\n\n    let holderRef: &LockedTokens.TokenHolder\n\n    prepare(account: AuthAccount) {\n        self.holderRef = account.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"Could not borrow ref to TokenHolder\")\n    }\n\n    execute {\n        let nodeInfo = StakingProxy.NodeInfo(id: id, role: role, networkingAddress: networkingAddress, networkingKey: networkingKey, stakingKey: stakingKey)\n\n        self.holderRef.createNodeStaker(nodeInfo: nodeInfo, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "type": "UInt8",
          "value": "1"
        },
        {
          "type": "String",
          "value": "flow-node.test:3569"
        },
        {
          "type": "String",
          "value": "1348307bc77c688e80049de9d081aa09755da33e6997605fa059db2144fc85e560cbe6f7da8d74b453f5916618cb8fd392c2db856f3e78221dc68db1b1d914e4"
        },
        {
          "type": "String",
          "value": "9e9ae0d645fd5fd9050792e0b0daa82cc1686d9133afa0f81a784b375c42ae48567d1545e7a9e1965f2c1a32f73cf8575ebb7a967f6e4d104d2df78eb8be409135d12da0499b8a00771f642c1b9c49397f22b440439f036c3bdee82f5309dab3"
        },
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Mainnet"
  ],
  [
    "TH.08 - Stake New Locked FLOW",
    {
      "script": "import FlowToken from 0x1654653399040a61\nimport FungibleToken from 0xf233dcee88fe0abe\n\nimport LockedTokens from 0x8d0e87b65159ae63\nimport StakingProxy from 0x62430cf28c26d095\n\ntransaction(amount: UFix64) {\n\n    let holderRef: &LockedTokens.TokenHolder\n\n    let vaultRef: &FlowToken.Vault\n\n    prepare(account: AuthAccount) {\n        self.holderRef = account.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"Could not borrow reference to TokenHolder\")\n\n        self.vaultRef = account.borrow<&FlowToken.Vault>(from: /storage/flowTokenVault)\n            ?? panic(\"Could not borrow flow token vault reference\")\n    }\n\n    execute {\n        let stakerProxy = self.holderRef.borrowStaker()\n\n        let lockedBalance = self.holderRef.getLockedAccountBalance()\n\n        if amount <= lockedBalance {\n\n            stakerProxy.stakeNewTokens(amount: amount)\n\n        } else if ((amount - lockedBalance) <= self.vaultRef.balance) {\n\n            self.holderRef.deposit(from: <-self.vaultRef.withdraw(amount: amount - lockedBalance))\n\n            stakerProxy.stakeNewTokens(amount: amount)\n            \n        } else {\n            panic(\"Not enough tokens to stake!\")\n        }\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Mainnet"
  ],
  [
    "TH.09 - Re-stake Unstaked FLOW",
    {
      "script": "import LockedTokens from 0x8d0e87b65159ae63\nimport StakingProxy from 0x62430cf28c26d095\n\ntransaction(amount: UFix64) {\n\n    let holderRef: &LockedTokens.TokenHolder\n\n    prepare(account: AuthAccount) {\n        self.holderRef = account.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"Could not borrow reference to TokenHolder\")\n    }\n\n    execute {\n        let stakerProxy = self.holderRef.borrowStaker()\n\n        stakerProxy.stakeUnstakedTokens(amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Mainnet"
  ],
  [
    "TH.10 - Re-stake Rewarded FLOW",
    {
      "script": "import LockedTokens from 0x8d0e87b65159ae63\nimport StakingProxy from 0x62430cf28c26d095\n\ntransaction(amount: UFix64) {\n\n    let holderRef: &LockedTokens.TokenHolder\n\n    prepare(account: AuthAccount) {\n        self.holderRef = account.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"Could not borrow reference to TokenHolder\")\n    }\n\n    execute {\n        let stakerProxy = self.holderRef.borrowStaker()\n\n        stakerProxy.stakeRewardedTokens(amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Mainnet"
  ],
  [
    "TH.11 - Request Unstake of FLOW",
    {
      "script": "import LockedTokens from 0x8d0e87b65159ae63\nimport StakingProxy from 0x62430cf28c26d095\n\ntransaction(amount: UFix64) {\n\n    let holderRef: &LockedTokens.TokenHolder\n\n    prepare(account: AuthAccount) {\n        self.holderRef = account.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"Could not borrow reference to TokenHolder\")\n    }\n\n    execute {\n        let stakerProxy = self.holderRef.borrowStaker()\n\n        stakerProxy.requestUnstaking(amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Mainnet"
  ],
  [
    "TH.12 - Unstake All FLOW",
    {
      "script": "import LockedTokens from 0x8d0e87b65159ae63\nimport StakingProxy from 0x62430cf28c26d095\n\ntransaction() {\n\n    let holderRef: &LockedTokens.TokenHolder\n\n    prepare(account: AuthAccount) {\n        self.holderRef = account.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"Could not borrow reference to TokenHolder\")\n    }\n\n    execute {\n        let stakerProxy = self.holderRef.borrowStaker()\n\n        stakerProxy.unstakeAll()\n    }\n}\n",
      "arguments": [],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Mainnet"
  ],
  [
    "TH.13 - Withdraw Unstaked FLOW",
    {
      "script": "import LockedTokens from 0x8d0e87b65159ae63\nimport StakingProxy from 0x62430cf28c26d095\n\ntransaction(amount: UFix64) {\n\n    let holderRef: &LockedTokens.TokenHolder\n\n    prepare(account: AuthAccount) {\n        self.holderRef = account.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"Could not borrow reference to TokenHolder\")\n    }\n\n    execute {\n        let stakerProxy = self.holderRef.borrowStaker()\n\n        stakerProxy.withdrawUnstakedTokens(amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Mainnet"
  ],
  [
    "TH.14 - Withdraw Rewarded FLOW",
    {
      "script": "import LockedTokens from 0x8d0e87b65159ae63\nimport StakingProxy from 0x62430cf28c26d095\n\ntransaction(amount: UFix64) {\n\n    let holderRef: &LockedTokens.TokenHolder\n\n    prepare(account: AuthAccount) {\n        self.holderRef = account.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"Could not borrow reference to TokenHolder\")\n    }\n\n    execute {\n        let stakerProxy = self.holderRef.borrowStaker()\n\n        stakerProxy.withdrawRewardedTokens(amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Mainnet"
  ],
  [
    "TH.16 - Register Operator Node",
    {
      "script": "import LockedTokens from 0x8d0e87b65159ae63\nimport StakingProxy from 0x62430cf28c26d095\n\ntransaction(address: Address, id: String, amount: UFix64) {\n\n    let holderRef: &LockedTokens.TokenHolder\n\n    prepare(account: AuthAccount) {\n        self.holderRef = account.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"Could not borrow reference to TokenHolder\")\n    }\n\n    execute {\n        let nodeOperatorRef = getAccount(address).getCapability\n            <&StakingProxy.NodeStakerProxyHolder{StakingProxy.NodeStakerProxyHolderPublic}>\n            (StakingProxy.NodeOperatorCapabilityPublicPath)!.borrow() \n            ?? panic(\"Could not borrow node operator public capability\")\n\n        let nodeInfo = nodeOperatorRef.getNodeInfo(nodeID: id)\n            ?? panic(\"Couldn't get info for nodeID=\".concat(id))\n\n        self.holderRef.createNodeStaker(nodeInfo: nodeInfo, amount: amount)\n\n        let nodeStakerProxy = self.holderRef.borrowStaker()\n\n        nodeOperatorRef.addStakingProxy(nodeID: nodeInfo.id, proxy: nodeStakerProxy)\n    }\n}\n",
      "arguments": [
        {
          "type": "Address",
          "value": "0x8624b52f9ddcd04a"
        },
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Mainnet"
  ],
  [
    "TH.17 - Register Delegator",
    {
      "script": "import LockedTokens from 0x8d0e87b65159ae63\n\ntransaction(id: String, amount: UFix64) {\n\n    let holderRef: &LockedTokens.TokenHolder\n\n    prepare(account: AuthAccount) {\n        self.holderRef = account.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath) \n            ?? panic(\"TokenHolder is not saved at specified path\")\n    }\n\n    execute {\n        self.holderRef.createNodeDelegator(nodeID: id)\n\n        let delegatorProxy = self.holderRef.borrowDelegator()\n\n        delegatorProxy.delegateNewTokens(amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Mainnet"
  ],
  [
    "TH.19 - Delegate New Locked FLOW",
    {
      "script": "import FlowToken from 0x1654653399040a61\nimport FungibleToken from 0xf233dcee88fe0abe\nimport LockedTokens from 0x8d0e87b65159ae63\n\ntransaction(amount: UFix64) {\n\n    let holderRef: &LockedTokens.TokenHolder\n\n    let vaultRef: &FlowToken.Vault\n\n    prepare(account: AuthAccount) {\n        self.holderRef = account.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"Could not borrow reference to TokenHolder\")\n\n        self.vaultRef = account.borrow<&FlowToken.Vault>(from: /storage/flowTokenVault)\n            ?? panic(\"Could not borrow flow token vault reference\")\n    }\n\n    execute {\n        let stakerProxy = self.holderRef.borrowDelegator()\n\n        let lockedBalance = self.holderRef.getLockedAccountBalance()\n\n        if amount <= lockedBalance {\n\n            stakerProxy.delegateNewTokens(amount: amount)\n\n        } else if ((amount - lockedBalance) <= self.vaultRef.balance) {\n\n            self.holderRef.deposit(from: <-self.vaultRef.withdraw(amount: amount - lockedBalance))\n\n            stakerProxy.delegateNewTokens(amount: amount)\n        } else {\n            panic(\"Not enough tokens to stake!\")\n        }\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Mainnet"
  ],
  [
    "TH.20 - Re-delegate Unstaked FLOW",
    {
      "script": "import LockedTokens from 0x8d0e87b65159ae63\n\ntransaction(amount: UFix64) {\n    let nodeDelegatorProxy: LockedTokens.LockedNodeDelegatorProxy\n\n    prepare(account: AuthAccount) {\n        let holderRef = account.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath) \n            ?? panic(\"TokenHolder is not saved at specified path\")\n\n        self.nodeDelegatorProxy = holderRef.borrowDelegator()\n    }\n\n    execute {\n        self.nodeDelegatorProxy.delegateUnstakedTokens(amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Mainnet"
  ],
  [
    "TH.21 - Re-delegate Rewarded FLOW",
    {
      "script": "import LockedTokens from 0x8d0e87b65159ae63\n\ntransaction(amount: UFix64) {\n    let nodeDelegatorProxy: LockedTokens.LockedNodeDelegatorProxy\n\n    prepare(account: AuthAccount) {\n        let holderRef = account.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath) \n            ?? panic(\"TokenHolder is not saved at specified path\")\n        \n        self.nodeDelegatorProxy = holderRef.borrowDelegator()\n    }\n\n    execute {\n        self.nodeDelegatorProxy.delegateRewardedTokens(amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Mainnet"
  ],
  [
    "TH.22 - Unstake Delegated FLOW",
    {
      "script": "import LockedTokens from 0x8d0e87b65159ae63\n\ntransaction(amount: UFix64) {\n    let nodeDelegatorProxy: LockedTokens.LockedNodeDelegatorProxy\n\n    prepare(account: AuthAccount) {\n        let holderRef = account.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath) \n            ?? panic(\"TokenHolder is not saved at specified path\")\n        \n        self.nodeDelegatorProxy = holderRef.borrowDelegator()\n    }\n\n    execute {\n        self.nodeDelegatorProxy.requestUnstaking(amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Mainnet"
  ],
  [
    "TH.23 - Withdraw Unstaked FLOW",
    {
      "script": "import LockedTokens from 0x8d0e87b65159ae63\n\ntransaction(amount: UFix64) {\n    let nodeDelegatorProxy: LockedTokens.LockedNodeDelegatorProxy\n\n    prepare(account: AuthAccount) {\n        let holderRef = account.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath) \n            ?? panic(\"TokenHolder is not saved at specified path\")\n        \n        self.nodeDelegatorProxy = holderRef.borrowDelegator()\n    }\n\n    execute {\n        self.nodeDelegatorProxy.withdrawUnstakedTokens(amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Mainnet"
  ],
  [
    "TH.24 - Withdraw Rewarded FLOW",
    {
      "script": "import LockedTokens from 0x8d0e87b65159ae63\n\ntransaction(amount: UFix64) {\n    let nodeDelegatorProxy: LockedTokens.LockedNodeDelegatorProxy\n\n    prepare(account: AuthAccount) {\n        let holderRef = account.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath) \n            ?? panic(\"TokenHolder is not saved at specified path\")\n        \n        self.nodeDelegatorProxy = holderRef.borrowDelegator()\n    }\n\n    execute {\n        self.nodeDelegatorProxy.withdrawRewardedTokens(amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "Mainnet"
  ]
]