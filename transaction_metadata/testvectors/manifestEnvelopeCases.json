[
  {
    "title": "FA.01 - Create Account",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import Crypto\n\ntransaction(key: String, signatureAlgorithm: UInt8, hashAlgorithm: UInt8, weight: UFix64) {\n\tprepare(signer: auth(BorrowValue, Storage) &Account) {\n\t\tpre {\n\t\t\tsignatureAlgorithm >= 1 && signatureAlgorithm <= 3: \"Must provide a signature algoritm raw value that is 1, 2, or 3\"\n\t\t\thashAlgorithm >= 1 && hashAlgorithm <= 6: \"Must provide a hash algoritm raw value that is between 1 and 6\"\n\t\t\tweight <= 1000.0: \"The key weight must be between 0 and 1000\"\n\t\t}\n\n\t\tlet publicKey = PublicKey(\n\t\t\tpublicKey: key.decodeHex(),\n\t\t\tsignatureAlgorithm: SignatureAlgorithm(rawValue: signatureAlgorithm)!\n\t\t)\n\n\t\tlet account = Account(payer: signer)\n\n\t\taccount.keys.add(publicKey: publicKey, hashAlgorithm: HashAlgorithm(rawValue: hashAlgorithm)!, weight: weight)\n\t}\n}",
      "arguments": [
        {
          "type": "String",
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1000.00000000",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import Crypto\n\ntransaction(key: String, signatureAlgorithm: UInt8, hashAlgorithm: UInt8, weight: UFix64) {\n\tprepare(signer: auth(BorrowValue, Storage) &Account) {\n\t\tpre {\n\t\t\tsignatureAlgorithm >= 1 && signatureAlgorithm <= 3: \"Must provide a signature algoritm raw value that is 1, 2, or 3\"\n\t\t\thashAlgorithm >= 1 && hashAlgorithm <= 6: \"Must provide a hash algoritm raw value that is between 1 and 6\"\n\t\t\tweight <= 1000.0: \"The key weight must be between 0 and 1000\"\n\t\t}\n\n\t\tlet publicKey = PublicKey(\n\t\t\tpublicKey: key.decodeHex(),\n\t\t\tsignatureAlgorithm: SignatureAlgorithm(rawValue: signatureAlgorithm)!\n\t\t)\n\n\t\tlet account = Account(payer: signer)\n\n\t\taccount.keys.add(publicKey: publicKey, hashAlgorithm: HashAlgorithm(rawValue: hashAlgorithm)!, weight: weight)\n\t}\n}",
      "arguments": [
        {
          "type": "String",
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1000.00000000",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90454b902fe696d706f72742043727970746f0a0a7472616e73616374696f6e286b65793a20537472696e672c207369676e6174757265416c676f726974686d3a2055496e74382c2068617368416c676f726974686d3a2055496e74382c207765696768743a2055466978363429207b0a0970726570617265287369676e65723a206175746828426f72726f7756616c75652c2053746f726167652920264163636f756e7429207b0a0909707265207b0a0909097369676e6174757265416c676f726974686d203e3d2031202626207369676e6174757265416c676f726974686d203c3d20333a20224d7573742070726f766964652061207369676e617475726520616c676f7269746d207261772076616c7565207468617420697320312c20322c206f722033220a09090968617368416c676f726974686d203e3d20312026262068617368416c676f726974686d203c3d20363a20224d7573742070726f766964652061206861736820616c676f7269746d207261772076616c75652074686174206973206265747765656e203120616e642036220a090909776569676874203c3d20313030302e303a2022546865206b657920776569676874206d757374206265206265747765656e203020616e642031303030220a09097d0a0a09096c6574207075626c69634b6579203d205075626c69634b6579280a0909097075626c69634b65793a206b65792e6465636f646548657828292c0a0909097369676e6174757265416c676f726974686d3a205369676e6174757265416c676f726974686d2872617756616c75653a207369676e6174757265416c676f726974686d29210a0909290a0a09096c6574206163636f756e74203d204163636f756e742870617965723a207369676e6572290a0a09096163636f756e742e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2048617368416c676f726974686d2872617756616c75653a2068617368416c676f726974686d29212c207765696768743a20776569676874290a097d0a7df90110b8aa7b2274797065223a22537472696e67222c2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da97b2276616c7565223a22313030302e3030303030303030222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90458f90454b902fe696d706f72742043727970746f0a0a7472616e73616374696f6e286b65793a20537472696e672c207369676e6174757265416c676f726974686d3a2055496e74382c2068617368416c676f726974686d3a2055496e74382c207765696768743a2055466978363429207b0a0970726570617265287369676e65723a206175746828426f72726f7756616c75652c2053746f726167652920264163636f756e7429207b0a0909707265207b0a0909097369676e6174757265416c676f726974686d203e3d2031202626207369676e6174757265416c676f726974686d203c3d20333a20224d7573742070726f766964652061207369676e617475726520616c676f7269746d207261772076616c7565207468617420697320312c20322c206f722033220a09090968617368416c676f726974686d203e3d20312026262068617368416c676f726974686d203c3d20363a20224d7573742070726f766964652061206861736820616c676f7269746d207261772076616c75652074686174206973206265747765656e203120616e642036220a090909776569676874203c3d20313030302e303a2022546865206b657920776569676874206d757374206265206265747765656e203020616e642031303030220a09097d0a0a09096c6574207075626c69634b6579203d205075626c69634b6579280a0909097075626c69634b65793a206b65792e6465636f646548657828292c0a0909097369676e6174757265416c676f726974686d3a205369676e6174757265416c676f726974686d2872617756616c75653a207369676e6174757265416c676f726974686d29210a0909290a0a09096c6574206163636f756e74203d204163636f756e742870617965723a207369676e6572290a0a09096163636f756e742e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2048617368416c676f726974686d2872617756616c75653a2068617368416c676f726974686d29212c207765696768743a20776569676874290a097d0a7df90110b8aa7b2274797065223a22537472696e67222c2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da97b2276616c7565223a22313030302e3030303030303030222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "0263d8b6a045bf8e6196198184db685c2cf22932503ccb2dcb85c7d2dc04c882ba63d8b6a045bf8e6196198184db685c2cf22932503ccb2dcb85c7d2dc04c882ba437265617465204163636f756e740004045075626c6963204b65790000065369676e617475726520416c672e0001054861736820416c672e0002014b65792057656967687400035546697836340003",
    "hash": "63d8b6a045bf8e6196198184db685c2cf22932503ccb2dcb85c7d2dc04c882ba"
  },
  {
    "title": "FA.02 - Add Key",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import Crypto\n\ntransaction(key: String, signatureAlgorithm: UInt8, hashAlgorithm: UInt8, weight: UFix64) {\n\n\tprepare(signer: auth(AddKey) &Account) {\n\t\tpre {\n\t\t\tsignatureAlgorithm >= 1 && signatureAlgorithm <= 3: \"Must provide a signature algoritm raw value that is 1, 2, or 3\"\n\t\t\thashAlgorithm >= 1 && hashAlgorithm <= 6: \"Must provide a hash algoritm raw value that is between 1 and 6\"\n\t\t\tweight <= 1000.0: \"The key weight must be between 0 and 1000\"\n\t\t}\n\t\tlet publicKey = PublicKey(\n\t\t\tpublicKey: key.decodeHex(),\n\t\t\tsignatureAlgorithm: SignatureAlgorithm(rawValue: signatureAlgorithm)!\n\t\t)\n\n\t\tsigner.keys.add(publicKey: publicKey, hashAlgorithm: HashAlgorithm(rawValue: hashAlgorithm)!, weight: weight)\n\t}\n}",
      "arguments": [
        {
          "type": "String",
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1000.00000000",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import Crypto\n\ntransaction(key: String, signatureAlgorithm: UInt8, hashAlgorithm: UInt8, weight: UFix64) {\n\n\tprepare(signer: auth(AddKey) &Account) {\n\t\tpre {\n\t\t\tsignatureAlgorithm >= 1 && signatureAlgorithm <= 3: \"Must provide a signature algoritm raw value that is 1, 2, or 3\"\n\t\t\thashAlgorithm >= 1 && hashAlgorithm <= 6: \"Must provide a hash algoritm raw value that is between 1 and 6\"\n\t\t\tweight <= 1000.0: \"The key weight must be between 0 and 1000\"\n\t\t}\n\t\tlet publicKey = PublicKey(\n\t\t\tpublicKey: key.decodeHex(),\n\t\t\tsignatureAlgorithm: SignatureAlgorithm(rawValue: signatureAlgorithm)!\n\t\t)\n\n\t\tsigner.keys.add(publicKey: publicKey, hashAlgorithm: HashAlgorithm(rawValue: hashAlgorithm)!, weight: weight)\n\t}\n}",
      "arguments": [
        {
          "type": "String",
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1000.00000000",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9041db902c7696d706f72742043727970746f0a0a7472616e73616374696f6e286b65793a20537472696e672c207369676e6174757265416c676f726974686d3a2055496e74382c2068617368416c676f726974686d3a2055496e74382c207765696768743a2055466978363429207b0a0a0970726570617265287369676e65723a2061757468284164644b65792920264163636f756e7429207b0a0909707265207b0a0909097369676e6174757265416c676f726974686d203e3d2031202626207369676e6174757265416c676f726974686d203c3d20333a20224d7573742070726f766964652061207369676e617475726520616c676f7269746d207261772076616c7565207468617420697320312c20322c206f722033220a09090968617368416c676f726974686d203e3d20312026262068617368416c676f726974686d203c3d20363a20224d7573742070726f766964652061206861736820616c676f7269746d207261772076616c75652074686174206973206265747765656e203120616e642036220a090909776569676874203c3d20313030302e303a2022546865206b657920776569676874206d757374206265206265747765656e203020616e642031303030220a09097d0a09096c6574207075626c69634b6579203d205075626c69634b6579280a0909097075626c69634b65793a206b65792e6465636f646548657828292c0a0909097369676e6174757265416c676f726974686d3a205369676e6174757265416c676f726974686d2872617756616c75653a207369676e6174757265416c676f726974686d29210a0909290a0a09097369676e65722e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2048617368416c676f726974686d2872617756616c75653a2068617368416c676f726974686d29212c207765696768743a20776569676874290a097d0a7df90110b8aa7b2274797065223a22537472696e67222c2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da97b2276616c7565223a22313030302e3030303030303030222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90421f9041db902c7696d706f72742043727970746f0a0a7472616e73616374696f6e286b65793a20537472696e672c207369676e6174757265416c676f726974686d3a2055496e74382c2068617368416c676f726974686d3a2055496e74382c207765696768743a2055466978363429207b0a0a0970726570617265287369676e65723a2061757468284164644b65792920264163636f756e7429207b0a0909707265207b0a0909097369676e6174757265416c676f726974686d203e3d2031202626207369676e6174757265416c676f726974686d203c3d20333a20224d7573742070726f766964652061207369676e617475726520616c676f7269746d207261772076616c7565207468617420697320312c20322c206f722033220a09090968617368416c676f726974686d203e3d20312026262068617368416c676f726974686d203c3d20363a20224d7573742070726f766964652061206861736820616c676f7269746d207261772076616c75652074686174206973206265747765656e203120616e642036220a090909776569676874203c3d20313030302e303a2022546865206b657920776569676874206d757374206265206265747765656e203020616e642031303030220a09097d0a09096c6574207075626c69634b6579203d205075626c69634b6579280a0909097075626c69634b65793a206b65792e6465636f646548657828292c0a0909097369676e6174757265416c676f726974686d3a205369676e6174757265416c676f726974686d2872617756616c75653a207369676e6174757265416c676f726974686d29210a0909290a0a09097369676e65722e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2048617368416c676f726974686d2872617756616c75653a2068617368416c676f726974686d29212c207765696768743a20776569676874290a097d0a7df90110b8aa7b2274797065223a22537472696e67222c2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da97b2276616c7565223a22313030302e3030303030303030222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "0221d4e87df171ccbe015efe69dc2ffd24814c5fc0f2e364daf5c80515ce4a8bd921d4e87df171ccbe015efe69dc2ffd24814c5fc0f2e364daf5c80515ce4a8bd9416464204b65790004045075626c6963204b65790000065369676e617475726520416c672e0001054861736820416c672e0002014b65792057656967687400035546697836340003",
    "hash": "21d4e87df171ccbe015efe69dc2ffd24814c5fc0f2e364daf5c80515ce4a8bd9"
  },
  {
    "title": "FA.03 - Remove Key",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "transaction(keyIndex: Int) {\n\tprepare(signer: auth(RevokeKey) &Account) {\n\t\tif let key = signer.keys.get(keyIndex: keyIndex) {\n\t\t\tsigner.keys.revoke(keyIndex: keyIndex)\n\t\t} else {\n\t\t\tpanic(\"No key with the given index exists on the authorizer's account\")\n\t\t}\n\t}\n}",
      "arguments": [
        {
          "type": "Int",
          "value": "1"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "transaction(keyIndex: Int) {\n\tprepare(signer: auth(RevokeKey) &Account) {\n\t\tif let key = signer.keys.get(keyIndex: keyIndex) {\n\t\t\tsigner.keys.revoke(keyIndex: keyIndex)\n\t\t} else {\n\t\t\tpanic(\"No key with the given index exists on the authorizer's account\")\n\t\t}\n\t}\n}",
      "arguments": [
        {
          "type": "Int",
          "value": "1"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90166b901077472616e73616374696f6e286b6579496e6465783a20496e7429207b0a0970726570617265287369676e65723a2061757468285265766f6b654b65792920264163636f756e7429207b0a09096966206c6574206b6579203d207369676e65722e6b6579732e676574286b6579496e6465783a206b6579496e64657829207b0a0909097369676e65722e6b6579732e7265766f6b65286b6579496e6465783a206b6579496e646578290a09097d20656c7365207b0a09090970616e696328224e6f206b657920776974682074686520676976656e20696e64657820657869737473206f6e2074686520617574686f72697a65722773206163636f756e7422290a09097d0a097d0a7ddb9a7b2274797065223a22496e74222c2276616c7565223a2231227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f9016af90166b901077472616e73616374696f6e286b6579496e6465783a20496e7429207b0a0970726570617265287369676e65723a2061757468285265766f6b654b65792920264163636f756e7429207b0a09096966206c6574206b6579203d207369676e65722e6b6579732e676574286b6579496e6465783a206b6579496e64657829207b0a0909097369676e65722e6b6579732e7265766f6b65286b6579496e6465783a206b6579496e646578290a09097d20656c7365207b0a09090970616e696328224e6f206b657920776974682074686520676976656e20696e64657820657869737473206f6e2074686520617574686f72697a65722773206163636f756e7422290a09097d0a097d0a7ddb9a7b2274797065223a22496e74222c2276616c7565223a2231227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "026c7ab72837fdce77a910f6fc0c622c6c4d5b17f6fbf7295f345d50d3508dd5156c7ab72837fdce77a910f6fc0c622c6c4d5b17f6fbf7295f345d50d3508dd51552656d6f7665204b65790001014b657920496e6465780000496e740003",
    "hash": "6c7ab72837fdce77a910f6fc0c622c6c4d5b17f6fbf7295f345d50d3508dd515"
  },
  {
    "title": "FT.01 - Setup Fungible Token Vault",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FungibleToken from 0x9a0766d93b6608b7\nimport FungibleTokenMetadataViews from 0x9a0766d93b6608b7\n\n/// This transaction is what an account would run\n/// to set itself up to manage fungible tokens. This function\n/// uses views to know where to set up the vault\n/// in storage and to create the empty vault.\n\ntransaction(contractAddress: Address, contractName: String) {\n\n    prepare(signer: auth(SaveValue, Capabilities) &Account) {\n        // Borrow a reference to the vault stored on the passed account at the passed publicPath\n        let resolverRef = getAccount(contractAddress)\n            .contracts.borrow<&{FungibleToken}>(name: contractName)\n            ?? panic(\"Could not borrow a reference to the fungible token contract\")\n\n        // Use that reference to retrieve the FTView \n        let ftVaultData = resolverRef.resolveContractView(resourceType: nil, viewType: Type<FungibleTokenMetadataViews.FTVaultData>()) as! FungibleTokenMetadataViews.FTVaultData?\n            ?? panic(\"Could not resolve the FTVaultData view for the given Fungible token contract\")\n\n        // Create a new empty vault using the createEmptyVault function inside the FTVaultData\n        let emptyVault <-ftVaultData.createEmptyVault()\n\n        // Save it to the account\n        signer.storage.save(<-emptyVault, to: ftVaultData.storagePath)\n        \n        // Create a public capability for the vault which includes the .Resolver interface\n        let vaultCap = signer.capabilities.storage.issue<&{FungibleToken.Vault}>(ftVaultData.storagePath)\n        signer.capabilities.publish(vaultCap, at: ftVaultData.metadataPath)\n\n        // Create a public capability for the vault exposing the receiver interface\n        let receiverCap = signer.capabilities.storage.issue<&{FungibleToken.Receiver}>(ftVaultData.storagePath)\n        signer.capabilities.publish(receiverCap, at: ftVaultData.receiverPath)\n\n    }\n}\n ",
      "arguments": [
        {
          "type": "Address",
          "value": "0x8c5303eaa26202d6"
        },
        {
          "value": "FiatToken",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FungibleToken from 0x9a0766d93b6608b7\nimport FungibleTokenMetadataViews from 0x9a0766d93b6608b7\n\n/// This transaction is what an account would run\n/// to set itself up to manage fungible tokens. This function\n/// uses views to know where to set up the vault\n/// in storage and to create the empty vault.\n\ntransaction(contractAddress: Address, contractName: String) {\n\n    prepare(signer: auth(SaveValue, Capabilities) &Account) {\n        // Borrow a reference to the vault stored on the passed account at the passed publicPath\n        let resolverRef = getAccount(contractAddress)\n            .contracts.borrow<&{FungibleToken}>(name: contractName)\n            ?? panic(\"Could not borrow a reference to the fungible token contract\")\n\n        // Use that reference to retrieve the FTView \n        let ftVaultData = resolverRef.resolveContractView(resourceType: nil, viewType: Type<FungibleTokenMetadataViews.FTVaultData>()) as! FungibleTokenMetadataViews.FTVaultData?\n            ?? panic(\"Could not resolve the FTVaultData view for the given Fungible token contract\")\n\n        // Create a new empty vault using the createEmptyVault function inside the FTVaultData\n        let emptyVault <-ftVaultData.createEmptyVault()\n\n        // Save it to the account\n        signer.storage.save(<-emptyVault, to: ftVaultData.storagePath)\n        \n        // Create a public capability for the vault which includes the .Resolver interface\n        let vaultCap = signer.capabilities.storage.issue<&{FungibleToken.Vault}>(ftVaultData.storagePath)\n        signer.capabilities.publish(vaultCap, at: ftVaultData.metadataPath)\n\n        // Create a public capability for the vault exposing the receiver interface\n        let receiverCap = signer.capabilities.storage.issue<&{FungibleToken.Receiver}>(ftVaultData.storagePath)\n        signer.capabilities.publish(receiverCap, at: ftVaultData.receiverPath)\n\n    }\n}\n ",
      "arguments": [
        {
          "type": "Address",
          "value": "0x8c5303eaa26202d6"
        },
        {
          "value": "FiatToken",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90808b9076d696d706f72742046756e6769626c65546f6b656e2066726f6d203078396130373636643933623636303862370a696d706f72742046756e6769626c65546f6b656e4d6574616461746156696577732066726f6d203078396130373636643933623636303862370a0a2f2f2f2054686973207472616e73616374696f6e206973207768617420616e206163636f756e7420776f756c642072756e0a2f2f2f20746f2073657420697473656c6620757020746f206d616e6167652066756e6769626c6520746f6b656e732e20546869732066756e6374696f6e0a2f2f2f207573657320766965777320746f206b6e6f7720776865726520746f2073657420757020746865207661756c740a2f2f2f20696e2073746f7261676520616e6420746f206372656174652074686520656d707479207661756c742e0a0a7472616e73616374696f6e28636f6e7472616374416464726573733a20416464726573732c20636f6e74726163744e616d653a20537472696e6729207b0a0a2020202070726570617265287369676e65723a2061757468285361766556616c75652c204361706162696c69746965732920264163636f756e7429207b0a20202020202020202f2f20426f72726f772061207265666572656e636520746f20746865207661756c742073746f726564206f6e2074686520706173736564206163636f756e742061742074686520706173736564207075626c6963506174680a20202020202020206c6574207265736f6c766572526566203d206765744163636f756e7428636f6e747261637441646472657373290a2020202020202020202020202e636f6e7472616374732e626f72726f773c267b46756e6769626c65546f6b656e7d3e286e616d653a20636f6e74726163744e616d65290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f207468652066756e6769626c6520746f6b656e20636f6e747261637422290a0a20202020202020202f2f205573652074686174207265666572656e636520746f2072657472696576652074686520465456696577200a20202020202020206c65742066745661756c7444617461203d207265736f6c7665725265662e7265736f6c7665436f6e747261637456696577287265736f75726365547970653a206e696c2c2076696577547970653a20547970653c46756e6769626c65546f6b656e4d6574616461746156696577732e46545661756c74446174613e282929206173212046756e6769626c65546f6b656e4d6574616461746156696577732e46545661756c74446174613f0a2020202020202020202020203f3f2070616e69632822436f756c64206e6f74207265736f6c7665207468652046545661756c7444617461207669657720666f722074686520676976656e2046756e6769626c6520746f6b656e20636f6e747261637422290a0a20202020202020202f2f204372656174652061206e657720656d707479207661756c74207573696e672074686520637265617465456d7074795661756c742066756e6374696f6e20696e73696465207468652046545661756c74446174610a20202020202020206c657420656d7074795661756c74203c2d66745661756c74446174612e637265617465456d7074795661756c7428290a0a20202020202020202f2f205361766520697420746f20746865206163636f756e740a20202020202020207369676e65722e73746f726167652e73617665283c2d656d7074795661756c742c20746f3a2066745661756c74446174612e73746f7261676550617468290a20202020202020200a20202020202020202f2f204372656174652061207075626c6963206361706162696c69747920666f7220746865207661756c7420776869636820696e636c7564657320746865202e5265736f6c76657220696e746572666163650a20202020202020206c6574207661756c74436170203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c267b46756e6769626c65546f6b656e2e5661756c747d3e2866745661756c74446174612e73746f7261676550617468290a20202020202020207369676e65722e6361706162696c69746965732e7075626c697368287661756c744361702c2061743a2066745661756c74446174612e6d6574616461746150617468290a0a20202020202020202f2f204372656174652061207075626c6963206361706162696c69747920666f7220746865207661756c74206578706f73696e672074686520726563656976657220696e746572666163650a20202020202020206c6574207265636569766572436170203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c267b46756e6769626c65546f6b656e2e52656365697665727d3e2866745661756c74446174612e73746f7261676550617468290a20202020202020207369676e65722e6361706162696c69746965732e7075626c6973682872656365697665724361702c2061743a2066745661756c74446174612e726563656976657250617468290a0a202020207d0a7d0a20f856af7b2274797065223a2241646472657373222c2276616c7565223a22307838633533303365616132363230326436227da57b2276616c7565223a2246696174546f6b656e222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f9080cf90808b9076d696d706f72742046756e6769626c65546f6b656e2066726f6d203078396130373636643933623636303862370a696d706f72742046756e6769626c65546f6b656e4d6574616461746156696577732066726f6d203078396130373636643933623636303862370a0a2f2f2f2054686973207472616e73616374696f6e206973207768617420616e206163636f756e7420776f756c642072756e0a2f2f2f20746f2073657420697473656c6620757020746f206d616e6167652066756e6769626c6520746f6b656e732e20546869732066756e6374696f6e0a2f2f2f207573657320766965777320746f206b6e6f7720776865726520746f2073657420757020746865207661756c740a2f2f2f20696e2073746f7261676520616e6420746f206372656174652074686520656d707479207661756c742e0a0a7472616e73616374696f6e28636f6e7472616374416464726573733a20416464726573732c20636f6e74726163744e616d653a20537472696e6729207b0a0a2020202070726570617265287369676e65723a2061757468285361766556616c75652c204361706162696c69746965732920264163636f756e7429207b0a20202020202020202f2f20426f72726f772061207265666572656e636520746f20746865207661756c742073746f726564206f6e2074686520706173736564206163636f756e742061742074686520706173736564207075626c6963506174680a20202020202020206c6574207265736f6c766572526566203d206765744163636f756e7428636f6e747261637441646472657373290a2020202020202020202020202e636f6e7472616374732e626f72726f773c267b46756e6769626c65546f6b656e7d3e286e616d653a20636f6e74726163744e616d65290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f207468652066756e6769626c6520746f6b656e20636f6e747261637422290a0a20202020202020202f2f205573652074686174207265666572656e636520746f2072657472696576652074686520465456696577200a20202020202020206c65742066745661756c7444617461203d207265736f6c7665725265662e7265736f6c7665436f6e747261637456696577287265736f75726365547970653a206e696c2c2076696577547970653a20547970653c46756e6769626c65546f6b656e4d6574616461746156696577732e46545661756c74446174613e282929206173212046756e6769626c65546f6b656e4d6574616461746156696577732e46545661756c74446174613f0a2020202020202020202020203f3f2070616e69632822436f756c64206e6f74207265736f6c7665207468652046545661756c7444617461207669657720666f722074686520676976656e2046756e6769626c6520746f6b656e20636f6e747261637422290a0a20202020202020202f2f204372656174652061206e657720656d707479207661756c74207573696e672074686520637265617465456d7074795661756c742066756e6374696f6e20696e73696465207468652046545661756c74446174610a20202020202020206c657420656d7074795661756c74203c2d66745661756c74446174612e637265617465456d7074795661756c7428290a0a20202020202020202f2f205361766520697420746f20746865206163636f756e740a20202020202020207369676e65722e73746f726167652e73617665283c2d656d7074795661756c742c20746f3a2066745661756c74446174612e73746f7261676550617468290a20202020202020200a20202020202020202f2f204372656174652061207075626c6963206361706162696c69747920666f7220746865207661756c7420776869636820696e636c7564657320746865202e5265736f6c76657220696e746572666163650a20202020202020206c6574207661756c74436170203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c267b46756e6769626c65546f6b656e2e5661756c747d3e2866745661756c74446174612e73746f7261676550617468290a20202020202020207369676e65722e6361706162696c69746965732e7075626c697368287661756c744361702c2061743a2066745661756c74446174612e6d6574616461746150617468290a0a20202020202020202f2f204372656174652061207075626c6963206361706162696c69747920666f7220746865207661756c74206578706f73696e672074686520726563656976657220696e746572666163650a20202020202020206c6574207265636569766572436170203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c267b46756e6769626c65546f6b656e2e52656365697665727d3e2866745661756c74446174612e73746f7261676550617468290a20202020202020207369676e65722e6361706162696c69746965732e7075626c6973682872656365697665724361702c2061743a2066745661756c74446174612e726563656976657250617468290a0a202020207d0a7d0a20f856af7b2274797065223a2241646472657373222c2276616c7565223a22307838633533303365616132363230326436227da57b2276616c7565223a2246696174546f6b656e222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "023ccbbfebf10c47c49e4058a33fd9a29c4191c545de52c9afd27a29d38110aa280246076f1cf5d3160397766a9227b35f592f4d15c014848044c509818328b62b53657475702046756e6769626c6520546f6b656e205661756c74000201465420436f6e74726163742041646472657373000041646472657373000304465420436f6e7472616374204e616d650001",
    "hash": "3ccbbfebf10c47c49e4058a33fd9a29c4191c545de52c9afd27a29d38110aa28"
  },
  {
    "title": "FT.02 - Transfer Fungible Token with Paths",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FungibleToken from 0x9a0766d93b6608b7\n\n/// Can pass in any storage path and receiver path identifier instead of just the default.\n/// This lets you choose the token you want to send as well the capability you want to send it to.\n///\n/// Any token path can be passed as an argument here, so wallets should\n/// should check argument values to make sure the intended token path is passed in\n///\ntransaction(amount: UFix64, to: Address, senderPathIdentifier: String, receiverPathIdentifier: String) {\n\n    // The Vault resource that holds the tokens that are being transferred\n    let tempVault: @{FungibleToken.Vault}\n\n    prepare(signer: auth(BorrowValue) &Account) {\n\n        let storagePath = StoragePath(identifier: senderPathIdentifier)\n            ?? panic(\"Could not construct a storage path from the provided path identifier string\")\n\n        // Get a reference to the signer's stored vault\n        let vaultRef = signer.storage.borrow<auth(FungibleToken.Withdraw) &{FungibleToken.Provider}>(from: storagePath)\n\t\t\t?? panic(\"Could not borrow reference to the owner's Vault!\")\n\n        self.tempVault <- vaultRef.withdraw(amount: amount)\n    }\n\n    execute {\n        let publicPath = PublicPath(identifier: receiverPathIdentifier)\n            ?? panic(\"Could not construct a public path from the provided path identifier string\")\n\n        let recipient = getAccount(to)\n        let receiverRef = recipient.capabilities.borrow<&{FungibleToken.Receiver}>(publicPath)\n            ?? panic(\"Could not borrow reference to the recipient's Receiver!\")\n\n        // Transfer tokens from the signer's stored vault to the receiver capability\n        receiverRef.deposit(from: <-self.tempVault)\n    }\n}",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        },
        {
          "value": "0x8c5303eaa26202d6",
          "type": "Address"
        },
        {
          "value": "flowTokenVault",
          "type": "String"
        },
        {
          "value": "flowTokenReceiver",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FungibleToken from 0x9a0766d93b6608b7\n\n/// Can pass in any storage path and receiver path identifier instead of just the default.\n/// This lets you choose the token you want to send as well the capability you want to send it to.\n///\n/// Any token path can be passed as an argument here, so wallets should\n/// should check argument values to make sure the intended token path is passed in\n///\ntransaction(amount: UFix64, to: Address, senderPathIdentifier: String, receiverPathIdentifier: String) {\n\n    // The Vault resource that holds the tokens that are being transferred\n    let tempVault: @{FungibleToken.Vault}\n\n    prepare(signer: auth(BorrowValue) &Account) {\n\n        let storagePath = StoragePath(identifier: senderPathIdentifier)\n            ?? panic(\"Could not construct a storage path from the provided path identifier string\")\n\n        // Get a reference to the signer's stored vault\n        let vaultRef = signer.storage.borrow<auth(FungibleToken.Withdraw) &{FungibleToken.Provider}>(from: storagePath)\n\t\t\t?? panic(\"Could not borrow reference to the owner's Vault!\")\n\n        self.tempVault <- vaultRef.withdraw(amount: amount)\n    }\n\n    execute {\n        let publicPath = PublicPath(identifier: receiverPathIdentifier)\n            ?? panic(\"Could not construct a public path from the provided path identifier string\")\n\n        let recipient = getAccount(to)\n        let receiverRef = recipient.capabilities.borrow<&{FungibleToken.Receiver}>(publicPath)\n            ?? panic(\"Could not borrow reference to the recipient's Receiver!\")\n\n        // Transfer tokens from the signer's stored vault to the receiver capability\n        receiverRef.deposit(from: <-self.tempVault)\n    }\n}",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        },
        {
          "value": "0x8c5303eaa26202d6",
          "type": "Address"
        },
        {
          "value": "flowTokenVault",
          "type": "String"
        },
        {
          "value": "flowTokenReceiver",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f907a3b906a4696d706f72742046756e6769626c65546f6b656e2066726f6d203078396130373636643933623636303862370a0a2f2f2f2043616e207061737320696e20616e792073746f72616765207061746820616e642072656365697665722070617468206964656e74696669657220696e7374656164206f66206a757374207468652064656661756c742e0a2f2f2f2054686973206c65747320796f752063686f6f73652074686520746f6b656e20796f752077616e7420746f2073656e642061732077656c6c20746865206361706162696c69747920796f752077616e7420746f2073656e6420697420746f2e0a2f2f2f0a2f2f2f20416e7920746f6b656e20706174682063616e2062652070617373656420617320616e20617267756d656e7420686572652c20736f2077616c6c6574732073686f756c640a2f2f2f2073686f756c6420636865636b20617267756d656e742076616c75657320746f206d616b6520737572652074686520696e74656e64656420746f6b656e20706174682069732070617373656420696e0a2f2f2f0a7472616e73616374696f6e28616d6f756e743a205546697836342c20746f3a20416464726573732c2073656e646572506174684964656e7469666965723a20537472696e672c207265636569766572506174684964656e7469666965723a20537472696e6729207b0a0a202020202f2f20546865205661756c74207265736f75726365207468617420686f6c64732074686520746f6b656e73207468617420617265206265696e67207472616e736665727265640a202020206c65742074656d705661756c743a20407b46756e6769626c65546f6b656e2e5661756c747d0a0a2020202070726570617265287369676e65723a206175746828426f72726f7756616c75652920264163636f756e7429207b0a0a20202020202020206c65742073746f7261676550617468203d2053746f7261676550617468286964656e7469666965723a2073656e646572506174684964656e746966696572290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420636f6e73747275637420612073746f7261676520706174682066726f6d207468652070726f76696465642070617468206964656e74696669657220737472696e6722290a0a20202020202020202f2f204765742061207265666572656e636520746f20746865207369676e657227732073746f726564207661756c740a20202020202020206c6574207661756c74526566203d207369676e65722e73746f726167652e626f72726f773c617574682846756e6769626c65546f6b656e2e57697468647261772920267b46756e6769626c65546f6b656e2e50726f76696465727d3e2866726f6d3a2073746f7261676550617468290a0909093f3f2070616e69632822436f756c64206e6f7420626f72726f77207265666572656e636520746f20746865206f776e65722773205661756c742122290a0a202020202020202073656c662e74656d705661756c74203c2d207661756c745265662e776974686472617728616d6f756e743a20616d6f756e74290a202020207d0a0a2020202065786563757465207b0a20202020202020206c6574207075626c696350617468203d205075626c696350617468286964656e7469666965723a207265636569766572506174684964656e746966696572290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420636f6e7374727563742061207075626c696320706174682066726f6d207468652070726f76696465642070617468206964656e74696669657220737472696e6722290a0a20202020202020206c657420726563697069656e74203d206765744163636f756e7428746f290a20202020202020206c6574207265636569766572526566203d20726563697069656e742e6361706162696c69746965732e626f72726f773c267b46756e6769626c65546f6b656e2e52656365697665727d3e287075626c696350617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f77207265666572656e636520746f2074686520726563697069656e7427732052656365697665722122290a0a20202020202020202f2f205472616e7366657220746f6b656e732066726f6d20746865207369676e657227732073746f726564207661756c7420746f20746865207265636569766572206361706162696c6974790a202020202020202072656365697665725265662e6465706f7369742866726f6d3a203c2d73656c662e74656d705661756c74290a202020207d0a7df8bab07b2274797065223a22554669783634222c2276616c7565223a2239323233333732303336382e3534373735383038227daf7b2276616c7565223a22307838633533303365616132363230326436222c2274797065223a2241646472657373227daa7b2276616c7565223a22666c6f77546f6b656e5661756c74222c2274797065223a22537472696e67227dad7b2276616c7565223a22666c6f77546f6b656e5265636569766572222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f907a7f907a3b906a4696d706f72742046756e6769626c65546f6b656e2066726f6d203078396130373636643933623636303862370a0a2f2f2f2043616e207061737320696e20616e792073746f72616765207061746820616e642072656365697665722070617468206964656e74696669657220696e7374656164206f66206a757374207468652064656661756c742e0a2f2f2f2054686973206c65747320796f752063686f6f73652074686520746f6b656e20796f752077616e7420746f2073656e642061732077656c6c20746865206361706162696c69747920796f752077616e7420746f2073656e6420697420746f2e0a2f2f2f0a2f2f2f20416e7920746f6b656e20706174682063616e2062652070617373656420617320616e20617267756d656e7420686572652c20736f2077616c6c6574732073686f756c640a2f2f2f2073686f756c6420636865636b20617267756d656e742076616c75657320746f206d616b6520737572652074686520696e74656e64656420746f6b656e20706174682069732070617373656420696e0a2f2f2f0a7472616e73616374696f6e28616d6f756e743a205546697836342c20746f3a20416464726573732c2073656e646572506174684964656e7469666965723a20537472696e672c207265636569766572506174684964656e7469666965723a20537472696e6729207b0a0a202020202f2f20546865205661756c74207265736f75726365207468617420686f6c64732074686520746f6b656e73207468617420617265206265696e67207472616e736665727265640a202020206c65742074656d705661756c743a20407b46756e6769626c65546f6b656e2e5661756c747d0a0a2020202070726570617265287369676e65723a206175746828426f72726f7756616c75652920264163636f756e7429207b0a0a20202020202020206c65742073746f7261676550617468203d2053746f7261676550617468286964656e7469666965723a2073656e646572506174684964656e746966696572290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420636f6e73747275637420612073746f7261676520706174682066726f6d207468652070726f76696465642070617468206964656e74696669657220737472696e6722290a0a20202020202020202f2f204765742061207265666572656e636520746f20746865207369676e657227732073746f726564207661756c740a20202020202020206c6574207661756c74526566203d207369676e65722e73746f726167652e626f72726f773c617574682846756e6769626c65546f6b656e2e57697468647261772920267b46756e6769626c65546f6b656e2e50726f76696465727d3e2866726f6d3a2073746f7261676550617468290a0909093f3f2070616e69632822436f756c64206e6f7420626f72726f77207265666572656e636520746f20746865206f776e65722773205661756c742122290a0a202020202020202073656c662e74656d705661756c74203c2d207661756c745265662e776974686472617728616d6f756e743a20616d6f756e74290a202020207d0a0a2020202065786563757465207b0a20202020202020206c6574207075626c696350617468203d205075626c696350617468286964656e7469666965723a207265636569766572506174684964656e746966696572290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420636f6e7374727563742061207075626c696320706174682066726f6d207468652070726f76696465642070617468206964656e74696669657220737472696e6722290a0a20202020202020206c657420726563697069656e74203d206765744163636f756e7428746f290a20202020202020206c6574207265636569766572526566203d20726563697069656e742e6361706162696c69746965732e626f72726f773c267b46756e6769626c65546f6b656e2e52656365697665727d3e287075626c696350617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f77207265666572656e636520746f2074686520726563697069656e7427732052656365697665722122290a0a20202020202020202f2f205472616e7366657220746f6b656e732066726f6d20746865207369676e657227732073746f726564207661756c7420746f20746865207265636569766572206361706162696c6974790a202020202020202072656365697665725265662e6465706f7369742866726f6d3a203c2d73656c662e74656d705661756c74290a202020207d0a7df8bab07b2274797065223a22554669783634222c2276616c7565223a2239323233333732303336382e3534373735383038227daf7b2276616c7565223a22307838633533303365616132363230326436222c2274797065223a2241646472657373227daa7b2276616c7565223a22666c6f77546f6b656e5661756c74222c2274797065223a22537472696e67227dad7b2276616c7565223a22666c6f77546f6b656e5265636569766572222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02c9b9a6156280812703c15dde74df95cd0d7d1034dd2d8bf0cccf72b6071429886e5b8c83a3e8445eaa4bed391978443f124d9aa457fabdbaa016e0f65b57591e5472616e736665722046756e6769626c6520546f6b656e2077697468205061746873000401416d6f756e740000554669783634000301526563697069656e7400014164647265737300030453656e646572277320436f6c6c656374696f6e2050617468204964656e746966696572000204526563697069656e7427732052656365697665722050617468204964656e7469666965720003",
    "hash": "c9b9a6156280812703c15dde74df95cd0d7d1034dd2d8bf0cccf72b607142988"
  },
  {
    "title": "FT.03 - Transfer Fungible Token with Address",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FungibleToken from 0x9a0766d93b6608b7\nimport FungibleTokenMetadataViews from 0x9a0766d93b6608b7\n\n/// Can pass in any contract address and name to transfer a token from that contract\n/// This lets you choose the token you want to send\n///\n/// Any contract can be chosen here, so wallets should check argument values\n/// to make sure the intended token path is passed in\n///\ntransaction(amount: UFix64, to: Address, contractAddress: Address, contractName: String) {\n\n    // The Vault resource that holds the tokens that are being transferred\n    let tempVault: @{FungibleToken.Vault}\n\n    // FTVaultData struct to get paths from\n    let vaultData: FungibleTokenMetadataViews.FTVaultData\n\n    prepare(signer: auth(BorrowValue) &Account) {\n\n        // Borrow a reference to the vault stored on the passed account at the passed publicPath\n        let resolverRef = getAccount(contractAddress)\n            .contracts.borrow<&{FungibleToken}>(name: contractName)\n            ?? panic(\"Could not borrow a reference to the fungible token contract\")\n\n        // Use that reference to retrieve the FTView \n        self.vaultData = resolverRef.resolveContractView(resourceType: nil, viewType: Type<FungibleTokenMetadataViews.FTVaultData>()) as! FungibleTokenMetadataViews.FTVaultData?\n            ?? panic(\"Could not resolve the FTVaultData view for the given Fungible token contract\")\n\n        // Get a reference to the signer's stored vault\n        let vaultRef = signer.storage.borrow<auth(FungibleToken.Withdraw) &{FungibleToken.Provider}>(from: self.vaultData.storagePath)\n\t\t\t?? panic(\"Could not borrow reference to the owner's Vault!\")\n\n        self.tempVault <- vaultRef.withdraw(amount: amount)\n    }\n\n    execute {\n        let recipient = getAccount(to)\n        let receiverRef = recipient.capabilities.borrow<&{FungibleToken.Receiver}>(self.vaultData.receiverPath)\n            ?? panic(\"Could not borrow reference to the recipient's Receiver!\")\n\n        // Transfer tokens from the signer's stored vault to the receiver capability\n        receiverRef.deposit(from: <-self.tempVault)\n    }\n}",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        },
        {
          "value": "0x8c5303eaa26202d6",
          "type": "Address"
        },
        {
          "value": "0x8c5303eaa26202d6",
          "type": "Address"
        },
        {
          "value": "FiatToken",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FungibleToken from 0x9a0766d93b6608b7\nimport FungibleTokenMetadataViews from 0x9a0766d93b6608b7\n\n/// Can pass in any contract address and name to transfer a token from that contract\n/// This lets you choose the token you want to send\n///\n/// Any contract can be chosen here, so wallets should check argument values\n/// to make sure the intended token path is passed in\n///\ntransaction(amount: UFix64, to: Address, contractAddress: Address, contractName: String) {\n\n    // The Vault resource that holds the tokens that are being transferred\n    let tempVault: @{FungibleToken.Vault}\n\n    // FTVaultData struct to get paths from\n    let vaultData: FungibleTokenMetadataViews.FTVaultData\n\n    prepare(signer: auth(BorrowValue) &Account) {\n\n        // Borrow a reference to the vault stored on the passed account at the passed publicPath\n        let resolverRef = getAccount(contractAddress)\n            .contracts.borrow<&{FungibleToken}>(name: contractName)\n            ?? panic(\"Could not borrow a reference to the fungible token contract\")\n\n        // Use that reference to retrieve the FTView \n        self.vaultData = resolverRef.resolveContractView(resourceType: nil, viewType: Type<FungibleTokenMetadataViews.FTVaultData>()) as! FungibleTokenMetadataViews.FTVaultData?\n            ?? panic(\"Could not resolve the FTVaultData view for the given Fungible token contract\")\n\n        // Get a reference to the signer's stored vault\n        let vaultRef = signer.storage.borrow<auth(FungibleToken.Withdraw) &{FungibleToken.Provider}>(from: self.vaultData.storagePath)\n\t\t\t?? panic(\"Could not borrow reference to the owner's Vault!\")\n\n        self.tempVault <- vaultRef.withdraw(amount: amount)\n    }\n\n    execute {\n        let recipient = getAccount(to)\n        let receiverRef = recipient.capabilities.borrow<&{FungibleToken.Receiver}>(self.vaultData.receiverPath)\n            ?? panic(\"Could not borrow reference to the recipient's Receiver!\")\n\n        // Transfer tokens from the signer's stored vault to the receiver capability\n        receiverRef.deposit(from: <-self.tempVault)\n    }\n}",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        },
        {
          "value": "0x8c5303eaa26202d6",
          "type": "Address"
        },
        {
          "value": "0x8c5303eaa26202d6",
          "type": "Address"
        },
        {
          "value": "FiatToken",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9092bb9082f696d706f72742046756e6769626c65546f6b656e2066726f6d203078396130373636643933623636303862370a696d706f72742046756e6769626c65546f6b656e4d6574616461746156696577732066726f6d203078396130373636643933623636303862370a0a2f2f2f2043616e207061737320696e20616e7920636f6e7472616374206164647265737320616e64206e616d6520746f207472616e73666572206120746f6b656e2066726f6d207468617420636f6e74726163740a2f2f2f2054686973206c65747320796f752063686f6f73652074686520746f6b656e20796f752077616e7420746f2073656e640a2f2f2f0a2f2f2f20416e7920636f6e74726163742063616e2062652063686f73656e20686572652c20736f2077616c6c6574732073686f756c6420636865636b20617267756d656e742076616c7565730a2f2f2f20746f206d616b6520737572652074686520696e74656e64656420746f6b656e20706174682069732070617373656420696e0a2f2f2f0a7472616e73616374696f6e28616d6f756e743a205546697836342c20746f3a20416464726573732c20636f6e7472616374416464726573733a20416464726573732c20636f6e74726163744e616d653a20537472696e6729207b0a0a202020202f2f20546865205661756c74207265736f75726365207468617420686f6c64732074686520746f6b656e73207468617420617265206265696e67207472616e736665727265640a202020206c65742074656d705661756c743a20407b46756e6769626c65546f6b656e2e5661756c747d0a0a202020202f2f2046545661756c74446174612073747275637420746f206765742070617468732066726f6d0a202020206c6574207661756c74446174613a2046756e6769626c65546f6b656e4d6574616461746156696577732e46545661756c74446174610a0a2020202070726570617265287369676e65723a206175746828426f72726f7756616c75652920264163636f756e7429207b0a0a20202020202020202f2f20426f72726f772061207265666572656e636520746f20746865207661756c742073746f726564206f6e2074686520706173736564206163636f756e742061742074686520706173736564207075626c6963506174680a20202020202020206c6574207265736f6c766572526566203d206765744163636f756e7428636f6e747261637441646472657373290a2020202020202020202020202e636f6e7472616374732e626f72726f773c267b46756e6769626c65546f6b656e7d3e286e616d653a20636f6e74726163744e616d65290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f207468652066756e6769626c6520746f6b656e20636f6e747261637422290a0a20202020202020202f2f205573652074686174207265666572656e636520746f2072657472696576652074686520465456696577200a202020202020202073656c662e7661756c7444617461203d207265736f6c7665725265662e7265736f6c7665436f6e747261637456696577287265736f75726365547970653a206e696c2c2076696577547970653a20547970653c46756e6769626c65546f6b656e4d6574616461746156696577732e46545661756c74446174613e282929206173212046756e6769626c65546f6b656e4d6574616461746156696577732e46545661756c74446174613f0a2020202020202020202020203f3f2070616e69632822436f756c64206e6f74207265736f6c7665207468652046545661756c7444617461207669657720666f722074686520676976656e2046756e6769626c6520746f6b656e20636f6e747261637422290a0a20202020202020202f2f204765742061207265666572656e636520746f20746865207369676e657227732073746f726564207661756c740a20202020202020206c6574207661756c74526566203d207369676e65722e73746f726167652e626f72726f773c617574682846756e6769626c65546f6b656e2e57697468647261772920267b46756e6769626c65546f6b656e2e50726f76696465727d3e2866726f6d3a2073656c662e7661756c74446174612e73746f7261676550617468290a0909093f3f2070616e69632822436f756c64206e6f7420626f72726f77207265666572656e636520746f20746865206f776e65722773205661756c742122290a0a202020202020202073656c662e74656d705661756c74203c2d207661756c745265662e776974686472617728616d6f756e743a20616d6f756e74290a202020207d0a0a2020202065786563757465207b0a20202020202020206c657420726563697069656e74203d206765744163636f756e7428746f290a20202020202020206c6574207265636569766572526566203d20726563697069656e742e6361706162696c69746965732e626f72726f773c267b46756e6769626c65546f6b656e2e52656365697665727d3e2873656c662e7661756c74446174612e726563656976657250617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f77207265666572656e636520746f2074686520726563697069656e7427732052656365697665722122290a0a20202020202020202f2f205472616e7366657220746f6b656e732066726f6d20746865207369676e657227732073746f726564207661756c7420746f20746865207265636569766572206361706162696c6974790a202020202020202072656365697665725265662e6465706f7369742866726f6d3a203c2d73656c662e74656d705661756c74290a202020207d0a7df8b7b07b2274797065223a22554669783634222c2276616c7565223a2239323233333732303336382e3534373735383038227daf7b2276616c7565223a22307838633533303365616132363230326436222c2274797065223a2241646472657373227daf7b2276616c7565223a22307838633533303365616132363230326436222c2274797065223a2241646472657373227da57b2276616c7565223a2246696174546f6b656e222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f9092ff9092bb9082f696d706f72742046756e6769626c65546f6b656e2066726f6d203078396130373636643933623636303862370a696d706f72742046756e6769626c65546f6b656e4d6574616461746156696577732066726f6d203078396130373636643933623636303862370a0a2f2f2f2043616e207061737320696e20616e7920636f6e7472616374206164647265737320616e64206e616d6520746f207472616e73666572206120746f6b656e2066726f6d207468617420636f6e74726163740a2f2f2f2054686973206c65747320796f752063686f6f73652074686520746f6b656e20796f752077616e7420746f2073656e640a2f2f2f0a2f2f2f20416e7920636f6e74726163742063616e2062652063686f73656e20686572652c20736f2077616c6c6574732073686f756c6420636865636b20617267756d656e742076616c7565730a2f2f2f20746f206d616b6520737572652074686520696e74656e64656420746f6b656e20706174682069732070617373656420696e0a2f2f2f0a7472616e73616374696f6e28616d6f756e743a205546697836342c20746f3a20416464726573732c20636f6e7472616374416464726573733a20416464726573732c20636f6e74726163744e616d653a20537472696e6729207b0a0a202020202f2f20546865205661756c74207265736f75726365207468617420686f6c64732074686520746f6b656e73207468617420617265206265696e67207472616e736665727265640a202020206c65742074656d705661756c743a20407b46756e6769626c65546f6b656e2e5661756c747d0a0a202020202f2f2046545661756c74446174612073747275637420746f206765742070617468732066726f6d0a202020206c6574207661756c74446174613a2046756e6769626c65546f6b656e4d6574616461746156696577732e46545661756c74446174610a0a2020202070726570617265287369676e65723a206175746828426f72726f7756616c75652920264163636f756e7429207b0a0a20202020202020202f2f20426f72726f772061207265666572656e636520746f20746865207661756c742073746f726564206f6e2074686520706173736564206163636f756e742061742074686520706173736564207075626c6963506174680a20202020202020206c6574207265736f6c766572526566203d206765744163636f756e7428636f6e747261637441646472657373290a2020202020202020202020202e636f6e7472616374732e626f72726f773c267b46756e6769626c65546f6b656e7d3e286e616d653a20636f6e74726163744e616d65290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f207468652066756e6769626c6520746f6b656e20636f6e747261637422290a0a20202020202020202f2f205573652074686174207265666572656e636520746f2072657472696576652074686520465456696577200a202020202020202073656c662e7661756c7444617461203d207265736f6c7665725265662e7265736f6c7665436f6e747261637456696577287265736f75726365547970653a206e696c2c2076696577547970653a20547970653c46756e6769626c65546f6b656e4d6574616461746156696577732e46545661756c74446174613e282929206173212046756e6769626c65546f6b656e4d6574616461746156696577732e46545661756c74446174613f0a2020202020202020202020203f3f2070616e69632822436f756c64206e6f74207265736f6c7665207468652046545661756c7444617461207669657720666f722074686520676976656e2046756e6769626c6520746f6b656e20636f6e747261637422290a0a20202020202020202f2f204765742061207265666572656e636520746f20746865207369676e657227732073746f726564207661756c740a20202020202020206c6574207661756c74526566203d207369676e65722e73746f726167652e626f72726f773c617574682846756e6769626c65546f6b656e2e57697468647261772920267b46756e6769626c65546f6b656e2e50726f76696465727d3e2866726f6d3a2073656c662e7661756c74446174612e73746f7261676550617468290a0909093f3f2070616e69632822436f756c64206e6f7420626f72726f77207265666572656e636520746f20746865206f776e65722773205661756c742122290a0a202020202020202073656c662e74656d705661756c74203c2d207661756c745265662e776974686472617728616d6f756e743a20616d6f756e74290a202020207d0a0a2020202065786563757465207b0a20202020202020206c657420726563697069656e74203d206765744163636f756e7428746f290a20202020202020206c6574207265636569766572526566203d20726563697069656e742e6361706162696c69746965732e626f72726f773c267b46756e6769626c65546f6b656e2e52656365697665727d3e2873656c662e7661756c74446174612e726563656976657250617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f77207265666572656e636520746f2074686520726563697069656e7427732052656365697665722122290a0a20202020202020202f2f205472616e7366657220746f6b656e732066726f6d20746865207369676e657227732073746f726564207661756c7420746f20746865207265636569766572206361706162696c6974790a202020202020202072656365697665725265662e6465706f7369742866726f6d3a203c2d73656c662e74656d705661756c74290a202020207d0a7df8b7b07b2274797065223a22554669783634222c2276616c7565223a2239323233333732303336382e3534373735383038227daf7b2276616c7565223a22307838633533303365616132363230326436222c2274797065223a2241646472657373227daf7b2276616c7565223a22307838633533303365616132363230326436222c2274797065223a2241646472657373227da57b2276616c7565223a2246696174546f6b656e222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02c1518742a95f9b49259abed8364b05d616ee8acebe123e9979f762b9e7522f93697ad2a90da93cbd02b7658f174c9c32e2016a574edb89cf24b57a8155c343e45472616e736665722046756e6769626c6520546f6b656e20776974682041646472657373000401416d6f756e740000554669783634000301526563697069656e74000141646472657373000301465420436f6e74726163742041646472657373000241646472657373000304465420436f6e7472616374204e616d650003",
    "hash": "c1518742a95f9b49259abed8364b05d616ee8acebe123e9979f762b9e7522f93"
  },
  {
    "title": "NFT.01 - Setup NFT Collection",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "/// This transaction is what an account would run\n/// to set itself up to receive NFTs. This function\n/// uses views to know where to set up the collection\n/// in storage and to create the empty collection.\n\nimport 0x631e88ae7f1d7c20\nimport 0x631e88ae7f1d7c20\n\ntransaction(contractAddress: Address, contractName: String) {\n\n    prepare(signer: auth(IssueStorageCapabilityController, PublishCapability, SaveValue) &Account) {\n        // Borrow a reference to the nft contract deployed to the passed account\n        let resolverRef = getAccount(contractAddress)\n            .contracts.borrow<&{NonFungibleToken}>(name: contractName)\n            ?? panic(\"Could not borrow a reference to the non-fungible token contract\")\n\n        // Use that reference to retrieve the NFTCollectionData view \n        let collectionData = resolverRef.resolveContractView(resourceType: nil, viewType: Type<MetadataViews.NFTCollectionData>()) as! MetadataViews.NFTCollectionData?\n            ?? panic(\"Could not resolve the NFTCollectionData view for the given non-fungible token contract\")\n\n        // Create a new empty collections\n        let emptyCollection <- collectionData.createEmptyCollection()\n\n        // save it to the account\n        signer.storage.save(<-emptyCollection, to: collectionData.storagePath)\n\n        // create a public capability for the collection\n        let collectionCap = signer.capabilities.storage.issue<&{NonFungibleToken.Collection}>(\n                collectionData.storagePath\n            )\n        signer.capabilities.publish(collectionCap, at: collectionData.publicPath)\n    }\n}\n",
      "arguments": [
        {
          "type": "Address",
          "value": "0x8c5303eaa26202d6"
        },
        {
          "value": "TopShot",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "/// This transaction is what an account would run\n/// to set itself up to receive NFTs. This function\n/// uses views to know where to set up the collection\n/// in storage and to create the empty collection.\n\nimport 0x631e88ae7f1d7c20\nimport 0x631e88ae7f1d7c20\n\ntransaction(contractAddress: Address, contractName: String) {\n\n    prepare(signer: auth(IssueStorageCapabilityController, PublishCapability, SaveValue) &Account) {\n        // Borrow a reference to the nft contract deployed to the passed account\n        let resolverRef = getAccount(contractAddress)\n            .contracts.borrow<&{NonFungibleToken}>(name: contractName)\n            ?? panic(\"Could not borrow a reference to the non-fungible token contract\")\n\n        // Use that reference to retrieve the NFTCollectionData view \n        let collectionData = resolverRef.resolveContractView(resourceType: nil, viewType: Type<MetadataViews.NFTCollectionData>()) as! MetadataViews.NFTCollectionData?\n            ?? panic(\"Could not resolve the NFTCollectionData view for the given non-fungible token contract\")\n\n        // Create a new empty collections\n        let emptyCollection <- collectionData.createEmptyCollection()\n\n        // save it to the account\n        signer.storage.save(<-emptyCollection, to: collectionData.storagePath)\n\n        // create a public capability for the collection\n        let collectionCap = signer.capabilities.storage.issue<&{NonFungibleToken.Collection}>(\n                collectionData.storagePath\n            )\n        signer.capabilities.publish(collectionCap, at: collectionData.publicPath)\n    }\n}\n",
      "arguments": [
        {
          "type": "Address",
          "value": "0x8c5303eaa26202d6"
        },
        {
          "value": "TopShot",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f906d5b9063c2f2f2f2054686973207472616e73616374696f6e206973207768617420616e206163636f756e7420776f756c642072756e0a2f2f2f20746f2073657420697473656c6620757020746f2072656365697665204e4654732e20546869732066756e6374696f6e0a2f2f2f207573657320766965777320746f206b6e6f7720776865726520746f207365742075702074686520636f6c6c656374696f6e0a2f2f2f20696e2073746f7261676520616e6420746f206372656174652074686520656d70747920636f6c6c656374696f6e2e0a0a696d706f7274203078363331653838616537663164376332300a696d706f7274203078363331653838616537663164376332300a0a7472616e73616374696f6e28636f6e7472616374416464726573733a20416464726573732c20636f6e74726163744e616d653a20537472696e6729207b0a0a2020202070726570617265287369676e65723a206175746828497373756553746f726167654361706162696c697479436f6e74726f6c6c65722c205075626c6973684361706162696c6974792c205361766556616c75652920264163636f756e7429207b0a20202020202020202f2f20426f72726f772061207265666572656e636520746f20746865206e667420636f6e7472616374206465706c6f79656420746f2074686520706173736564206163636f756e740a20202020202020206c6574207265736f6c766572526566203d206765744163636f756e7428636f6e747261637441646472657373290a2020202020202020202020202e636f6e7472616374732e626f72726f773c267b4e6f6e46756e6769626c65546f6b656e7d3e286e616d653a20636f6e74726163744e616d65290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f20746865206e6f6e2d66756e6769626c6520746f6b656e20636f6e747261637422290a0a20202020202020202f2f205573652074686174207265666572656e636520746f20726574726965766520746865204e4654436f6c6c656374696f6e446174612076696577200a20202020202020206c657420636f6c6c656374696f6e44617461203d207265736f6c7665725265662e7265736f6c7665436f6e747261637456696577287265736f75726365547970653a206e696c2c2076696577547970653a20547970653c4d6574616461746156696577732e4e4654436f6c6c656374696f6e446174613e28292920617321204d6574616461746156696577732e4e4654436f6c6c656374696f6e446174613f0a2020202020202020202020203f3f2070616e69632822436f756c64206e6f74207265736f6c766520746865204e4654436f6c6c656374696f6e44617461207669657720666f722074686520676976656e206e6f6e2d66756e6769626c6520746f6b656e20636f6e747261637422290a0a20202020202020202f2f204372656174652061206e657720656d70747920636f6c6c656374696f6e730a20202020202020206c657420656d707479436f6c6c656374696f6e203c2d20636f6c6c656374696f6e446174612e637265617465456d707479436f6c6c656374696f6e28290a0a20202020202020202f2f207361766520697420746f20746865206163636f756e740a20202020202020207369676e65722e73746f726167652e73617665283c2d656d707479436f6c6c656374696f6e2c20746f3a20636f6c6c656374696f6e446174612e73746f7261676550617468290a0a20202020202020202f2f206372656174652061207075626c6963206361706162696c69747920666f722074686520636f6c6c656374696f6e0a20202020202020206c657420636f6c6c656374696f6e436170203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c267b4e6f6e46756e6769626c65546f6b656e2e436f6c6c656374696f6e7d3e280a20202020202020202020202020202020636f6c6c656374696f6e446174612e73746f72616765506174680a202020202020202020202020290a20202020202020207369676e65722e6361706162696c69746965732e7075626c69736828636f6c6c656374696f6e4361702c2061743a20636f6c6c656374696f6e446174612e7075626c696350617468290a202020207d0a7d0af854af7b2274797065223a2241646472657373222c2276616c7565223a22307838633533303365616132363230326436227da37b2276616c7565223a22546f7053686f74222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f906d9f906d5b9063c2f2f2f2054686973207472616e73616374696f6e206973207768617420616e206163636f756e7420776f756c642072756e0a2f2f2f20746f2073657420697473656c6620757020746f2072656365697665204e4654732e20546869732066756e6374696f6e0a2f2f2f207573657320766965777320746f206b6e6f7720776865726520746f207365742075702074686520636f6c6c656374696f6e0a2f2f2f20696e2073746f7261676520616e6420746f206372656174652074686520656d70747920636f6c6c656374696f6e2e0a0a696d706f7274203078363331653838616537663164376332300a696d706f7274203078363331653838616537663164376332300a0a7472616e73616374696f6e28636f6e7472616374416464726573733a20416464726573732c20636f6e74726163744e616d653a20537472696e6729207b0a0a2020202070726570617265287369676e65723a206175746828497373756553746f726167654361706162696c697479436f6e74726f6c6c65722c205075626c6973684361706162696c6974792c205361766556616c75652920264163636f756e7429207b0a20202020202020202f2f20426f72726f772061207265666572656e636520746f20746865206e667420636f6e7472616374206465706c6f79656420746f2074686520706173736564206163636f756e740a20202020202020206c6574207265736f6c766572526566203d206765744163636f756e7428636f6e747261637441646472657373290a2020202020202020202020202e636f6e7472616374732e626f72726f773c267b4e6f6e46756e6769626c65546f6b656e7d3e286e616d653a20636f6e74726163744e616d65290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f20746865206e6f6e2d66756e6769626c6520746f6b656e20636f6e747261637422290a0a20202020202020202f2f205573652074686174207265666572656e636520746f20726574726965766520746865204e4654436f6c6c656374696f6e446174612076696577200a20202020202020206c657420636f6c6c656374696f6e44617461203d207265736f6c7665725265662e7265736f6c7665436f6e747261637456696577287265736f75726365547970653a206e696c2c2076696577547970653a20547970653c4d6574616461746156696577732e4e4654436f6c6c656374696f6e446174613e28292920617321204d6574616461746156696577732e4e4654436f6c6c656374696f6e446174613f0a2020202020202020202020203f3f2070616e69632822436f756c64206e6f74207265736f6c766520746865204e4654436f6c6c656374696f6e44617461207669657720666f722074686520676976656e206e6f6e2d66756e6769626c6520746f6b656e20636f6e747261637422290a0a20202020202020202f2f204372656174652061206e657720656d70747920636f6c6c656374696f6e730a20202020202020206c657420656d707479436f6c6c656374696f6e203c2d20636f6c6c656374696f6e446174612e637265617465456d707479436f6c6c656374696f6e28290a0a20202020202020202f2f207361766520697420746f20746865206163636f756e740a20202020202020207369676e65722e73746f726167652e73617665283c2d656d707479436f6c6c656374696f6e2c20746f3a20636f6c6c656374696f6e446174612e73746f7261676550617468290a0a20202020202020202f2f206372656174652061207075626c6963206361706162696c69747920666f722074686520636f6c6c656374696f6e0a20202020202020206c657420636f6c6c656374696f6e436170203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c267b4e6f6e46756e6769626c65546f6b656e2e436f6c6c656374696f6e7d3e280a20202020202020202020202020202020636f6c6c656374696f6e446174612e73746f72616765506174680a202020202020202020202020290a20202020202020207369676e65722e6361706162696c69746965732e7075626c69736828636f6c6c656374696f6e4361702c2061743a20636f6c6c656374696f6e446174612e7075626c696350617468290a202020207d0a7d0af854af7b2274797065223a2241646472657373222c2276616c7565223a22307838633533303365616132363230326436227da37b2276616c7565223a22546f7053686f74222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02d9ef3b05f8b06d43c3a0ef4066e88e6248323c5f235f9a5d1f8a85d6e2bc9bfa1d12c005fa7a08277204e5d54e29b725c52b9e8e3dd6ff6e01f8d47d7be1626c5365747570204e465420436f6c6c656374696f6e0002014e465420436f6e747261637420416464726573730000416464726573730003044e465420436f6e7472616374204e616d650001",
    "hash": "d9ef3b05f8b06d43c3a0ef4066e88e6248323c5f235f9a5d1f8a85d6e2bc9bfa"
  },
  {
    "title": "NFT.02 - Transfer NFT with Paths",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import 0x631e88ae7f1d7c20\n\n/// Can pass in any storage path and receiver path instead of just the default.\n/// This lets you choose the token you want to send as well the capability you want to send it to.\n///\n/// Any token path can be passed as an argument here, so wallets should\n/// should check argument values to make sure the intended token path is passed in\n///\ntransaction(to: Address, id: UInt64, senderPathIdentifier: String, receiverPathIdentifier: String) {\n\n    // The NFT resource to be transferred\n    let tempNFT: @{NonFungibleToken.NFT}\n\n    prepare(signer: auth(BorrowValue) &Account) {\n\n        let storagePath = StoragePath(identifier: senderPathIdentifier)\n            ?? panic(\"Could not construct a storage path from the provided path identifier string\")\n\n        // borrow a reference to the signer's NFT collection\n        let withdrawRef = signer.storage.borrow<auth(NonFungibleToken.Withdraw) &{NonFungibleToken.Collection}>(\n                from: storagePath\n            ) ?? panic(\"Account does not store a collection object at the specified path\")\n\n        self.tempNFT <- withdrawRef.withdraw(withdrawID: id)\n    }\n\n    execute {\n        let publicPath = PublicPath(identifier: receiverPathIdentifier)\n            ?? panic(\"Could not construct a public path from the provided path identifier string\")\n\n        // get the recipients public account object\n        let recipient = getAccount(to)\n\n        // borrow a public reference to the receivers collection\n        let receiverCap = recipient.capabilities.get<&{NonFungibleToken.Receiver}>(publicPath)\n            ?? panic(\"Could not get the recipient's Receiver Capability\")\n\n        let receiverRef = receiverCap.borrow()\n            ?? panic(\"Could not borrow reference to the recipient's receiver\")\n\n        // Deposit the NFT to the receiver\n        receiverRef.deposit(token: <-self.tempNFT)\n    }\n}",
      "arguments": [
        {
          "type": "Address",
          "value": "0x8c5303eaa26202d6"
        },
        {
          "value": "10",
          "type": "UInt64"
        },
        {
          "value": "flowTokenVault",
          "type": "String"
        },
        {
          "value": "flowTokenReceiver",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import 0x631e88ae7f1d7c20\n\n/// Can pass in any storage path and receiver path instead of just the default.\n/// This lets you choose the token you want to send as well the capability you want to send it to.\n///\n/// Any token path can be passed as an argument here, so wallets should\n/// should check argument values to make sure the intended token path is passed in\n///\ntransaction(to: Address, id: UInt64, senderPathIdentifier: String, receiverPathIdentifier: String) {\n\n    // The NFT resource to be transferred\n    let tempNFT: @{NonFungibleToken.NFT}\n\n    prepare(signer: auth(BorrowValue) &Account) {\n\n        let storagePath = StoragePath(identifier: senderPathIdentifier)\n            ?? panic(\"Could not construct a storage path from the provided path identifier string\")\n\n        // borrow a reference to the signer's NFT collection\n        let withdrawRef = signer.storage.borrow<auth(NonFungibleToken.Withdraw) &{NonFungibleToken.Collection}>(\n                from: storagePath\n            ) ?? panic(\"Account does not store a collection object at the specified path\")\n\n        self.tempNFT <- withdrawRef.withdraw(withdrawID: id)\n    }\n\n    execute {\n        let publicPath = PublicPath(identifier: receiverPathIdentifier)\n            ?? panic(\"Could not construct a public path from the provided path identifier string\")\n\n        // get the recipients public account object\n        let recipient = getAccount(to)\n\n        // borrow a public reference to the receivers collection\n        let receiverCap = recipient.capabilities.get<&{NonFungibleToken.Receiver}>(publicPath)\n            ?? panic(\"Could not get the recipient's Receiver Capability\")\n\n        let receiverRef = receiverCap.borrow()\n            ?? panic(\"Could not borrow reference to the recipient's receiver\")\n\n        // Deposit the NFT to the receiver\n        receiverRef.deposit(token: <-self.tempNFT)\n    }\n}",
      "arguments": [
        {
          "type": "Address",
          "value": "0x8c5303eaa26202d6"
        },
        {
          "value": "10",
          "type": "UInt64"
        },
        {
          "value": "flowTokenVault",
          "type": "String"
        },
        {
          "value": "flowTokenReceiver",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9084db90760696d706f7274203078363331653838616537663164376332300a0a2f2f2f2043616e207061737320696e20616e792073746f72616765207061746820616e64207265636569766572207061746820696e7374656164206f66206a757374207468652064656661756c742e0a2f2f2f2054686973206c65747320796f752063686f6f73652074686520746f6b656e20796f752077616e7420746f2073656e642061732077656c6c20746865206361706162696c69747920796f752077616e7420746f2073656e6420697420746f2e0a2f2f2f0a2f2f2f20416e7920746f6b656e20706174682063616e2062652070617373656420617320616e20617267756d656e7420686572652c20736f2077616c6c6574732073686f756c640a2f2f2f2073686f756c6420636865636b20617267756d656e742076616c75657320746f206d616b6520737572652074686520696e74656e64656420746f6b656e20706174682069732070617373656420696e0a2f2f2f0a7472616e73616374696f6e28746f3a20416464726573732c2069643a2055496e7436342c2073656e646572506174684964656e7469666965723a20537472696e672c207265636569766572506174684964656e7469666965723a20537472696e6729207b0a0a202020202f2f20546865204e4654207265736f7572636520746f206265207472616e736665727265640a202020206c65742074656d704e46543a20407b4e6f6e46756e6769626c65546f6b656e2e4e46547d0a0a2020202070726570617265287369676e65723a206175746828426f72726f7756616c75652920264163636f756e7429207b0a0a20202020202020206c65742073746f7261676550617468203d2053746f7261676550617468286964656e7469666965723a2073656e646572506174684964656e746966696572290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420636f6e73747275637420612073746f7261676520706174682066726f6d207468652070726f76696465642070617468206964656e74696669657220737472696e6722290a0a20202020202020202f2f20626f72726f772061207265666572656e636520746f20746865207369676e65722773204e465420636f6c6c656374696f6e0a20202020202020206c6574207769746864726177526566203d207369676e65722e73746f726167652e626f72726f773c61757468284e6f6e46756e6769626c65546f6b656e2e57697468647261772920267b4e6f6e46756e6769626c65546f6b656e2e436f6c6c656374696f6e7d3e280a2020202020202020202020202020202066726f6d3a2073746f72616765506174680a20202020202020202020202029203f3f2070616e696328224163636f756e7420646f6573206e6f742073746f7265206120636f6c6c656374696f6e206f626a6563742061742074686520737065636966696564207061746822290a0a202020202020202073656c662e74656d704e4654203c2d2077697468647261775265662e776974686472617728776974686472617749443a206964290a202020207d0a0a2020202065786563757465207b0a20202020202020206c6574207075626c696350617468203d205075626c696350617468286964656e7469666965723a207265636569766572506174684964656e746966696572290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420636f6e7374727563742061207075626c696320706174682066726f6d207468652070726f76696465642070617468206964656e74696669657220737472696e6722290a0a20202020202020202f2f206765742074686520726563697069656e7473207075626c6963206163636f756e74206f626a6563740a20202020202020206c657420726563697069656e74203d206765744163636f756e7428746f290a0a20202020202020202f2f20626f72726f772061207075626c6963207265666572656e636520746f207468652072656365697665727320636f6c6c656374696f6e0a20202020202020206c6574207265636569766572436170203d20726563697069656e742e6361706162696c69746965732e6765743c267b4e6f6e46756e6769626c65546f6b656e2e52656365697665727d3e287075626c696350617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f74206765742074686520726563697069656e742773205265636569766572204361706162696c69747922290a0a20202020202020206c6574207265636569766572526566203d2072656365697665724361702e626f72726f7728290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f77207265666572656e636520746f2074686520726563697069656e74277320726563656976657222290a0a20202020202020202f2f204465706f73697420746865204e465420746f207468652072656365697665720a202020202020202072656365697665725265662e6465706f73697428746f6b656e3a203c2d73656c662e74656d704e4654290a202020207d0a7df8a8af7b2274797065223a2241646472657373222c2276616c7565223a22307838633533303365616132363230326436227d9e7b2276616c7565223a223130222c2274797065223a2255496e743634227daa7b2276616c7565223a22666c6f77546f6b656e5661756c74222c2274797065223a22537472696e67227dad7b2276616c7565223a22666c6f77546f6b656e5265636569766572222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90851f9084db90760696d706f7274203078363331653838616537663164376332300a0a2f2f2f2043616e207061737320696e20616e792073746f72616765207061746820616e64207265636569766572207061746820696e7374656164206f66206a757374207468652064656661756c742e0a2f2f2f2054686973206c65747320796f752063686f6f73652074686520746f6b656e20796f752077616e7420746f2073656e642061732077656c6c20746865206361706162696c69747920796f752077616e7420746f2073656e6420697420746f2e0a2f2f2f0a2f2f2f20416e7920746f6b656e20706174682063616e2062652070617373656420617320616e20617267756d656e7420686572652c20736f2077616c6c6574732073686f756c640a2f2f2f2073686f756c6420636865636b20617267756d656e742076616c75657320746f206d616b6520737572652074686520696e74656e64656420746f6b656e20706174682069732070617373656420696e0a2f2f2f0a7472616e73616374696f6e28746f3a20416464726573732c2069643a2055496e7436342c2073656e646572506174684964656e7469666965723a20537472696e672c207265636569766572506174684964656e7469666965723a20537472696e6729207b0a0a202020202f2f20546865204e4654207265736f7572636520746f206265207472616e736665727265640a202020206c65742074656d704e46543a20407b4e6f6e46756e6769626c65546f6b656e2e4e46547d0a0a2020202070726570617265287369676e65723a206175746828426f72726f7756616c75652920264163636f756e7429207b0a0a20202020202020206c65742073746f7261676550617468203d2053746f7261676550617468286964656e7469666965723a2073656e646572506174684964656e746966696572290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420636f6e73747275637420612073746f7261676520706174682066726f6d207468652070726f76696465642070617468206964656e74696669657220737472696e6722290a0a20202020202020202f2f20626f72726f772061207265666572656e636520746f20746865207369676e65722773204e465420636f6c6c656374696f6e0a20202020202020206c6574207769746864726177526566203d207369676e65722e73746f726167652e626f72726f773c61757468284e6f6e46756e6769626c65546f6b656e2e57697468647261772920267b4e6f6e46756e6769626c65546f6b656e2e436f6c6c656374696f6e7d3e280a2020202020202020202020202020202066726f6d3a2073746f72616765506174680a20202020202020202020202029203f3f2070616e696328224163636f756e7420646f6573206e6f742073746f7265206120636f6c6c656374696f6e206f626a6563742061742074686520737065636966696564207061746822290a0a202020202020202073656c662e74656d704e4654203c2d2077697468647261775265662e776974686472617728776974686472617749443a206964290a202020207d0a0a2020202065786563757465207b0a20202020202020206c6574207075626c696350617468203d205075626c696350617468286964656e7469666965723a207265636569766572506174684964656e746966696572290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420636f6e7374727563742061207075626c696320706174682066726f6d207468652070726f76696465642070617468206964656e74696669657220737472696e6722290a0a20202020202020202f2f206765742074686520726563697069656e7473207075626c6963206163636f756e74206f626a6563740a20202020202020206c657420726563697069656e74203d206765744163636f756e7428746f290a0a20202020202020202f2f20626f72726f772061207075626c6963207265666572656e636520746f207468652072656365697665727320636f6c6c656374696f6e0a20202020202020206c6574207265636569766572436170203d20726563697069656e742e6361706162696c69746965732e6765743c267b4e6f6e46756e6769626c65546f6b656e2e52656365697665727d3e287075626c696350617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f74206765742074686520726563697069656e742773205265636569766572204361706162696c69747922290a0a20202020202020206c6574207265636569766572526566203d2072656365697665724361702e626f72726f7728290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f77207265666572656e636520746f2074686520726563697069656e74277320726563656976657222290a0a20202020202020202f2f204465706f73697420746865204e465420746f207468652072656365697665720a202020202020202072656365697665725265662e6465706f73697428746f6b656e3a203c2d73656c662e74656d704e4654290a202020207d0a7df8a8af7b2274797065223a2241646472657373222c2276616c7565223a22307838633533303365616132363230326436227d9e7b2276616c7565223a223130222c2274797065223a2255496e743634227daa7b2276616c7565223a22666c6f77546f6b656e5661756c74222c2274797065223a22537472696e67227dad7b2276616c7565223a22666c6f77546f6b656e5265636569766572222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02f08815a2f535512a65e5c95c391dd6ff89662dad8fd68da836d11d0827a52bd4a56eb0c3e6c3456eee86d5cb62ddf700b0d1e5e65f12fe6926edd6d1816582855472616e73666572204e46542077697468205061746873000401526563697069656e740000416464726573730003014e465420494420746f205472616e73666572000155496e74363400030453656e646572277320436f6c6c656374696f6e2050617468204964656e746966696572000204526563697069656e7427732052656365697665722050617468204964656e7469666965720003",
    "hash": "f08815a2f535512a65e5c95c391dd6ff89662dad8fd68da836d11d0827a52bd4"
  },
  {
    "title": "NFT.03 - Transfer NFT with Address",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import 0x631e88ae7f1d7c20\nimport 0x631e88ae7f1d7c20\n\n/// Can pass in any contract address and name\n/// This lets you choose the token you want to send because\n/// the transaction gets the metadata from the provided contract.\n///\ntransaction(to: Address, id: UInt64, contractAddress: Address, contractName: String) {\n\n    // The NFT resource to be transferred\n    let tempNFT: @{NonFungibleToken.NFT}\n\n    // NFTCollectionData struct to get paths from\n    let collectionData: MetadataViews.NFTCollectionData\n\n    prepare(signer: auth(BorrowValue) &Account) {\n\n        // Borrow a reference to the nft contract deployed to the passed account\n        let resolverRef = getAccount(contractAddress)\n            .contracts.borrow<&{NonFungibleToken}>(name: contractName)\n            ?? panic(\"Could not borrow a reference to the non-fungible token contract\")\n\n        // Use that reference to retrieve the NFTCollectionData view \n        self.collectionData = resolverRef.resolveContractView(resourceType: nil, viewType: Type<MetadataViews.NFTCollectionData>()) as! MetadataViews.NFTCollectionData?\n            ?? panic(\"Could not resolve the NFTCollectionData view for the given non-fungible token contract\")\n\n\n        // borrow a reference to the signer's NFT collection\n        let withdrawRef = signer.storage.borrow<auth(NonFungibleToken.Withdraw) &{NonFungibleToken.Collection}>(\n                from: self.collectionData.storagePath\n            ) ?? panic(\"Account does not store a collection object at the specified path\")\n\n        self.tempNFT <- withdrawRef.withdraw(withdrawID: id)\n    }\n\n    execute {\n        // get the recipients public account object\n        let recipient = getAccount(to)\n\n        // borrow a public reference to the receivers collection\n        let receiverCap = recipient.capabilities.get<&{NonFungibleToken.Receiver}>(self.collectionData.publicPath)\n            ?? panic(\"Could not get the recipient's Receiver Capability\")\n\n        let receiverRef = receiverCap.borrow()\n            ?? panic(\"Could not borrow reference to the recipient's receiver\")\n\n        // Deposit the NFT to the receiver\n        receiverRef.deposit(token: <-self.tempNFT)\n    }\n}",
      "arguments": [
        {
          "type": "Address",
          "value": "0x8c5303eaa26202d6"
        },
        {
          "value": "10",
          "type": "UInt64"
        },
        {
          "value": "0x8c5303eaa26202d6",
          "type": "Address"
        },
        {
          "value": "TopShot",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import 0x631e88ae7f1d7c20\nimport 0x631e88ae7f1d7c20\n\n/// Can pass in any contract address and name\n/// This lets you choose the token you want to send because\n/// the transaction gets the metadata from the provided contract.\n///\ntransaction(to: Address, id: UInt64, contractAddress: Address, contractName: String) {\n\n    // The NFT resource to be transferred\n    let tempNFT: @{NonFungibleToken.NFT}\n\n    // NFTCollectionData struct to get paths from\n    let collectionData: MetadataViews.NFTCollectionData\n\n    prepare(signer: auth(BorrowValue) &Account) {\n\n        // Borrow a reference to the nft contract deployed to the passed account\n        let resolverRef = getAccount(contractAddress)\n            .contracts.borrow<&{NonFungibleToken}>(name: contractName)\n            ?? panic(\"Could not borrow a reference to the non-fungible token contract\")\n\n        // Use that reference to retrieve the NFTCollectionData view \n        self.collectionData = resolverRef.resolveContractView(resourceType: nil, viewType: Type<MetadataViews.NFTCollectionData>()) as! MetadataViews.NFTCollectionData?\n            ?? panic(\"Could not resolve the NFTCollectionData view for the given non-fungible token contract\")\n\n\n        // borrow a reference to the signer's NFT collection\n        let withdrawRef = signer.storage.borrow<auth(NonFungibleToken.Withdraw) &{NonFungibleToken.Collection}>(\n                from: self.collectionData.storagePath\n            ) ?? panic(\"Account does not store a collection object at the specified path\")\n\n        self.tempNFT <- withdrawRef.withdraw(withdrawID: id)\n    }\n\n    execute {\n        // get the recipients public account object\n        let recipient = getAccount(to)\n\n        // borrow a public reference to the receivers collection\n        let receiverCap = recipient.capabilities.get<&{NonFungibleToken.Receiver}>(self.collectionData.publicPath)\n            ?? panic(\"Could not get the recipient's Receiver Capability\")\n\n        let receiverRef = receiverCap.borrow()\n            ?? panic(\"Could not borrow reference to the recipient's receiver\")\n\n        // Deposit the NFT to the receiver\n        receiverRef.deposit(token: <-self.tempNFT)\n    }\n}",
      "arguments": [
        {
          "type": "Address",
          "value": "0x8c5303eaa26202d6"
        },
        {
          "value": "10",
          "type": "UInt64"
        },
        {
          "value": "0x8c5303eaa26202d6",
          "type": "Address"
        },
        {
          "value": "TopShot",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9096fb90887696d706f7274203078363331653838616537663164376332300a696d706f7274203078363331653838616537663164376332300a0a2f2f2f2043616e207061737320696e20616e7920636f6e7472616374206164647265737320616e64206e616d650a2f2f2f2054686973206c65747320796f752063686f6f73652074686520746f6b656e20796f752077616e7420746f2073656e6420626563617573650a2f2f2f20746865207472616e73616374696f6e206765747320746865206d657461646174612066726f6d207468652070726f766964656420636f6e74726163742e0a2f2f2f0a7472616e73616374696f6e28746f3a20416464726573732c2069643a2055496e7436342c20636f6e7472616374416464726573733a20416464726573732c20636f6e74726163744e616d653a20537472696e6729207b0a0a202020202f2f20546865204e4654207265736f7572636520746f206265207472616e736665727265640a202020206c65742074656d704e46543a20407b4e6f6e46756e6769626c65546f6b656e2e4e46547d0a0a202020202f2f204e4654436f6c6c656374696f6e446174612073747275637420746f206765742070617468732066726f6d0a202020206c657420636f6c6c656374696f6e446174613a204d6574616461746156696577732e4e4654436f6c6c656374696f6e446174610a0a2020202070726570617265287369676e65723a206175746828426f72726f7756616c75652920264163636f756e7429207b0a0a20202020202020202f2f20426f72726f772061207265666572656e636520746f20746865206e667420636f6e7472616374206465706c6f79656420746f2074686520706173736564206163636f756e740a20202020202020206c6574207265736f6c766572526566203d206765744163636f756e7428636f6e747261637441646472657373290a2020202020202020202020202e636f6e7472616374732e626f72726f773c267b4e6f6e46756e6769626c65546f6b656e7d3e286e616d653a20636f6e74726163744e616d65290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f20746865206e6f6e2d66756e6769626c6520746f6b656e20636f6e747261637422290a0a20202020202020202f2f205573652074686174207265666572656e636520746f20726574726965766520746865204e4654436f6c6c656374696f6e446174612076696577200a202020202020202073656c662e636f6c6c656374696f6e44617461203d207265736f6c7665725265662e7265736f6c7665436f6e747261637456696577287265736f75726365547970653a206e696c2c2076696577547970653a20547970653c4d6574616461746156696577732e4e4654436f6c6c656374696f6e446174613e28292920617321204d6574616461746156696577732e4e4654436f6c6c656374696f6e446174613f0a2020202020202020202020203f3f2070616e69632822436f756c64206e6f74207265736f6c766520746865204e4654436f6c6c656374696f6e44617461207669657720666f722074686520676976656e206e6f6e2d66756e6769626c6520746f6b656e20636f6e747261637422290a0a0a20202020202020202f2f20626f72726f772061207265666572656e636520746f20746865207369676e65722773204e465420636f6c6c656374696f6e0a20202020202020206c6574207769746864726177526566203d207369676e65722e73746f726167652e626f72726f773c61757468284e6f6e46756e6769626c65546f6b656e2e57697468647261772920267b4e6f6e46756e6769626c65546f6b656e2e436f6c6c656374696f6e7d3e280a2020202020202020202020202020202066726f6d3a2073656c662e636f6c6c656374696f6e446174612e73746f72616765506174680a20202020202020202020202029203f3f2070616e696328224163636f756e7420646f6573206e6f742073746f7265206120636f6c6c656374696f6e206f626a6563742061742074686520737065636966696564207061746822290a0a202020202020202073656c662e74656d704e4654203c2d2077697468647261775265662e776974686472617728776974686472617749443a206964290a202020207d0a0a2020202065786563757465207b0a20202020202020202f2f206765742074686520726563697069656e7473207075626c6963206163636f756e74206f626a6563740a20202020202020206c657420726563697069656e74203d206765744163636f756e7428746f290a0a20202020202020202f2f20626f72726f772061207075626c6963207265666572656e636520746f207468652072656365697665727320636f6c6c656374696f6e0a20202020202020206c6574207265636569766572436170203d20726563697069656e742e6361706162696c69746965732e6765743c267b4e6f6e46756e6769626c65546f6b656e2e52656365697665727d3e2873656c662e636f6c6c656374696f6e446174612e7075626c696350617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f74206765742074686520726563697069656e742773205265636569766572204361706162696c69747922290a0a20202020202020206c6574207265636569766572526566203d2072656365697665724361702e626f72726f7728290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f77207265666572656e636520746f2074686520726563697069656e74277320726563656976657222290a0a20202020202020202f2f204465706f73697420746865204e465420746f207468652072656365697665720a202020202020202072656365697665725265662e6465706f73697428746f6b656e3a203c2d73656c662e74656d704e4654290a202020207d0a7df8a3af7b2274797065223a2241646472657373222c2276616c7565223a22307838633533303365616132363230326436227d9e7b2276616c7565223a223130222c2274797065223a2255496e743634227daf7b2276616c7565223a22307838633533303365616132363230326436222c2274797065223a2241646472657373227da37b2276616c7565223a22546f7053686f74222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90973f9096fb90887696d706f7274203078363331653838616537663164376332300a696d706f7274203078363331653838616537663164376332300a0a2f2f2f2043616e207061737320696e20616e7920636f6e7472616374206164647265737320616e64206e616d650a2f2f2f2054686973206c65747320796f752063686f6f73652074686520746f6b656e20796f752077616e7420746f2073656e6420626563617573650a2f2f2f20746865207472616e73616374696f6e206765747320746865206d657461646174612066726f6d207468652070726f766964656420636f6e74726163742e0a2f2f2f0a7472616e73616374696f6e28746f3a20416464726573732c2069643a2055496e7436342c20636f6e7472616374416464726573733a20416464726573732c20636f6e74726163744e616d653a20537472696e6729207b0a0a202020202f2f20546865204e4654207265736f7572636520746f206265207472616e736665727265640a202020206c65742074656d704e46543a20407b4e6f6e46756e6769626c65546f6b656e2e4e46547d0a0a202020202f2f204e4654436f6c6c656374696f6e446174612073747275637420746f206765742070617468732066726f6d0a202020206c657420636f6c6c656374696f6e446174613a204d6574616461746156696577732e4e4654436f6c6c656374696f6e446174610a0a2020202070726570617265287369676e65723a206175746828426f72726f7756616c75652920264163636f756e7429207b0a0a20202020202020202f2f20426f72726f772061207265666572656e636520746f20746865206e667420636f6e7472616374206465706c6f79656420746f2074686520706173736564206163636f756e740a20202020202020206c6574207265736f6c766572526566203d206765744163636f756e7428636f6e747261637441646472657373290a2020202020202020202020202e636f6e7472616374732e626f72726f773c267b4e6f6e46756e6769626c65546f6b656e7d3e286e616d653a20636f6e74726163744e616d65290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f20746865206e6f6e2d66756e6769626c6520746f6b656e20636f6e747261637422290a0a20202020202020202f2f205573652074686174207265666572656e636520746f20726574726965766520746865204e4654436f6c6c656374696f6e446174612076696577200a202020202020202073656c662e636f6c6c656374696f6e44617461203d207265736f6c7665725265662e7265736f6c7665436f6e747261637456696577287265736f75726365547970653a206e696c2c2076696577547970653a20547970653c4d6574616461746156696577732e4e4654436f6c6c656374696f6e446174613e28292920617321204d6574616461746156696577732e4e4654436f6c6c656374696f6e446174613f0a2020202020202020202020203f3f2070616e69632822436f756c64206e6f74207265736f6c766520746865204e4654436f6c6c656374696f6e44617461207669657720666f722074686520676976656e206e6f6e2d66756e6769626c6520746f6b656e20636f6e747261637422290a0a0a20202020202020202f2f20626f72726f772061207265666572656e636520746f20746865207369676e65722773204e465420636f6c6c656374696f6e0a20202020202020206c6574207769746864726177526566203d207369676e65722e73746f726167652e626f72726f773c61757468284e6f6e46756e6769626c65546f6b656e2e57697468647261772920267b4e6f6e46756e6769626c65546f6b656e2e436f6c6c656374696f6e7d3e280a2020202020202020202020202020202066726f6d3a2073656c662e636f6c6c656374696f6e446174612e73746f72616765506174680a20202020202020202020202029203f3f2070616e696328224163636f756e7420646f6573206e6f742073746f7265206120636f6c6c656374696f6e206f626a6563742061742074686520737065636966696564207061746822290a0a202020202020202073656c662e74656d704e4654203c2d2077697468647261775265662e776974686472617728776974686472617749443a206964290a202020207d0a0a2020202065786563757465207b0a20202020202020202f2f206765742074686520726563697069656e7473207075626c6963206163636f756e74206f626a6563740a20202020202020206c657420726563697069656e74203d206765744163636f756e7428746f290a0a20202020202020202f2f20626f72726f772061207075626c6963207265666572656e636520746f207468652072656365697665727320636f6c6c656374696f6e0a20202020202020206c6574207265636569766572436170203d20726563697069656e742e6361706162696c69746965732e6765743c267b4e6f6e46756e6769626c65546f6b656e2e52656365697665727d3e2873656c662e636f6c6c656374696f6e446174612e7075626c696350617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f74206765742074686520726563697069656e742773205265636569766572204361706162696c69747922290a0a20202020202020206c6574207265636569766572526566203d2072656365697665724361702e626f72726f7728290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f77207265666572656e636520746f2074686520726563697069656e74277320726563656976657222290a0a20202020202020202f2f204465706f73697420746865204e465420746f207468652072656365697665720a202020202020202072656365697665725265662e6465706f73697428746f6b656e3a203c2d73656c662e74656d704e4654290a202020207d0a7df8a3af7b2274797065223a2241646472657373222c2276616c7565223a22307838633533303365616132363230326436227d9e7b2276616c7565223a223130222c2274797065223a2255496e743634227daf7b2276616c7565223a22307838633533303365616132363230326436222c2274797065223a2241646472657373227da37b2276616c7565223a22546f7053686f74222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02b7892b30d7a68531db8af3aa73eec7bf899bd039bc9883c4d0270e44c78cec30111142945f27d91bf3be630737805eba25d586b0c292bb3818e5d4cf4287e31c5472616e73666572204e465420776974682041646472657373000401526563697069656e740000416464726573730003014e465420494420746f205472616e73666572000155496e7436340003014e465420436f6e747261637420416464726573730002416464726573730003044e465420436f6e7472616374204e616d650003",
    "hash": "b7892b30d7a68531db8af3aa73eec7bf899bd039bc9883c4d0270e44c78cec30"
  },
  {
    "title": "TH.01 - Withdraw Unlocked FLOW",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FungibleToken from 0x9a0766d93b6608b7\nimport FlowToken from 0x7e60df042a9c0868\nimport LockedTokens from 0x95e019a17d0e23d7\n\ntransaction(amount: UFix64) {\n\n    let holderRef: auth(LockedTokens.TokenOperations, FungibleToken.Withdraw) &LockedTokens.TokenHolder\n    let vaultRef: auth(FungibleToken.Withdraw) &FlowToken.Vault\n\n    prepare(acct: auth(BorrowValue) &Account) {\n        self.holderRef = acct.storage.borrow<auth(LockedTokens.TokenOperations, FungibleToken.Withdraw) &LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"The primary user account does not have an associated locked account\")\n\n        self.vaultRef = acct.storage.borrow<auth(FungibleToken.Withdraw) &FlowToken.Vault>(from: /storage/flowTokenVault)\n            ?? panic(\"Could not borrow flow token vault ref\")\n    }\n\n    execute {\n        self.vaultRef.deposit(from: <-self.holderRef.withdraw(amount: amount))\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FungibleToken from 0x9a0766d93b6608b7\nimport FlowToken from 0x7e60df042a9c0868\nimport LockedTokens from 0x95e019a17d0e23d7\n\ntransaction(amount: UFix64) {\n\n    let holderRef: auth(LockedTokens.TokenOperations, FungibleToken.Withdraw) &LockedTokens.TokenHolder\n    let vaultRef: auth(FungibleToken.Withdraw) &FlowToken.Vault\n\n    prepare(acct: auth(BorrowValue) &Account) {\n        self.holderRef = acct.storage.borrow<auth(LockedTokens.TokenOperations, FungibleToken.Withdraw) &LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"The primary user account does not have an associated locked account\")\n\n        self.vaultRef = acct.storage.borrow<auth(FungibleToken.Withdraw) &FlowToken.Vault>(from: /storage/flowTokenVault)\n            ?? panic(\"Could not borrow flow token vault ref\")\n    }\n\n    execute {\n        self.vaultRef.deposit(from: <-self.holderRef.withdraw(amount: amount))\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9041fb903aa696d706f72742046756e6769626c65546f6b656e2066726f6d203078396130373636643933623636303862370a696d706f727420466c6f77546f6b656e2066726f6d203078376536306466303432613963303836380a696d706f7274204c6f636b6564546f6b656e732066726f6d203078393565303139613137643065323364370a0a7472616e73616374696f6e28616d6f756e743a2055466978363429207b0a0a202020206c657420686f6c6465725265663a2061757468284c6f636b6564546f6b656e732e546f6b656e4f7065726174696f6e732c2046756e6769626c65546f6b656e2e57697468647261772920264c6f636b6564546f6b656e732e546f6b656e486f6c6465720a202020206c6574207661756c745265663a20617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c740a0a202020207072657061726528616363743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e686f6c646572526566203d20616363742e73746f726167652e626f72726f773c61757468284c6f636b6564546f6b656e732e546f6b656e4f7065726174696f6e732c2046756e6769626c65546f6b656e2e57697468647261772920264c6f636b6564546f6b656e732e546f6b656e486f6c6465723e2866726f6d3a204c6f636b6564546f6b656e732e546f6b656e486f6c64657253746f7261676550617468290a2020202020202020202020203f3f2070616e69632822546865207072696d6172792075736572206163636f756e7420646f6573206e6f74206861766520616e206173736f636961746564206c6f636b6564206163636f756e7422290a0a202020202020202073656c662e7661756c74526566203d20616363742e73746f726167652e626f72726f773c617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c743e2866726f6d3a202f73746f726167652f666c6f77546f6b656e5661756c74290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f7720666c6f7720746f6b656e207661756c742072656622290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7661756c745265662e6465706f7369742866726f6d3a203c2d73656c662e686f6c6465725265662e776974686472617728616d6f756e743a20616d6f756e7429290a202020207d0a7d0af1b07b2274797065223a22554669783634222c2276616c7565223a2239323233333732303336382e3534373735383038227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90423f9041fb903aa696d706f72742046756e6769626c65546f6b656e2066726f6d203078396130373636643933623636303862370a696d706f727420466c6f77546f6b656e2066726f6d203078376536306466303432613963303836380a696d706f7274204c6f636b6564546f6b656e732066726f6d203078393565303139613137643065323364370a0a7472616e73616374696f6e28616d6f756e743a2055466978363429207b0a0a202020206c657420686f6c6465725265663a2061757468284c6f636b6564546f6b656e732e546f6b656e4f7065726174696f6e732c2046756e6769626c65546f6b656e2e57697468647261772920264c6f636b6564546f6b656e732e546f6b656e486f6c6465720a202020206c6574207661756c745265663a20617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c740a0a202020207072657061726528616363743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e686f6c646572526566203d20616363742e73746f726167652e626f72726f773c61757468284c6f636b6564546f6b656e732e546f6b656e4f7065726174696f6e732c2046756e6769626c65546f6b656e2e57697468647261772920264c6f636b6564546f6b656e732e546f6b656e486f6c6465723e2866726f6d3a204c6f636b6564546f6b656e732e546f6b656e486f6c64657253746f7261676550617468290a2020202020202020202020203f3f2070616e69632822546865207072696d6172792075736572206163636f756e7420646f6573206e6f74206861766520616e206173736f636961746564206c6f636b6564206163636f756e7422290a0a202020202020202073656c662e7661756c74526566203d20616363742e73746f726167652e626f72726f773c617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c743e2866726f6d3a202f73746f726167652f666c6f77546f6b656e5661756c74290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f7720666c6f7720746f6b656e207661756c742072656622290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7661756c745265662e6465706f7369742866726f6d3a203c2d73656c662e686f6c6465725265662e776974686472617728616d6f756e743a20616d6f756e7429290a202020207d0a7d0af1b07b2274797065223a22554669783634222c2276616c7565223a2239323233333732303336382e3534373735383038227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02094798e93daeacaa9ff262486a3683ec5a5e2204407e7d00bc3416fbf3efa3b14a830e6f93f74179a99e17c7ae762980c7fdc428bc949767529be2f071ac52b9576974686472617720556e6c6f636b656420464c4f57000101416d6f756e7400005546697836340003",
    "hash": "094798e93daeacaa9ff262486a3683ec5a5e2204407e7d00bc3416fbf3efa3b1"
  },
  {
    "title": "TH.02 - Deposit Unlocked FLOW",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FungibleToken from 0x9a0766d93b6608b7\nimport FlowToken from 0x7e60df042a9c0868\nimport LockedTokens from 0x95e019a17d0e23d7\n\ntransaction(amount: UFix64) {\n\n    let holderRef: &LockedTokens.TokenHolder\n    let vaultRef: auth(FungibleToken.Withdraw) &FlowToken.Vault\n\n    prepare(acct: auth(BorrowValue) &Account) {\n        self.holderRef = acct.storage.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"The primary user account does not have an associated locked account\")\n\n        self.vaultRef = acct.storage.borrow<auth(FungibleToken.Withdraw) &FlowToken.Vault>(from: /storage/flowTokenVault)\n            ?? panic(\"Could not borrow flow token vault ref\")\n    }\n\n    execute {\n        self.holderRef.deposit(from: <-self.vaultRef.withdraw(amount: amount))\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FungibleToken from 0x9a0766d93b6608b7\nimport FlowToken from 0x7e60df042a9c0868\nimport LockedTokens from 0x95e019a17d0e23d7\n\ntransaction(amount: UFix64) {\n\n    let holderRef: &LockedTokens.TokenHolder\n    let vaultRef: auth(FungibleToken.Withdraw) &FlowToken.Vault\n\n    prepare(acct: auth(BorrowValue) &Account) {\n        self.holderRef = acct.storage.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"The primary user account does not have an associated locked account\")\n\n        self.vaultRef = acct.storage.borrow<auth(FungibleToken.Withdraw) &FlowToken.Vault>(from: /storage/flowTokenVault)\n            ?? panic(\"Could not borrow flow token vault ref\")\n    }\n\n    execute {\n        self.holderRef.deposit(from: <-self.vaultRef.withdraw(amount: amount))\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f903a9b90334696d706f72742046756e6769626c65546f6b656e2066726f6d203078396130373636643933623636303862370a696d706f727420466c6f77546f6b656e2066726f6d203078376536306466303432613963303836380a696d706f7274204c6f636b6564546f6b656e732066726f6d203078393565303139613137643065323364370a0a7472616e73616374696f6e28616d6f756e743a2055466978363429207b0a0a202020206c657420686f6c6465725265663a20264c6f636b6564546f6b656e732e546f6b656e486f6c6465720a202020206c6574207661756c745265663a20617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c740a0a202020207072657061726528616363743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e686f6c646572526566203d20616363742e73746f726167652e626f72726f773c264c6f636b6564546f6b656e732e546f6b656e486f6c6465723e2866726f6d3a204c6f636b6564546f6b656e732e546f6b656e486f6c64657253746f7261676550617468290a2020202020202020202020203f3f2070616e69632822546865207072696d6172792075736572206163636f756e7420646f6573206e6f74206861766520616e206173736f636961746564206c6f636b6564206163636f756e7422290a0a202020202020202073656c662e7661756c74526566203d20616363742e73746f726167652e626f72726f773c617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c743e2866726f6d3a202f73746f726167652f666c6f77546f6b656e5661756c74290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f7720666c6f7720746f6b656e207661756c742072656622290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e686f6c6465725265662e6465706f7369742866726f6d3a203c2d73656c662e7661756c745265662e776974686472617728616d6f756e743a20616d6f756e7429290a202020207d0a7d0af1b07b2274797065223a22554669783634222c2276616c7565223a2239323233333732303336382e3534373735383038227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f903adf903a9b90334696d706f72742046756e6769626c65546f6b656e2066726f6d203078396130373636643933623636303862370a696d706f727420466c6f77546f6b656e2066726f6d203078376536306466303432613963303836380a696d706f7274204c6f636b6564546f6b656e732066726f6d203078393565303139613137643065323364370a0a7472616e73616374696f6e28616d6f756e743a2055466978363429207b0a0a202020206c657420686f6c6465725265663a20264c6f636b6564546f6b656e732e546f6b656e486f6c6465720a202020206c6574207661756c745265663a20617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c740a0a202020207072657061726528616363743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e686f6c646572526566203d20616363742e73746f726167652e626f72726f773c264c6f636b6564546f6b656e732e546f6b656e486f6c6465723e2866726f6d3a204c6f636b6564546f6b656e732e546f6b656e486f6c64657253746f7261676550617468290a2020202020202020202020203f3f2070616e69632822546865207072696d6172792075736572206163636f756e7420646f6573206e6f74206861766520616e206173736f636961746564206c6f636b6564206163636f756e7422290a0a202020202020202073656c662e7661756c74526566203d20616363742e73746f726167652e626f72726f773c617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c743e2866726f6d3a202f73746f726167652f666c6f77546f6b656e5661756c74290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f7720666c6f7720746f6b656e207661756c742072656622290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e686f6c6465725265662e6465706f7369742866726f6d3a203c2d73656c662e7661756c745265662e776974686472617728616d6f756e743a20616d6f756e7429290a202020207d0a7d0af1b07b2274797065223a22554669783634222c2276616c7565223a2239323233333732303336382e3534373735383038227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "0217ffcd60667893674d8d4044bdd8232959dc8b694df1dd88d1b9c5443352f253038382a947fa96bf2f4dfe5aa9b4b2abee1ef0975955175e80cf911c3edf4b614465706f73697420556e6c6f636b656420464c4f57000101416d6f756e7400005546697836340003",
    "hash": "17ffcd60667893674d8d4044bdd8232959dc8b694df1dd88d1b9c5443352f253"
  },
  {
    "title": "SCO.01 - Setup Staking Collection",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FungibleToken from 0x9a0766d93b6608b7\nimport FlowToken from 0x7e60df042a9c0868\nimport FlowIDTableStaking from 0x9eca2b38b18b5dfe\nimport LockedTokens from 0x95e019a17d0e23d7\nimport FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// This transaction sets up an account to use a staking collection\n/// It will work regardless of whether they have a regular account, a two-account locked tokens setup,\n/// or staking objects stored in the unlocked account\n\ntransaction {\n    prepare(signer: auth(BorrowValue, Storage, Capabilities) &Account) {\n\n        // If there isn't already a staking collection\n        if signer.storage.borrow<&FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath) == nil {\n\n            // Create private capabilities for the token holder and unlocked vault\n            let lockedHolder = signer.capabilities.storage.issue<auth(FungibleToken.Withdraw, LockedTokens.TokenOperations) &LockedTokens.TokenHolder>(LockedTokens.TokenHolderStoragePath)!\n            let flowToken = signer.capabilities.storage.issue<auth(FungibleToken.Withdraw) &FlowToken.Vault>(/storage/flowTokenVault)!\n\n            // Create a new Staking Collection and put it in storage\n            if lockedHolder.check() {\n                signer.storage.save(\n                    <- FlowStakingCollection.createStakingCollection(\n                        unlockedVault: flowToken,\n                        tokenHolder: lockedHolder\n                    ),\n                    to: FlowStakingCollection.StakingCollectionStoragePath\n                )\n            } else {\n                signer.storage.save(\n                    <- FlowStakingCollection.createStakingCollection(\n                        unlockedVault: flowToken,\n                        tokenHolder: nil\n                    ),\n                    to: FlowStakingCollection.StakingCollectionStoragePath\n                )\n            }\n\n            // Publish a capability to the created staking collection.\n            let stakingCollectionCap = signer.capabilities.storage.issue<&FlowStakingCollection.StakingCollection>(\n                FlowStakingCollection.StakingCollectionStoragePath\n            )\n\n            signer.capabilities.publish(\n                stakingCollectionCap,\n                at: FlowStakingCollection.StakingCollectionPublicPath\n            )\n        }\n\n        // borrow a reference to the staking collection\n        let collectionRef = signer.storage.borrow<&FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow staking collection reference\")\n\n        // If there is a node staker object in the account, put it in the staking collection\n        if signer.storage.borrow<&FlowIDTableStaking.NodeStaker>(from: FlowIDTableStaking.NodeStakerStoragePath) != nil {\n            let node <- signer.storage.load<@FlowIDTableStaking.NodeStaker>(from: FlowIDTableStaking.NodeStakerStoragePath)!\n            collectionRef.addNodeObject(<-node, machineAccountInfo: nil)\n        }\n\n        // If there is a delegator object in the account, put it in the staking collection\n        if signer.storage.borrow<&FlowIDTableStaking.NodeDelegator>(from: FlowIDTableStaking.DelegatorStoragePath) != nil {\n            let delegator <- signer.storage.load<@FlowIDTableStaking.NodeDelegator>(from: FlowIDTableStaking.DelegatorStoragePath)!\n            collectionRef.addDelegatorObject(<-delegator)\n        }\n    }\n}\n",
      "arguments": [],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FungibleToken from 0x9a0766d93b6608b7\nimport FlowToken from 0x7e60df042a9c0868\nimport FlowIDTableStaking from 0x9eca2b38b18b5dfe\nimport LockedTokens from 0x95e019a17d0e23d7\nimport FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// This transaction sets up an account to use a staking collection\n/// It will work regardless of whether they have a regular account, a two-account locked tokens setup,\n/// or staking objects stored in the unlocked account\n\ntransaction {\n    prepare(signer: auth(BorrowValue, Storage, Capabilities) &Account) {\n\n        // If there isn't already a staking collection\n        if signer.storage.borrow<&FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath) == nil {\n\n            // Create private capabilities for the token holder and unlocked vault\n            let lockedHolder = signer.capabilities.storage.issue<auth(FungibleToken.Withdraw, LockedTokens.TokenOperations) &LockedTokens.TokenHolder>(LockedTokens.TokenHolderStoragePath)!\n            let flowToken = signer.capabilities.storage.issue<auth(FungibleToken.Withdraw) &FlowToken.Vault>(/storage/flowTokenVault)!\n\n            // Create a new Staking Collection and put it in storage\n            if lockedHolder.check() {\n                signer.storage.save(\n                    <- FlowStakingCollection.createStakingCollection(\n                        unlockedVault: flowToken,\n                        tokenHolder: lockedHolder\n                    ),\n                    to: FlowStakingCollection.StakingCollectionStoragePath\n                )\n            } else {\n                signer.storage.save(\n                    <- FlowStakingCollection.createStakingCollection(\n                        unlockedVault: flowToken,\n                        tokenHolder: nil\n                    ),\n                    to: FlowStakingCollection.StakingCollectionStoragePath\n                )\n            }\n\n            // Publish a capability to the created staking collection.\n            let stakingCollectionCap = signer.capabilities.storage.issue<&FlowStakingCollection.StakingCollection>(\n                FlowStakingCollection.StakingCollectionStoragePath\n            )\n\n            signer.capabilities.publish(\n                stakingCollectionCap,\n                at: FlowStakingCollection.StakingCollectionPublicPath\n            )\n        }\n\n        // borrow a reference to the staking collection\n        let collectionRef = signer.storage.borrow<&FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow staking collection reference\")\n\n        // If there is a node staker object in the account, put it in the staking collection\n        if signer.storage.borrow<&FlowIDTableStaking.NodeStaker>(from: FlowIDTableStaking.NodeStakerStoragePath) != nil {\n            let node <- signer.storage.load<@FlowIDTableStaking.NodeStaker>(from: FlowIDTableStaking.NodeStakerStoragePath)!\n            collectionRef.addNodeObject(<-node, machineAccountInfo: nil)\n        }\n\n        // If there is a delegator object in the account, put it in the staking collection\n        if signer.storage.borrow<&FlowIDTableStaking.NodeDelegator>(from: FlowIDTableStaking.DelegatorStoragePath) != nil {\n            let delegator <- signer.storage.load<@FlowIDTableStaking.NodeDelegator>(from: FlowIDTableStaking.DelegatorStoragePath)!\n            collectionRef.addDelegatorObject(<-delegator)\n        }\n    }\n}\n",
      "arguments": [],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90df1b90dad696d706f72742046756e6769626c65546f6b656e2066726f6d203078396130373636643933623636303862370a696d706f727420466c6f77546f6b656e2066726f6d203078376536306466303432613963303836380a696d706f727420466c6f7749445461626c655374616b696e672066726f6d203078396563613262333862313862356466650a696d706f7274204c6f636b6564546f6b656e732066726f6d203078393565303139613137643065323364370a696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f2054686973207472616e73616374696f6e207365747320757020616e206163636f756e7420746f207573652061207374616b696e6720636f6c6c656374696f6e0a2f2f2f2049742077696c6c20776f726b207265676172646c657373206f66207768657468657220746865792068617665206120726567756c6172206163636f756e742c20612074776f2d6163636f756e74206c6f636b656420746f6b656e732073657475702c0a2f2f2f206f72207374616b696e67206f626a656374732073746f72656420696e2074686520756e6c6f636b6564206163636f756e740a0a7472616e73616374696f6e207b0a2020202070726570617265287369676e65723a206175746828426f72726f7756616c75652c2053746f726167652c204361706162696c69746965732920264163636f756e7429207b0a0a20202020202020202f2f2049662074686572652069736e277420616c72656164792061207374616b696e6720636f6c6c656374696f6e0a20202020202020206966207369676e65722e73746f726167652e626f72726f773c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f726167655061746829203d3d206e696c207b0a0a2020202020202020202020202f2f204372656174652070726976617465206361706162696c697469657320666f722074686520746f6b656e20686f6c64657220616e6420756e6c6f636b6564207661756c740a2020202020202020202020206c6574206c6f636b6564486f6c646572203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c617574682846756e6769626c65546f6b656e2e57697468647261772c204c6f636b6564546f6b656e732e546f6b656e4f7065726174696f6e732920264c6f636b6564546f6b656e732e546f6b656e486f6c6465723e284c6f636b6564546f6b656e732e546f6b656e486f6c64657253746f726167655061746829210a2020202020202020202020206c657420666c6f77546f6b656e203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c743e282f73746f726167652f666c6f77546f6b656e5661756c7429210a0a2020202020202020202020202f2f204372656174652061206e6577205374616b696e6720436f6c6c656374696f6e20616e642070757420697420696e2073746f726167650a2020202020202020202020206966206c6f636b6564486f6c6465722e636865636b2829207b0a202020202020202020202020202020207369676e65722e73746f726167652e73617665280a20202020202020202020202020202020202020203c2d20466c6f775374616b696e67436f6c6c656374696f6e2e6372656174655374616b696e67436f6c6c656374696f6e280a202020202020202020202020202020202020202020202020756e6c6f636b65645661756c743a20666c6f77546f6b656e2c0a202020202020202020202020202020202020202020202020746f6b656e486f6c6465723a206c6f636b6564486f6c6465720a2020202020202020202020202020202020202020292c0a2020202020202020202020202020202020202020746f3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f72616765506174680a20202020202020202020202020202020290a2020202020202020202020207d20656c7365207b0a202020202020202020202020202020207369676e65722e73746f726167652e73617665280a20202020202020202020202020202020202020203c2d20466c6f775374616b696e67436f6c6c656374696f6e2e6372656174655374616b696e67436f6c6c656374696f6e280a202020202020202020202020202020202020202020202020756e6c6f636b65645661756c743a20666c6f77546f6b656e2c0a202020202020202020202020202020202020202020202020746f6b656e486f6c6465723a206e696c0a2020202020202020202020202020202020202020292c0a2020202020202020202020202020202020202020746f3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f72616765506174680a20202020202020202020202020202020290a2020202020202020202020207d0a0a2020202020202020202020202f2f205075626c6973682061206361706162696c69747920746f207468652063726561746564207374616b696e6720636f6c6c656374696f6e2e0a2020202020202020202020206c6574207374616b696e67436f6c6c656374696f6e436170203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e280a20202020202020202020202020202020466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f72616765506174680a202020202020202020202020290a0a2020202020202020202020207369676e65722e6361706162696c69746965732e7075626c697368280a202020202020202020202020202020207374616b696e67436f6c6c656374696f6e4361702c0a2020202020202020202020202020202061743a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e5075626c6963506174680a202020202020202020202020290a20202020202020207d0a0a20202020202020202f2f20626f72726f772061207265666572656e636520746f20746865207374616b696e6720636f6c6c656374696f6e0a20202020202020206c657420636f6c6c656374696f6e526566203d207369676e65722e73746f726167652e626f72726f773c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f77207374616b696e6720636f6c6c656374696f6e207265666572656e636522290a0a20202020202020202f2f2049662074686572652069732061206e6f6465207374616b6572206f626a65637420696e20746865206163636f756e742c2070757420697420696e20746865207374616b696e6720636f6c6c656374696f6e0a20202020202020206966207369676e65722e73746f726167652e626f72726f773c26466c6f7749445461626c655374616b696e672e4e6f64655374616b65723e2866726f6d3a20466c6f7749445461626c655374616b696e672e4e6f64655374616b657253746f72616765506174682920213d206e696c207b0a2020202020202020202020206c6574206e6f6465203c2d207369676e65722e73746f726167652e6c6f61643c40466c6f7749445461626c655374616b696e672e4e6f64655374616b65723e2866726f6d3a20466c6f7749445461626c655374616b696e672e4e6f64655374616b657253746f726167655061746829210a202020202020202020202020636f6c6c656374696f6e5265662e6164644e6f64654f626a656374283c2d6e6f64652c206d616368696e654163636f756e74496e666f3a206e696c290a20202020202020207d0a0a20202020202020202f2f20496620746865726520697320612064656c656761746f72206f626a65637420696e20746865206163636f756e742c2070757420697420696e20746865207374616b696e6720636f6c6c656374696f6e0a20202020202020206966207369676e65722e73746f726167652e626f72726f773c26466c6f7749445461626c655374616b696e672e4e6f646544656c656761746f723e2866726f6d3a20466c6f7749445461626c655374616b696e672e44656c656761746f7253746f72616765506174682920213d206e696c207b0a2020202020202020202020206c65742064656c656761746f72203c2d207369676e65722e73746f726167652e6c6f61643c40466c6f7749445461626c655374616b696e672e4e6f646544656c656761746f723e2866726f6d3a20466c6f7749445461626c655374616b696e672e44656c656761746f7253746f726167655061746829210a202020202020202020202020636f6c6c656374696f6e5265662e61646444656c656761746f724f626a656374283c2d64656c656761746f72290a20202020202020207d0a202020207d0a7d0ac0a0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90df5f90df1b90dad696d706f72742046756e6769626c65546f6b656e2066726f6d203078396130373636643933623636303862370a696d706f727420466c6f77546f6b656e2066726f6d203078376536306466303432613963303836380a696d706f727420466c6f7749445461626c655374616b696e672066726f6d203078396563613262333862313862356466650a696d706f7274204c6f636b6564546f6b656e732066726f6d203078393565303139613137643065323364370a696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f2054686973207472616e73616374696f6e207365747320757020616e206163636f756e7420746f207573652061207374616b696e6720636f6c6c656374696f6e0a2f2f2f2049742077696c6c20776f726b207265676172646c657373206f66207768657468657220746865792068617665206120726567756c6172206163636f756e742c20612074776f2d6163636f756e74206c6f636b656420746f6b656e732073657475702c0a2f2f2f206f72207374616b696e67206f626a656374732073746f72656420696e2074686520756e6c6f636b6564206163636f756e740a0a7472616e73616374696f6e207b0a2020202070726570617265287369676e65723a206175746828426f72726f7756616c75652c2053746f726167652c204361706162696c69746965732920264163636f756e7429207b0a0a20202020202020202f2f2049662074686572652069736e277420616c72656164792061207374616b696e6720636f6c6c656374696f6e0a20202020202020206966207369676e65722e73746f726167652e626f72726f773c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f726167655061746829203d3d206e696c207b0a0a2020202020202020202020202f2f204372656174652070726976617465206361706162696c697469657320666f722074686520746f6b656e20686f6c64657220616e6420756e6c6f636b6564207661756c740a2020202020202020202020206c6574206c6f636b6564486f6c646572203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c617574682846756e6769626c65546f6b656e2e57697468647261772c204c6f636b6564546f6b656e732e546f6b656e4f7065726174696f6e732920264c6f636b6564546f6b656e732e546f6b656e486f6c6465723e284c6f636b6564546f6b656e732e546f6b656e486f6c64657253746f726167655061746829210a2020202020202020202020206c657420666c6f77546f6b656e203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c743e282f73746f726167652f666c6f77546f6b656e5661756c7429210a0a2020202020202020202020202f2f204372656174652061206e6577205374616b696e6720436f6c6c656374696f6e20616e642070757420697420696e2073746f726167650a2020202020202020202020206966206c6f636b6564486f6c6465722e636865636b2829207b0a202020202020202020202020202020207369676e65722e73746f726167652e73617665280a20202020202020202020202020202020202020203c2d20466c6f775374616b696e67436f6c6c656374696f6e2e6372656174655374616b696e67436f6c6c656374696f6e280a202020202020202020202020202020202020202020202020756e6c6f636b65645661756c743a20666c6f77546f6b656e2c0a202020202020202020202020202020202020202020202020746f6b656e486f6c6465723a206c6f636b6564486f6c6465720a2020202020202020202020202020202020202020292c0a2020202020202020202020202020202020202020746f3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f72616765506174680a20202020202020202020202020202020290a2020202020202020202020207d20656c7365207b0a202020202020202020202020202020207369676e65722e73746f726167652e73617665280a20202020202020202020202020202020202020203c2d20466c6f775374616b696e67436f6c6c656374696f6e2e6372656174655374616b696e67436f6c6c656374696f6e280a202020202020202020202020202020202020202020202020756e6c6f636b65645661756c743a20666c6f77546f6b656e2c0a202020202020202020202020202020202020202020202020746f6b656e486f6c6465723a206e696c0a2020202020202020202020202020202020202020292c0a2020202020202020202020202020202020202020746f3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f72616765506174680a20202020202020202020202020202020290a2020202020202020202020207d0a0a2020202020202020202020202f2f205075626c6973682061206361706162696c69747920746f207468652063726561746564207374616b696e6720636f6c6c656374696f6e2e0a2020202020202020202020206c6574207374616b696e67436f6c6c656374696f6e436170203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e280a20202020202020202020202020202020466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f72616765506174680a202020202020202020202020290a0a2020202020202020202020207369676e65722e6361706162696c69746965732e7075626c697368280a202020202020202020202020202020207374616b696e67436f6c6c656374696f6e4361702c0a2020202020202020202020202020202061743a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e5075626c6963506174680a202020202020202020202020290a20202020202020207d0a0a20202020202020202f2f20626f72726f772061207265666572656e636520746f20746865207374616b696e6720636f6c6c656374696f6e0a20202020202020206c657420636f6c6c656374696f6e526566203d207369676e65722e73746f726167652e626f72726f773c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f77207374616b696e6720636f6c6c656374696f6e207265666572656e636522290a0a20202020202020202f2f2049662074686572652069732061206e6f6465207374616b6572206f626a65637420696e20746865206163636f756e742c2070757420697420696e20746865207374616b696e6720636f6c6c656374696f6e0a20202020202020206966207369676e65722e73746f726167652e626f72726f773c26466c6f7749445461626c655374616b696e672e4e6f64655374616b65723e2866726f6d3a20466c6f7749445461626c655374616b696e672e4e6f64655374616b657253746f72616765506174682920213d206e696c207b0a2020202020202020202020206c6574206e6f6465203c2d207369676e65722e73746f726167652e6c6f61643c40466c6f7749445461626c655374616b696e672e4e6f64655374616b65723e2866726f6d3a20466c6f7749445461626c655374616b696e672e4e6f64655374616b657253746f726167655061746829210a202020202020202020202020636f6c6c656374696f6e5265662e6164644e6f64654f626a656374283c2d6e6f64652c206d616368696e654163636f756e74496e666f3a206e696c290a20202020202020207d0a0a20202020202020202f2f20496620746865726520697320612064656c656761746f72206f626a65637420696e20746865206163636f756e742c2070757420697420696e20746865207374616b696e6720636f6c6c656374696f6e0a20202020202020206966207369676e65722e73746f726167652e626f72726f773c26466c6f7749445461626c655374616b696e672e4e6f646544656c656761746f723e2866726f6d3a20466c6f7749445461626c655374616b696e672e44656c656761746f7253746f72616765506174682920213d206e696c207b0a2020202020202020202020206c65742064656c656761746f72203c2d207369676e65722e73746f726167652e6c6f61643c40466c6f7749445461626c655374616b696e672e4e6f646544656c656761746f723e2866726f6d3a20466c6f7749445461626c655374616b696e672e44656c656761746f7253746f726167655061746829210a202020202020202020202020636f6c6c656374696f6e5265662e61646444656c656761746f724f626a656374283c2d64656c656761746f72290a20202020202020207d0a202020207d0a7d0ac0a0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02861784e7ac135a9cfec90decdff2e53971a4d63135db77bcef3b273b710b181469f30decc15bd78107c631e200963398e8ddbc58bb61e577d223725f348fc2d95365747570205374616b696e6720436f6c6c656374696f6e0000",
    "hash": "861784e7ac135a9cfec90decdff2e53971a4d63135db77bcef3b273b710b1814"
  },
  {
    "title": "SCO.02 - Register Delegator",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Registers a delegator in the staking collection resource\n/// for the specified nodeID and the amount of tokens to commit\n\ntransaction(id: String, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.registerDelegator(nodeID: id, amount: amount)      \n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Registers a delegator in the staking collection resource\n/// for the specified nodeID and the amount of tokens to commit\n\ntransaction(id: String, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.registerDelegator(nodeID: id, amount: amount)      \n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90406b90332696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f2052656769737465727320612064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e207265736f757263650a2f2f2f20666f722074686520737065636966696564206e6f6465494420616e642074686520616d6f756e74206f6620746f6b656e7320746f20636f6d6d69740a0a7472616e73616374696f6e2869643a20537472696e672c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e726567697374657244656c656761746f72286e6f646549443a2069642c20616d6f756e743a20616d6f756e74292020202020200a202020207d0a7d0af88fb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f9040af90406b90332696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f2052656769737465727320612064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e207265736f757263650a2f2f2f20666f722074686520737065636966696564206e6f6465494420616e642074686520616d6f756e74206f6620746f6b656e7320746f20636f6d6d69740a0a7472616e73616374696f6e2869643a20537472696e672c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e726567697374657244656c656761746f72286e6f646549443a2069642c20616d6f756e743a20616d6f756e74292020202020200a202020207d0a7d0af88fb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02e093df9c425be9cdbee44bdbbd721f6aff523e41802a50cf0ff353873e9f94830a41e53ad3c9c1c16c8732dd8331b8ca66063617d433b01d4d09c4730044874452656769737465722044656c656761746f720002044e6f6465204944000001416d6f756e7400015546697836340003",
    "hash": "e093df9c425be9cdbee44bdbbd721f6aff523e41802a50cf0ff353873e9f9483"
  },
  {
    "title": "SCO.03 - Register Node",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import Crypto\nimport FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Registers a delegator in the staking collection resource\n/// for the specified node information and the amount of tokens to commit\n\ntransaction(id: String,\n            role: UInt8,\n            networkingAddress: String,\n            networkingKey: String,\n            stakingKey: String,\n            amount: UFix64,\n            machineAccountKey: String, \n            machineAccountKeySignatureAlgorithm: UInt8, \n            machineAccountKeyHashAlgorithm: UInt8) {\n\n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n\n        if let machineAccount = self.stakingCollectionRef.registerNode(\n            id: id,\n            role: role,\n            networkingAddress: networkingAddress,\n            networkingKey: networkingKey,\n            stakingKey: stakingKey,\n            amount: amount,\n            payer: account\n        ) {\n            let sigAlgo = SignatureAlgorithm(rawValue: machineAccountKeySignatureAlgorithm)\n                ?? panic(\"Could not get a signature algorithm from the raw enum value provided\")\n\n            let hashAlgo = HashAlgorithm(rawValue: machineAccountKeyHashAlgorithm)\n                ?? panic(\"Could not get a hash algorithm from the raw enum value provided\")\n            \n            let publicKey = PublicKey(\n\t\t\t    publicKey: machineAccountKey.decodeHex(),\n\t\t\t    signatureAlgorithm: sigAlgo\n\t\t    )\n            machineAccount.keys.add(publicKey: publicKey, hashAlgorithm: hashAlgo, weight: 1000.0)\n        }\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "flow-node.test:3569",
          "type": "String"
        },
        {
          "value": "1348307bc77c688e80049de9d081aa09755da33e6997605fa059db2144fc85e560cbe6f7da8d74b453f5916618cb8fd392c2db856f3e78221dc68db1b1d914e4",
          "type": "String"
        },
        {
          "value": "9e9ae0d645fd5fd9050792e0b0daa82cc1686d9133afa0f81a784b375c42ae48567d1545e7a9e1965f2c1a32f73cf8575ebb7a967f6e4d104d2df78eb8be409135d12da0499b8a00771f642c1b9c49397f22b440439f036c3bdee82f5309dab3",
          "type": "String"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        },
        {
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164",
          "type": "String"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import Crypto\nimport FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Registers a delegator in the staking collection resource\n/// for the specified node information and the amount of tokens to commit\n\ntransaction(id: String,\n            role: UInt8,\n            networkingAddress: String,\n            networkingKey: String,\n            stakingKey: String,\n            amount: UFix64,\n            machineAccountKey: String, \n            machineAccountKeySignatureAlgorithm: UInt8, \n            machineAccountKeyHashAlgorithm: UInt8) {\n\n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n\n        if let machineAccount = self.stakingCollectionRef.registerNode(\n            id: id,\n            role: role,\n            networkingAddress: networkingAddress,\n            networkingKey: networkingKey,\n            stakingKey: stakingKey,\n            amount: amount,\n            payer: account\n        ) {\n            let sigAlgo = SignatureAlgorithm(rawValue: machineAccountKeySignatureAlgorithm)\n                ?? panic(\"Could not get a signature algorithm from the raw enum value provided\")\n\n            let hashAlgo = HashAlgorithm(rawValue: machineAccountKeyHashAlgorithm)\n                ?? panic(\"Could not get a hash algorithm from the raw enum value provided\")\n            \n            let publicKey = PublicKey(\n\t\t\t    publicKey: machineAccountKey.decodeHex(),\n\t\t\t    signatureAlgorithm: sigAlgo\n\t\t    )\n            machineAccount.keys.add(publicKey: publicKey, hashAlgorithm: hashAlgo, weight: 1000.0)\n        }\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "flow-node.test:3569",
          "type": "String"
        },
        {
          "value": "1348307bc77c688e80049de9d081aa09755da33e6997605fa059db2144fc85e560cbe6f7da8d74b453f5916618cb8fd392c2db856f3e78221dc68db1b1d914e4",
          "type": "String"
        },
        {
          "value": "9e9ae0d645fd5fd9050792e0b0daa82cc1686d9133afa0f81a784b375c42ae48567d1545e7a9e1965f2c1a32f73cf8575ebb7a967f6e4d104d2df78eb8be409135d12da0499b8a00771f642c1b9c49397f22b440439f036c3bdee82f5309dab3",
          "type": "String"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        },
        {
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164",
          "type": "String"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90b24b907a0696d706f72742043727970746f0a696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f2052656769737465727320612064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e207265736f757263650a2f2f2f20666f722074686520737065636966696564206e6f646520696e666f726d6174696f6e20616e642074686520616d6f756e74206f6620746f6b656e7320746f20636f6d6d69740a0a7472616e73616374696f6e2869643a20537472696e672c0a202020202020202020202020726f6c653a2055496e74382c0a2020202020202020202020206e6574776f726b696e67416464726573733a20537472696e672c0a2020202020202020202020206e6574776f726b696e674b65793a20537472696e672c0a2020202020202020202020207374616b696e674b65793a20537472696e672c0a202020202020202020202020616d6f756e743a205546697836342c0a2020202020202020202020206d616368696e654163636f756e744b65793a20537472696e672c200a2020202020202020202020206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d3a2055496e74382c200a2020202020202020202020206d616368696e654163636f756e744b657948617368416c676f726974686d3a2055496e743829207b0a0a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a0a20202020202020206966206c6574206d616368696e654163636f756e74203d2073656c662e7374616b696e67436f6c6c656374696f6e5265662e72656769737465724e6f6465280a20202020202020202020202069643a2069642c0a202020202020202020202020726f6c653a20726f6c652c0a2020202020202020202020206e6574776f726b696e67416464726573733a206e6574776f726b696e67416464726573732c0a2020202020202020202020206e6574776f726b696e674b65793a206e6574776f726b696e674b65792c0a2020202020202020202020207374616b696e674b65793a207374616b696e674b65792c0a202020202020202020202020616d6f756e743a20616d6f756e742c0a20202020202020202020202070617965723a206163636f756e740a202020202020202029207b0a2020202020202020202020206c657420736967416c676f203d205369676e6174757265416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d290a202020202020202020202020202020203f3f2070616e69632822436f756c64206e6f74206765742061207369676e617475726520616c676f726974686d2066726f6d207468652072617720656e756d2076616c75652070726f766964656422290a0a2020202020202020202020206c65742068617368416c676f203d2048617368416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b657948617368416c676f726974686d290a202020202020202020202020202020203f3f2070616e69632822436f756c64206e6f74206765742061206861736820616c676f726974686d2066726f6d207468652072617720656e756d2076616c75652070726f766964656422290a2020202020202020202020200a2020202020202020202020206c6574207075626c69634b6579203d205075626c69634b6579280a090909202020207075626c69634b65793a206d616368696e654163636f756e744b65792e6465636f646548657828292c0a090909202020207369676e6174757265416c676f726974686d3a20736967416c676f0a090920202020290a2020202020202020202020206d616368696e654163636f756e742e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2068617368416c676f2c207765696768743a20313030302e30290a20202020202020207d0a202020207d0a7d0af9033eb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227daf7b2276616c7565223a22666c6f772d6e6f64652e746573743a33353639222c2274797065223a22537472696e67227db89c7b2276616c7565223a223133343833303762633737633638386538303034396465396430383161613039373535646133336536393937363035666130353964623231343466633835653536306362653666376461386437346234353366353931363631386362386664333932633264623835366633653738323231646336386462316231643931346534222c2274797065223a22537472696e67227db8dc7b2276616c7565223a22396539616530643634356664356664393035303739326530623064616138326363313638366439313333616661306638316137383462333735633432616534383536376431353435653761396531393635663263316133326637336366383537356562623761393637663665346431303464326466373865623862653430393133356431326461303439396238613030373731663634326331623963343933393766323262343430343339663033366333626465653832663533303964616233222c2274797065223a22537472696e67227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227db8aa7b2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634222c2274797065223a22537472696e67227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90b28f90b24b907a0696d706f72742043727970746f0a696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f2052656769737465727320612064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e207265736f757263650a2f2f2f20666f722074686520737065636966696564206e6f646520696e666f726d6174696f6e20616e642074686520616d6f756e74206f6620746f6b656e7320746f20636f6d6d69740a0a7472616e73616374696f6e2869643a20537472696e672c0a202020202020202020202020726f6c653a2055496e74382c0a2020202020202020202020206e6574776f726b696e67416464726573733a20537472696e672c0a2020202020202020202020206e6574776f726b696e674b65793a20537472696e672c0a2020202020202020202020207374616b696e674b65793a20537472696e672c0a202020202020202020202020616d6f756e743a205546697836342c0a2020202020202020202020206d616368696e654163636f756e744b65793a20537472696e672c200a2020202020202020202020206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d3a2055496e74382c200a2020202020202020202020206d616368696e654163636f756e744b657948617368416c676f726974686d3a2055496e743829207b0a0a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a0a20202020202020206966206c6574206d616368696e654163636f756e74203d2073656c662e7374616b696e67436f6c6c656374696f6e5265662e72656769737465724e6f6465280a20202020202020202020202069643a2069642c0a202020202020202020202020726f6c653a20726f6c652c0a2020202020202020202020206e6574776f726b696e67416464726573733a206e6574776f726b696e67416464726573732c0a2020202020202020202020206e6574776f726b696e674b65793a206e6574776f726b696e674b65792c0a2020202020202020202020207374616b696e674b65793a207374616b696e674b65792c0a202020202020202020202020616d6f756e743a20616d6f756e742c0a20202020202020202020202070617965723a206163636f756e740a202020202020202029207b0a2020202020202020202020206c657420736967416c676f203d205369676e6174757265416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d290a202020202020202020202020202020203f3f2070616e69632822436f756c64206e6f74206765742061207369676e617475726520616c676f726974686d2066726f6d207468652072617720656e756d2076616c75652070726f766964656422290a0a2020202020202020202020206c65742068617368416c676f203d2048617368416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b657948617368416c676f726974686d290a202020202020202020202020202020203f3f2070616e69632822436f756c64206e6f74206765742061206861736820616c676f726974686d2066726f6d207468652072617720656e756d2076616c75652070726f766964656422290a2020202020202020202020200a2020202020202020202020206c6574207075626c69634b6579203d205075626c69634b6579280a090909202020207075626c69634b65793a206d616368696e654163636f756e744b65792e6465636f646548657828292c0a090909202020207369676e6174757265416c676f726974686d3a20736967416c676f0a090920202020290a2020202020202020202020206d616368696e654163636f756e742e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2068617368416c676f2c207765696768743a20313030302e30290a20202020202020207d0a202020207d0a7d0af9033eb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227daf7b2276616c7565223a22666c6f772d6e6f64652e746573743a33353639222c2274797065223a22537472696e67227db89c7b2276616c7565223a223133343833303762633737633638386538303034396465396430383161613039373535646133336536393937363035666130353964623231343466633835653536306362653666376461386437346234353366353931363631386362386664333932633264623835366633653738323231646336386462316231643931346534222c2274797065223a22537472696e67227db8dc7b2276616c7565223a22396539616530643634356664356664393035303739326530623064616138326363313638366439313333616661306638316137383462333735633432616534383536376431353435653761396531393635663263316133326637336366383537356562623761393637663665346431303464326466373865623862653430393133356431326461303439396238613030373731663634326331623963343933393766323262343430343339663033366333626465653832663533303964616233222c2274797065223a22537472696e67227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227db8aa7b2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634222c2274797065223a22537472696e67227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02deb5f758f3eb3b125cd9b14a6528f18d535377709fcef41e743751eb828009213b0b2bbc3a2ad674122c182112f7008a8d3d1b60b107033c0ebe7bbe50df52675265676973746572204e6f64650009044e6f64652049440000074e6f646520526f6c650001044e6574772e20416464726573730002044e6574772e204b65790003045374616b696e67204b6579000401416d6f756e7400055546697836340003044d41205075622e204b65790006064d41205369676e2e20416c672e0007054d41204861736820416c672e0008",
    "hash": "deb5f758f3eb3b125cd9b14a6528f18d535377709fcef41e743751eb82800921"
  },
  {
    "title": "SCO.04 - Create Machine Account",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import Crypto\nimport FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Creates a machine account for a node that is already in the staking collection\n/// and adds public keys to the new account\n\ntransaction(nodeID: String, \n            machineAccountKey: String, \n            machineAccountKeySignatureAlgorithm: UInt8, \n            machineAccountKeyHashAlgorithm: UInt8) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n\n        if let machineAccount = self.stakingCollectionRef.createMachineAccountForExistingNode(nodeID: nodeID, payer: account) {\n            let sigAlgo = SignatureAlgorithm(rawValue: machineAccountKeySignatureAlgorithm)\n                ?? panic(\"Could not get a signature algorithm from the raw enum value provided\")\n\n            let hashAlgo = HashAlgorithm(rawValue: machineAccountKeyHashAlgorithm)\n                ?? panic(\"Could not get a hash algorithm from the raw enum value provided\")\n            \n            let publicKey = PublicKey(\n\t\t\t    publicKey: machineAccountKey.decodeHex(),\n\t\t\t    signatureAlgorithm: sigAlgo\n\t\t    )\n            machineAccount.keys.add(publicKey: publicKey, hashAlgorithm: hashAlgo, weight: 1000.0)\n        } else {\n            panic(\"Could not create a machine account for the node\")\n        }\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164",
          "type": "String"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import Crypto\nimport FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Creates a machine account for a node that is already in the staking collection\n/// and adds public keys to the new account\n\ntransaction(nodeID: String, \n            machineAccountKey: String, \n            machineAccountKeySignatureAlgorithm: UInt8, \n            machineAccountKeyHashAlgorithm: UInt8) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n\n        if let machineAccount = self.stakingCollectionRef.createMachineAccountForExistingNode(nodeID: nodeID, payer: account) {\n            let sigAlgo = SignatureAlgorithm(rawValue: machineAccountKeySignatureAlgorithm)\n                ?? panic(\"Could not get a signature algorithm from the raw enum value provided\")\n\n            let hashAlgo = HashAlgorithm(rawValue: machineAccountKeyHashAlgorithm)\n                ?? panic(\"Could not get a hash algorithm from the raw enum value provided\")\n            \n            let publicKey = PublicKey(\n\t\t\t    publicKey: machineAccountKey.decodeHex(),\n\t\t\t    signatureAlgorithm: sigAlgo\n\t\t    )\n            machineAccount.keys.add(publicKey: publicKey, hashAlgorithm: hashAlgo, weight: 1000.0)\n        } else {\n            panic(\"Could not create a machine account for the node\")\n        }\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164",
          "type": "String"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9082bb906a1696d706f72742043727970746f0a696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20437265617465732061206d616368696e65206163636f756e7420666f722061206e6f6465207468617420697320616c726561647920696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f20616e642061646473207075626c6963206b65797320746f20746865206e6577206163636f756e740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c200a2020202020202020202020206d616368696e654163636f756e744b65793a20537472696e672c200a2020202020202020202020206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d3a2055496e74382c200a2020202020202020202020206d616368696e654163636f756e744b657948617368416c676f726974686d3a2055496e743829207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a0a20202020202020206966206c6574206d616368696e654163636f756e74203d2073656c662e7374616b696e67436f6c6c656374696f6e5265662e6372656174654d616368696e654163636f756e74466f724578697374696e674e6f6465286e6f646549443a206e6f646549442c2070617965723a206163636f756e7429207b0a2020202020202020202020206c657420736967416c676f203d205369676e6174757265416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d290a202020202020202020202020202020203f3f2070616e69632822436f756c64206e6f74206765742061207369676e617475726520616c676f726974686d2066726f6d207468652072617720656e756d2076616c75652070726f766964656422290a0a2020202020202020202020206c65742068617368416c676f203d2048617368416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b657948617368416c676f726974686d290a202020202020202020202020202020203f3f2070616e69632822436f756c64206e6f74206765742061206861736820616c676f726974686d2066726f6d207468652072617720656e756d2076616c75652070726f766964656422290a2020202020202020202020200a2020202020202020202020206c6574207075626c69634b6579203d205075626c69634b6579280a090909202020207075626c69634b65793a206d616368696e654163636f756e744b65792e6465636f646548657828292c0a090909202020207369676e6174757265416c676f726974686d3a20736967416c676f0a090920202020290a2020202020202020202020206d616368696e654163636f756e742e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2068617368416c676f2c207765696768743a20313030302e30290a20202020202020207d20656c7365207b0a20202020202020202020202070616e69632822436f756c64206e6f74206372656174652061206d616368696e65206163636f756e7420666f7220746865206e6f646522290a20202020202020207d0a202020207d0a7d0af90144b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db8aa7b2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634222c2274797065223a22537472696e67227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f9082ff9082bb906a1696d706f72742043727970746f0a696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20437265617465732061206d616368696e65206163636f756e7420666f722061206e6f6465207468617420697320616c726561647920696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f20616e642061646473207075626c6963206b65797320746f20746865206e6577206163636f756e740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c200a2020202020202020202020206d616368696e654163636f756e744b65793a20537472696e672c200a2020202020202020202020206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d3a2055496e74382c200a2020202020202020202020206d616368696e654163636f756e744b657948617368416c676f726974686d3a2055496e743829207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a0a20202020202020206966206c6574206d616368696e654163636f756e74203d2073656c662e7374616b696e67436f6c6c656374696f6e5265662e6372656174654d616368696e654163636f756e74466f724578697374696e674e6f6465286e6f646549443a206e6f646549442c2070617965723a206163636f756e7429207b0a2020202020202020202020206c657420736967416c676f203d205369676e6174757265416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d290a202020202020202020202020202020203f3f2070616e69632822436f756c64206e6f74206765742061207369676e617475726520616c676f726974686d2066726f6d207468652072617720656e756d2076616c75652070726f766964656422290a0a2020202020202020202020206c65742068617368416c676f203d2048617368416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b657948617368416c676f726974686d290a202020202020202020202020202020203f3f2070616e69632822436f756c64206e6f74206765742061206861736820616c676f726974686d2066726f6d207468652072617720656e756d2076616c75652070726f766964656422290a2020202020202020202020200a2020202020202020202020206c6574207075626c69634b6579203d205075626c69634b6579280a090909202020207075626c69634b65793a206d616368696e654163636f756e744b65792e6465636f646548657828292c0a090909202020207369676e6174757265416c676f726974686d3a20736967416c676f0a090920202020290a2020202020202020202020206d616368696e654163636f756e742e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2068617368416c676f2c207765696768743a20313030302e30290a20202020202020207d20656c7365207b0a20202020202020202020202070616e69632822436f756c64206e6f74206372656174652061206d616368696e65206163636f756e7420666f7220746865206e6f646522290a20202020202020207d0a202020207d0a7d0af90144b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db8aa7b2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634222c2274797065223a22537472696e67227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "024c1ad61500bcd0d32d7aa7eb84ca9b7417219ed6d524e05de8c55fb7d50940e4f0a6cedb6703cd4ce4cc3b735e5edb5a7e5b17a87a725343d745e5d53b7c0a01437265617465204d616368696e65204163636f756e740004044e6f64652049440000044d41205075622e204b65790001064d41205369676e2e20416c672e0002054d41204861736820416c672e0003",
    "hash": "4c1ad61500bcd0d32d7aa7eb84ca9b7417219ed6d524e05de8c55fb7d50940e4"
  },
  {
    "title": "SCO.05 - Request Unstaking - 1",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Requests unstaking for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.requestUnstaking(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Requests unstaking for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.requestUnstaking(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90430b9033b696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20526571756573747320756e7374616b696e6720666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e72657175657374556e7374616b696e67286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90434f90430b9033b696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20526571756573747320756e7374616b696e6720666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e72657175657374556e7374616b696e67286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "022d59f2c2c402f919c8dba30009e31480d54e2b250d2e10456e1ff029bd7cce99f26c058a127500fcd8445ba9fcf55149fe8f1a1a7cd212688d13fcd6ee2765295265717565737420556e7374616b696e670003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "2d59f2c2c402f919c8dba30009e31480d54e2b250d2e10456e1ff029bd7cce99"
  },
  {
    "title": "SCO.05 - Request Unstaking - 2",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Requests unstaking for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.requestUnstaking(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Requests unstaking for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.requestUnstaking(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9044bb9033b696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20526571756573747320756e7374616b696e6720666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e72657175657374556e7374616b696e67286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f9044ff9044bb9033b696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20526571756573747320756e7374616b696e6720666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e72657175657374556e7374616b696e67286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "022d59f2c2c402f919c8dba30009e31480d54e2b250d2e10456e1ff029bd7cce99f26c058a127500fcd8445ba9fcf55149fe8f1a1a7cd212688d13fcd6ee2765295265717565737420556e7374616b696e670003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "2d59f2c2c402f919c8dba30009e31480d54e2b250d2e10456e1ff029bd7cce99"
  },
  {
    "title": "SCO.06 - Stake New Tokens - 1",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Commits new tokens to stake for the specified node or delegator in the staking collection\n/// The tokens from the locked vault are used first, if it exists\n/// followed by the tokens from the unlocked vault\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeNewTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Commits new tokens to stake for the specified node or delegator in the staking collection\n/// The tokens from the locked vault are used first, if it exists\n/// followed by the tokens from the unlocked vault\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeNewTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f904acb903b7696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20436f6d6d697473206e657720746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e732066726f6d20746865206c6f636b6564207661756c742061726520757365642066697273742c206966206974206578697374730a2f2f2f20666f6c6c6f7765642062792074686520746f6b656e732066726f6d2074686520756e6c6f636b6564207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b654e6577546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f904b0f904acb903b7696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20436f6d6d697473206e657720746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e732066726f6d20746865206c6f636b6564207661756c742061726520757365642066697273742c206966206974206578697374730a2f2f2f20666f6c6c6f7765642062792074686520746f6b656e732066726f6d2074686520756e6c6f636b6564207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b654e6577546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02cf2b03950077352487e6344ab65edc3e1856731ab9cf68aa2ebbe279ae496d4b4c0658934352486097cc89fa06b98bac21e514770fc6a4d70a7adc4bec6d711d5374616b65204e657720546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "cf2b03950077352487e6344ab65edc3e1856731ab9cf68aa2ebbe279ae496d4b"
  },
  {
    "title": "SCO.06 - Stake New Tokens - 2",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Commits new tokens to stake for the specified node or delegator in the staking collection\n/// The tokens from the locked vault are used first, if it exists\n/// followed by the tokens from the unlocked vault\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeNewTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Commits new tokens to stake for the specified node or delegator in the staking collection\n/// The tokens from the locked vault are used first, if it exists\n/// followed by the tokens from the unlocked vault\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeNewTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f904c7b903b7696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20436f6d6d697473206e657720746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e732066726f6d20746865206c6f636b6564207661756c742061726520757365642066697273742c206966206974206578697374730a2f2f2f20666f6c6c6f7765642062792074686520746f6b656e732066726f6d2074686520756e6c6f636b6564207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b654e6577546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f904cbf904c7b903b7696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20436f6d6d697473206e657720746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e732066726f6d20746865206c6f636b6564207661756c742061726520757365642066697273742c206966206974206578697374730a2f2f2f20666f6c6c6f7765642062792074686520746f6b656e732066726f6d2074686520756e6c6f636b6564207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b654e6577546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02cf2b03950077352487e6344ab65edc3e1856731ab9cf68aa2ebbe279ae496d4b4c0658934352486097cc89fa06b98bac21e514770fc6a4d70a7adc4bec6d711d5374616b65204e657720546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "cf2b03950077352487e6344ab65edc3e1856731ab9cf68aa2ebbe279ae496d4b"
  },
  {
    "title": "SCO.07 - Stake Rewarded Tokens - 1",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Commits rewarded tokens to stake for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeRewardedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Commits rewarded tokens to stake for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeRewardedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90441b9034c696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20436f6d6d69747320726577617264656420746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b655265776172646564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90445f90441b9034c696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20436f6d6d69747320726577617264656420746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b655265776172646564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "024395faf2e515eea4d40f82416ad387575f0d5a580612223c361130e53e72f00bc989e8b3beb9c2eb5af2ee1e11d592c9f1131e76e7ef105a0d40cf1610d1e3485374616b6520526577617264656420546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "4395faf2e515eea4d40f82416ad387575f0d5a580612223c361130e53e72f00b"
  },
  {
    "title": "SCO.07 - Stake Rewarded Tokens - 2",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Commits rewarded tokens to stake for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeRewardedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Commits rewarded tokens to stake for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeRewardedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9045cb9034c696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20436f6d6d69747320726577617264656420746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b655265776172646564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90460f9045cb9034c696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20436f6d6d69747320726577617264656420746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b655265776172646564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "024395faf2e515eea4d40f82416ad387575f0d5a580612223c361130e53e72f00bc989e8b3beb9c2eb5af2ee1e11d592c9f1131e76e7ef105a0d40cf1610d1e3485374616b6520526577617264656420546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "4395faf2e515eea4d40f82416ad387575f0d5a580612223c361130e53e72f00b"
  },
  {
    "title": "SCO.08 - Stake Unstaked Tokens - 1",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Commits unstaked tokens to stake for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeUnstakedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Commits unstaked tokens to stake for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeUnstakedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90441b9034c696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20436f6d6d69747320756e7374616b656420746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b65556e7374616b6564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90445f90441b9034c696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20436f6d6d69747320756e7374616b656420746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b65556e7374616b6564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "020b1721f2a8ef6c0c4121ef83c7b38f2141eebcd65c72dab9ebaafe1b4d66fea8fe6adb75bf22b2033800e916fa7e3a7810417e9a36d35320de7f4b5f7ec4f1b85374616b6520556e7374616b656420546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "0b1721f2a8ef6c0c4121ef83c7b38f2141eebcd65c72dab9ebaafe1b4d66fea8"
  },
  {
    "title": "SCO.08 - Stake Unstaked Tokens - 2",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Commits unstaked tokens to stake for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeUnstakedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Commits unstaked tokens to stake for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeUnstakedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9045cb9034c696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20436f6d6d69747320756e7374616b656420746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b65556e7374616b6564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90460f9045cb9034c696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20436f6d6d69747320756e7374616b656420746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b65556e7374616b6564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "020b1721f2a8ef6c0c4121ef83c7b38f2141eebcd65c72dab9ebaafe1b4d66fea8fe6adb75bf22b2033800e916fa7e3a7810417e9a36d35320de7f4b5f7ec4f1b85374616b6520556e7374616b656420546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "0b1721f2a8ef6c0c4121ef83c7b38f2141eebcd65c72dab9ebaafe1b4d66fea8"
  },
  {
    "title": "SCO.09 - Unstake All",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Requests to unstake ALL tokens for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.unstakeAll(nodeID: nodeID)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Requests to unstake ALL tokens for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.unstakeAll(nodeID: nodeID)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90394b902f1696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20526571756573747320746f20756e7374616b6520414c4c20746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e6729207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e756e7374616b65416c6c286e6f646549443a206e6f64654944290a202020207d0a7d0af85eb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90398f90394b902f1696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20526571756573747320746f20756e7374616b6520414c4c20746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e6729207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e756e7374616b65416c6c286e6f646549443a206e6f64654944290a202020207d0a7d0af85eb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02c84843e3399be2ce95ea00e7c17d72db3c5c3363ec008c7a1c1cfa5b6afe70ae1c8256fb857f6c6fd929511ecac8624d0159877cf72c884f7128297dfb069510556e7374616b6520416c6c0001044e6f64652049440000",
    "hash": "c84843e3399be2ce95ea00e7c17d72db3c5c3363ec008c7a1c1cfa5b6afe70ae"
  },
  {
    "title": "SCO.10 - Withdraw Rewarded Tokens - 1",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Request to withdraw rewarded tokens for the specified node or delegator in the staking collection\n/// The tokens are automatically deposited to the unlocked account vault first,\n/// And then any locked tokens are deposited into the locked account vault\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawRewardedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Request to withdraw rewarded tokens for the specified node or delegator in the staking collection\n/// The tokens are automatically deposited to the unlocked account vault first,\n/// And then any locked tokens are deposited into the locked account vault\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawRewardedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f904fdb903ed696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f205265717565737420746f20776974686472617720726577617264656420746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c742066697273742c0a2f2f2f20416e64207468656e20616e79206c6f636b656420746f6b656e7320617265206465706f736974656420696e746f20746865206c6f636b6564206163636f756e74207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e77697468647261775265776172646564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90501f904fdb903ed696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f205265717565737420746f20776974686472617720726577617264656420746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c742066697273742c0a2f2f2f20416e64207468656e20616e79206c6f636b656420746f6b656e7320617265206465706f736974656420696e746f20746865206c6f636b6564206163636f756e74207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e77697468647261775265776172646564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "025a07ca4c016973bdeb168590e111b2c2855833b5ece11ffb28b08b8668f258a8fbd8ebbfff7a88b6b667ff4e3f9f904eaaba71cbf02a140f3b7007c61fbd8f34576974686472617720526577617264656420546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "5a07ca4c016973bdeb168590e111b2c2855833b5ece11ffb28b08b8668f258a8"
  },
  {
    "title": "SCO.10 - Withdraw Rewarded Tokens - 2",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Request to withdraw rewarded tokens for the specified node or delegator in the staking collection\n/// The tokens are automatically deposited to the unlocked account vault first,\n/// And then any locked tokens are deposited into the locked account vault\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawRewardedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Request to withdraw rewarded tokens for the specified node or delegator in the staking collection\n/// The tokens are automatically deposited to the unlocked account vault first,\n/// And then any locked tokens are deposited into the locked account vault\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawRewardedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f904e2b903ed696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f205265717565737420746f20776974686472617720726577617264656420746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c742066697273742c0a2f2f2f20416e64207468656e20616e79206c6f636b656420746f6b656e7320617265206465706f736974656420696e746f20746865206c6f636b6564206163636f756e74207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e77697468647261775265776172646564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f904e6f904e2b903ed696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f205265717565737420746f20776974686472617720726577617264656420746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c742066697273742c0a2f2f2f20416e64207468656e20616e79206c6f636b656420746f6b656e7320617265206465706f736974656420696e746f20746865206c6f636b6564206163636f756e74207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e77697468647261775265776172646564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "025a07ca4c016973bdeb168590e111b2c2855833b5ece11ffb28b08b8668f258a8fbd8ebbfff7a88b6b667ff4e3f9f904eaaba71cbf02a140f3b7007c61fbd8f34576974686472617720526577617264656420546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "5a07ca4c016973bdeb168590e111b2c2855833b5ece11ffb28b08b8668f258a8"
  },
  {
    "title": "SCO.11 - Withdraw Unstaked Tokens - 1",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Request to withdraw unstaked tokens for the specified node or delegator in the staking collection\n/// The tokens are automatically deposited to the unlocked account vault first,\n/// And then any locked tokens are deposited into the locked account vault if it is there\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawUnstakedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Request to withdraw unstaked tokens for the specified node or delegator in the staking collection\n/// The tokens are automatically deposited to the unlocked account vault first,\n/// And then any locked tokens are deposited into the locked account vault if it is there\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawUnstakedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f904f1b903fc696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f205265717565737420746f20776974686472617720756e7374616b656420746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c742066697273742c0a2f2f2f20416e64207468656e20616e79206c6f636b656420746f6b656e7320617265206465706f736974656420696e746f20746865206c6f636b6564206163636f756e74207661756c742069662069742069732074686572650a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7769746864726177556e7374616b6564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f904f5f904f1b903fc696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f205265717565737420746f20776974686472617720756e7374616b656420746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c742066697273742c0a2f2f2f20416e64207468656e20616e79206c6f636b656420746f6b656e7320617265206465706f736974656420696e746f20746865206c6f636b6564206163636f756e74207661756c742069662069742069732074686572650a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7769746864726177556e7374616b6564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "0201fd4ea83d20510d24ed9f245873a7ee2715aefb774495c80bce7e3e34d6442ec2484f17e640e285769c3edaa6f2d090dcef1f2f57983f82b7179c3c047290ca576974686472617720556e7374616b656420546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "01fd4ea83d20510d24ed9f245873a7ee2715aefb774495c80bce7e3e34d6442e"
  },
  {
    "title": "SCO.11 - Withdraw Unstaked Tokens - 2",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Request to withdraw unstaked tokens for the specified node or delegator in the staking collection\n/// The tokens are automatically deposited to the unlocked account vault first,\n/// And then any locked tokens are deposited into the locked account vault if it is there\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawUnstakedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Request to withdraw unstaked tokens for the specified node or delegator in the staking collection\n/// The tokens are automatically deposited to the unlocked account vault first,\n/// And then any locked tokens are deposited into the locked account vault if it is there\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawUnstakedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9050cb903fc696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f205265717565737420746f20776974686472617720756e7374616b656420746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c742066697273742c0a2f2f2f20416e64207468656e20616e79206c6f636b656420746f6b656e7320617265206465706f736974656420696e746f20746865206c6f636b6564206163636f756e74207661756c742069662069742069732074686572650a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7769746864726177556e7374616b6564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90510f9050cb903fc696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f205265717565737420746f20776974686472617720756e7374616b656420746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c742066697273742c0a2f2f2f20416e64207468656e20616e79206c6f636b656420746f6b656e7320617265206465706f736974656420696e746f20746865206c6f636b6564206163636f756e74207661756c742069662069742069732074686572650a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7769746864726177556e7374616b6564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "0201fd4ea83d20510d24ed9f245873a7ee2715aefb774495c80bce7e3e34d6442ec2484f17e640e285769c3edaa6f2d090dcef1f2f57983f82b7179c3c047290ca576974686472617720556e7374616b656420546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "01fd4ea83d20510d24ed9f245873a7ee2715aefb774495c80bce7e3e34d6442e"
  },
  {
    "title": "SCO.12 - Close Stake - 1",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n// Closes out a staking object in the staking collection\n// This does not remove the record from the identity table,\n// but it does mean that the account that closes it cannot ever access it again\n\ntransaction(nodeID: String, delegatorID: UInt32?) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.closeStake(nodeID: nodeID, delegatorID: delegatorID)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n// Closes out a staking object in the staking collection\n// This does not remove the record from the identity table,\n// but it does mean that the account that closes it cannot ever access it again\n\ntransaction(nodeID: String, delegatorID: UInt32?) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.closeStake(nodeID: nodeID, delegatorID: delegatorID)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90464b90385696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f20436c6f736573206f75742061207374616b696e67206f626a65637420696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f205468697320646f6573206e6f742072656d6f766520746865207265636f72642066726f6d20746865206964656e74697479207461626c652c0a2f2f2062757420697420646f6573206d65616e207468617420746865206163636f756e74207468617420636c6f7365732069742063616e6e6f7420657665722061636365737320697420616761696e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f29207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e636c6f73655374616b65286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f724944290a202020207d0a7d0af89ab85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90468f90464b90385696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f20436c6f736573206f75742061207374616b696e67206f626a65637420696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f205468697320646f6573206e6f742072656d6f766520746865207265636f72642066726f6d20746865206964656e74697479207461626c652c0a2f2f2062757420697420646f6573206d65616e207468617420746865206163636f756e74207468617420636c6f7365732069742063616e6e6f7420657665722061636365737320697420616761696e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f29207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e636c6f73655374616b65286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f724944290a202020207d0a7d0af89ab85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "027e216d96d75414b27c2301a3b0a7816804d43014337a14731d1493531116d185a0fad319bf8aede66212257ad0d21532858381e2c9d7c4cec179b28180f5be93436c6f7365205374616b650002044e6f646520494400000244656c656761746f72204944000155496e7433320003",
    "hash": "7e216d96d75414b27c2301a3b0a7816804d43014337a14731d1493531116d185"
  },
  {
    "title": "SCO.12 - Close Stake - 2",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n// Closes out a staking object in the staking collection\n// This does not remove the record from the identity table,\n// but it does mean that the account that closes it cannot ever access it again\n\ntransaction(nodeID: String, delegatorID: UInt32?) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.closeStake(nodeID: nodeID, delegatorID: delegatorID)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n// Closes out a staking object in the staking collection\n// This does not remove the record from the identity table,\n// but it does mean that the account that closes it cannot ever access it again\n\ntransaction(nodeID: String, delegatorID: UInt32?) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.closeStake(nodeID: nodeID, delegatorID: delegatorID)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90449b90385696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f20436c6f736573206f75742061207374616b696e67206f626a65637420696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f205468697320646f6573206e6f742072656d6f766520746865207265636f72642066726f6d20746865206964656e74697479207461626c652c0a2f2f2062757420697420646f6573206d65616e207468617420746865206163636f756e74207468617420636c6f7365732069742063616e6e6f7420657665722061636365737320697420616761696e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f29207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e636c6f73655374616b65286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f724944290a202020207d0a7d0af87fb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f9044df90449b90385696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f20436c6f736573206f75742061207374616b696e67206f626a65637420696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f205468697320646f6573206e6f742072656d6f766520746865207265636f72642066726f6d20746865206964656e74697479207461626c652c0a2f2f2062757420697420646f6573206d65616e207468617420746865206163636f756e74207468617420636c6f7365732069742063616e6e6f7420657665722061636365737320697420616761696e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f29207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e636c6f73655374616b65286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f724944290a202020207d0a7d0af87fb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "027e216d96d75414b27c2301a3b0a7816804d43014337a14731d1493531116d185a0fad319bf8aede66212257ad0d21532858381e2c9d7c4cec179b28180f5be93436c6f7365205374616b650002044e6f646520494400000244656c656761746f72204944000155496e7433320003",
    "hash": "7e216d96d75414b27c2301a3b0a7816804d43014337a14731d1493531116d185"
  },
  {
    "title": "SCO.13 - Transfer Node",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n// Transfers a NodeStaker object from an authorizers accoount\n// and adds the NodeStaker to another accounts Staking Collection\n// identified by the to Address.\n\ntransaction(nodeID: String, to: Address) {\n    let fromStakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n    let toStakingCollectionCap: &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        // The account to transfer the NodeStaker object to must have a valid Staking Collection in order to receive the NodeStaker.\n        if (!FlowStakingCollection.doesAccountHaveStakingCollection(address: to)) {\n            panic(\"Destination account must have a Staking Collection set up.\")\n        }\n\n        // Get a reference to the authorizers StakingCollection\n        self.fromStakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n\n        // Get the PublicAccount of the account to transfer the NodeStaker to. \n        let toAccount = getAccount(to)\n\n        // Borrow a capability to the public methods available on the receivers StakingCollection.\n        self.toStakingCollectionCap = toAccount.capabilities\n            .borrow<&FlowStakingCollection.StakingCollection>(FlowStakingCollection.StakingCollectionPublicPath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the receiver's account\")\n\n        let machineAccountInfo = self.fromStakingCollectionRef.getMachineAccounts()[nodeID]\n            ?? panic(\"Could not get machine account info for the specified node ID\")\n\n        // Remove the NodeStaker from the authorizers StakingCollection.\n        let nodeStaker <- self.fromStakingCollectionRef.removeNode(nodeID: nodeID)\n\n        // Deposit the NodeStaker to the receivers StakingCollection.\n        self.toStakingCollectionCap.addNodeObject(<- nodeStaker!, machineAccountInfo: machineAccountInfo)\n    }\n}",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "0x8c5303eaa26202d6",
          "type": "Address"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n// Transfers a NodeStaker object from an authorizers accoount\n// and adds the NodeStaker to another accounts Staking Collection\n// identified by the to Address.\n\ntransaction(nodeID: String, to: Address) {\n    let fromStakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n    let toStakingCollectionCap: &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        // The account to transfer the NodeStaker object to must have a valid Staking Collection in order to receive the NodeStaker.\n        if (!FlowStakingCollection.doesAccountHaveStakingCollection(address: to)) {\n            panic(\"Destination account must have a Staking Collection set up.\")\n        }\n\n        // Get a reference to the authorizers StakingCollection\n        self.fromStakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n\n        // Get the PublicAccount of the account to transfer the NodeStaker to. \n        let toAccount = getAccount(to)\n\n        // Borrow a capability to the public methods available on the receivers StakingCollection.\n        self.toStakingCollectionCap = toAccount.capabilities\n            .borrow<&FlowStakingCollection.StakingCollection>(FlowStakingCollection.StakingCollectionPublicPath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the receiver's account\")\n\n        let machineAccountInfo = self.fromStakingCollectionRef.getMachineAccounts()[nodeID]\n            ?? panic(\"Could not get machine account info for the specified node ID\")\n\n        // Remove the NodeStaker from the authorizers StakingCollection.\n        let nodeStaker <- self.fromStakingCollectionRef.removeNode(nodeID: nodeID)\n\n        // Deposit the NodeStaker to the receivers StakingCollection.\n        self.toStakingCollectionCap.addNodeObject(<- nodeStaker!, machineAccountInfo: machineAccountInfo)\n    }\n}",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "0x8c5303eaa26202d6",
          "type": "Address"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9096eb9089b696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f205472616e73666572732061204e6f64655374616b6572206f626a6563742066726f6d20616e20617574686f72697a657273206163636f6f756e740a2f2f20616e64206164647320746865204e6f64655374616b657220746f20616e6f74686572206163636f756e7473205374616b696e6720436f6c6c656374696f6e0a2f2f206964656e7469666965642062792074686520746f20416464726573732e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c20746f3a204164647265737329207b0a202020206c65742066726f6d5374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a202020206c657420746f5374616b696e67436f6c6c656374696f6e4361703a2026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a20202020202020202f2f20546865206163636f756e7420746f207472616e7366657220746865204e6f64655374616b6572206f626a65637420746f206d757374206861766520612076616c6964205374616b696e6720436f6c6c656374696f6e20696e206f7264657220746f207265636569766520746865204e6f64655374616b65722e0a20202020202020206966202821466c6f775374616b696e67436f6c6c656374696f6e2e646f65734163636f756e74486176655374616b696e67436f6c6c656374696f6e28616464726573733a20746f2929207b0a20202020202020202020202070616e6963282244657374696e6174696f6e206163636f756e74206d75737420686176652061205374616b696e6720436f6c6c656374696f6e207365742075702e22290a20202020202020207d0a0a20202020202020202f2f204765742061207265666572656e636520746f2074686520617574686f72697a657273205374616b696e67436f6c6c656374696f6e0a202020202020202073656c662e66726f6d5374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a0a20202020202020202f2f2047657420746865205075626c69634163636f756e74206f6620746865206163636f756e7420746f207472616e7366657220746865204e6f64655374616b657220746f2e200a20202020202020206c657420746f4163636f756e74203d206765744163636f756e7428746f290a0a20202020202020202f2f20426f72726f772061206361706162696c69747920746f20746865207075626c6963206d6574686f647320617661696c61626c65206f6e2074686520726563656976657273205374616b696e67436f6c6c656374696f6e2e0a202020202020202073656c662e746f5374616b696e67436f6c6c656374696f6e436170203d20746f4163636f756e742e6361706162696c69746965730a2020202020202020202020202e626f72726f773c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e28466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e5075626c696350617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e207468652072656365697665722773206163636f756e7422290a0a20202020202020206c6574206d616368696e654163636f756e74496e666f203d2073656c662e66726f6d5374616b696e67436f6c6c656374696f6e5265662e6765744d616368696e654163636f756e747328295b6e6f646549445d0a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420676574206d616368696e65206163636f756e7420696e666f20666f722074686520737065636966696564206e6f646520494422290a0a20202020202020202f2f2052656d6f766520746865204e6f64655374616b65722066726f6d2074686520617574686f72697a657273205374616b696e67436f6c6c656374696f6e2e0a20202020202020206c6574206e6f64655374616b6572203c2d2073656c662e66726f6d5374616b696e67436f6c6c656374696f6e5265662e72656d6f76654e6f6465286e6f646549443a206e6f64654944290a0a20202020202020202f2f204465706f73697420746865204e6f64655374616b657220746f2074686520726563656976657273205374616b696e67436f6c6c656374696f6e2e0a202020202020202073656c662e746f5374616b696e67436f6c6c656374696f6e4361702e6164644e6f64654f626a656374283c2d206e6f64655374616b6572212c206d616368696e654163636f756e74496e666f3a206d616368696e654163636f756e74496e666f290a202020207d0a7df88eb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227daf7b2276616c7565223a22307838633533303365616132363230326436222c2274797065223a2241646472657373227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90972f9096eb9089b696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f205472616e73666572732061204e6f64655374616b6572206f626a6563742066726f6d20616e20617574686f72697a657273206163636f6f756e740a2f2f20616e64206164647320746865204e6f64655374616b657220746f20616e6f74686572206163636f756e7473205374616b696e6720436f6c6c656374696f6e0a2f2f206964656e7469666965642062792074686520746f20416464726573732e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c20746f3a204164647265737329207b0a202020206c65742066726f6d5374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a202020206c657420746f5374616b696e67436f6c6c656374696f6e4361703a2026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a20202020202020202f2f20546865206163636f756e7420746f207472616e7366657220746865204e6f64655374616b6572206f626a65637420746f206d757374206861766520612076616c6964205374616b696e6720436f6c6c656374696f6e20696e206f7264657220746f207265636569766520746865204e6f64655374616b65722e0a20202020202020206966202821466c6f775374616b696e67436f6c6c656374696f6e2e646f65734163636f756e74486176655374616b696e67436f6c6c656374696f6e28616464726573733a20746f2929207b0a20202020202020202020202070616e6963282244657374696e6174696f6e206163636f756e74206d75737420686176652061205374616b696e6720436f6c6c656374696f6e207365742075702e22290a20202020202020207d0a0a20202020202020202f2f204765742061207265666572656e636520746f2074686520617574686f72697a657273205374616b696e67436f6c6c656374696f6e0a202020202020202073656c662e66726f6d5374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a0a20202020202020202f2f2047657420746865205075626c69634163636f756e74206f6620746865206163636f756e7420746f207472616e7366657220746865204e6f64655374616b657220746f2e200a20202020202020206c657420746f4163636f756e74203d206765744163636f756e7428746f290a0a20202020202020202f2f20426f72726f772061206361706162696c69747920746f20746865207075626c6963206d6574686f647320617661696c61626c65206f6e2074686520726563656976657273205374616b696e67436f6c6c656374696f6e2e0a202020202020202073656c662e746f5374616b696e67436f6c6c656374696f6e436170203d20746f4163636f756e742e6361706162696c69746965730a2020202020202020202020202e626f72726f773c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e28466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e5075626c696350617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e207468652072656365697665722773206163636f756e7422290a0a20202020202020206c6574206d616368696e654163636f756e74496e666f203d2073656c662e66726f6d5374616b696e67436f6c6c656374696f6e5265662e6765744d616368696e654163636f756e747328295b6e6f646549445d0a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420676574206d616368696e65206163636f756e7420696e666f20666f722074686520737065636966696564206e6f646520494422290a0a20202020202020202f2f2052656d6f766520746865204e6f64655374616b65722066726f6d2074686520617574686f72697a657273205374616b696e67436f6c6c656374696f6e2e0a20202020202020206c6574206e6f64655374616b6572203c2d2073656c662e66726f6d5374616b696e67436f6c6c656374696f6e5265662e72656d6f76654e6f6465286e6f646549443a206e6f64654944290a0a20202020202020202f2f204465706f73697420746865204e6f64655374616b657220746f2074686520726563656976657273205374616b696e67436f6c6c656374696f6e2e0a202020202020202073656c662e746f5374616b696e67436f6c6c656374696f6e4361702e6164644e6f64654f626a656374283c2d206e6f64655374616b6572212c206d616368696e654163636f756e74496e666f3a206d616368696e654163636f756e74496e666f290a202020207d0a7df88eb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227daf7b2276616c7565223a22307838633533303365616132363230326436222c2274797065223a2241646472657373227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02311f4071dda8b17ac6cbc6f0a27e98bd426026825d3c68308903fead884e616e38bfd23b200ecef4d13fa3c2ea998b51e6a24f3a8ceb260d2affab7c918a97d05472616e73666572204e6f64650002044e6f6465204944000001416464726573730001416464726573730003",
    "hash": "311f4071dda8b17ac6cbc6f0a27e98bd426026825d3c68308903fead884e616e"
  },
  {
    "title": "SCO.14 - Transfer Delegator",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n// Transfers a NodeDelegator object from an authorizers accoount\n// and adds the NodeDelegator to another accounts Staking Collection\n// identified by the to Address.\n\ntransaction(nodeID: String, delegatorID: UInt32, to: Address) {\n    let fromStakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n    let toStakingCollectionCap: &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        // The account to transfer the NodeDelegator object to must have a valid Staking Collection in order to receive the NodeDelegator.\n        if (!FlowStakingCollection.doesAccountHaveStakingCollection(address: to)) {\n            panic(\"Destination account must have a Staking Collection set up.\")\n        }\n\n        // Get a reference to the authorizers StakingCollection\n        self.fromStakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n\n        // Get the PublicAccount of the account to transfer the NodeDelegator to. \n        let toAccount = getAccount(to)\n\n        // Borrow a capability to the public methods available on the receivers StakingCollection.\n        self.toStakingCollectionCap = toAccount.capabilities\n            .borrow<&FlowStakingCollection.StakingCollection>(FlowStakingCollection.StakingCollectionPublicPath)\n            ?? panic(\"Could not borrow a referamce to a StakingCollection in the receiver's account\")\n    }\n\n    execute {\n        // Remove the NodeDelegator from the authorizers StakingCollection.\n        let nodeDelegator <- self.fromStakingCollectionRef.removeDelegator(nodeID: nodeID, delegatorID: delegatorID)\n\n        // Deposit the NodeDelegator to the receivers StakingCollection.\n        self.toStakingCollectionCap.addDelegatorObject(<- nodeDelegator!)\n    }\n}",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "42",
          "type": "UInt32"
        },
        {
          "value": "0x8c5303eaa26202d6",
          "type": "Address"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n// Transfers a NodeDelegator object from an authorizers accoount\n// and adds the NodeDelegator to another accounts Staking Collection\n// identified by the to Address.\n\ntransaction(nodeID: String, delegatorID: UInt32, to: Address) {\n    let fromStakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n    let toStakingCollectionCap: &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        // The account to transfer the NodeDelegator object to must have a valid Staking Collection in order to receive the NodeDelegator.\n        if (!FlowStakingCollection.doesAccountHaveStakingCollection(address: to)) {\n            panic(\"Destination account must have a Staking Collection set up.\")\n        }\n\n        // Get a reference to the authorizers StakingCollection\n        self.fromStakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n\n        // Get the PublicAccount of the account to transfer the NodeDelegator to. \n        let toAccount = getAccount(to)\n\n        // Borrow a capability to the public methods available on the receivers StakingCollection.\n        self.toStakingCollectionCap = toAccount.capabilities\n            .borrow<&FlowStakingCollection.StakingCollection>(FlowStakingCollection.StakingCollectionPublicPath)\n            ?? panic(\"Could not borrow a referamce to a StakingCollection in the receiver's account\")\n    }\n\n    execute {\n        // Remove the NodeDelegator from the authorizers StakingCollection.\n        let nodeDelegator <- self.fromStakingCollectionRef.removeDelegator(nodeID: nodeID, delegatorID: delegatorID)\n\n        // Deposit the NodeDelegator to the receivers StakingCollection.\n        self.toStakingCollectionCap.addDelegatorObject(<- nodeDelegator!)\n    }\n}",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "42",
          "type": "UInt32"
        },
        {
          "value": "0x8c5303eaa26202d6",
          "type": "Address"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9091bb90829696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f205472616e73666572732061204e6f646544656c656761746f72206f626a6563742066726f6d20616e20617574686f72697a657273206163636f6f756e740a2f2f20616e64206164647320746865204e6f646544656c656761746f7220746f20616e6f74686572206163636f756e7473205374616b696e6720436f6c6c656374696f6e0a2f2f206964656e7469666965642062792074686520746f20416464726573732e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433322c20746f3a204164647265737329207b0a202020206c65742066726f6d5374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a202020206c657420746f5374616b696e67436f6c6c656374696f6e4361703a2026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a20202020202020202f2f20546865206163636f756e7420746f207472616e7366657220746865204e6f646544656c656761746f72206f626a65637420746f206d757374206861766520612076616c6964205374616b696e6720436f6c6c656374696f6e20696e206f7264657220746f207265636569766520746865204e6f646544656c656761746f722e0a20202020202020206966202821466c6f775374616b696e67436f6c6c656374696f6e2e646f65734163636f756e74486176655374616b696e67436f6c6c656374696f6e28616464726573733a20746f2929207b0a20202020202020202020202070616e6963282244657374696e6174696f6e206163636f756e74206d75737420686176652061205374616b696e6720436f6c6c656374696f6e207365742075702e22290a20202020202020207d0a0a20202020202020202f2f204765742061207265666572656e636520746f2074686520617574686f72697a657273205374616b696e67436f6c6c656374696f6e0a202020202020202073656c662e66726f6d5374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a0a20202020202020202f2f2047657420746865205075626c69634163636f756e74206f6620746865206163636f756e7420746f207472616e7366657220746865204e6f646544656c656761746f7220746f2e200a20202020202020206c657420746f4163636f756e74203d206765744163636f756e7428746f290a0a20202020202020202f2f20426f72726f772061206361706162696c69747920746f20746865207075626c6963206d6574686f647320617661696c61626c65206f6e2074686520726563656976657273205374616b696e67436f6c6c656374696f6e2e0a202020202020202073656c662e746f5374616b696e67436f6c6c656374696f6e436170203d20746f4163636f756e742e6361706162696c69746965730a2020202020202020202020202e626f72726f773c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e28466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e5075626c696350617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572616d636520746f2061205374616b696e67436f6c6c656374696f6e20696e207468652072656365697665722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a20202020202020202f2f2052656d6f766520746865204e6f646544656c656761746f722066726f6d2074686520617574686f72697a657273205374616b696e67436f6c6c656374696f6e2e0a20202020202020206c6574206e6f646544656c656761746f72203c2d2073656c662e66726f6d5374616b696e67436f6c6c656374696f6e5265662e72656d6f766544656c656761746f72286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f724944290a0a20202020202020202f2f204465706f73697420746865204e6f646544656c656761746f7220746f2074686520726563656976657273205374616b696e67436f6c6c656374696f6e2e0a202020202020202073656c662e746f5374616b696e67436f6c6c656374696f6e4361702e61646444656c656761746f724f626a656374283c2d206e6f646544656c656761746f7221290a202020207d0a7df8adb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227d9e7b2276616c7565223a223432222c2274797065223a2255496e743332227daf7b2276616c7565223a22307838633533303365616132363230326436222c2274797065223a2241646472657373227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f9091ff9091bb90829696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f205472616e73666572732061204e6f646544656c656761746f72206f626a6563742066726f6d20616e20617574686f72697a657273206163636f6f756e740a2f2f20616e64206164647320746865204e6f646544656c656761746f7220746f20616e6f74686572206163636f756e7473205374616b696e6720436f6c6c656374696f6e0a2f2f206964656e7469666965642062792074686520746f20416464726573732e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433322c20746f3a204164647265737329207b0a202020206c65742066726f6d5374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a202020206c657420746f5374616b696e67436f6c6c656374696f6e4361703a2026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a20202020202020202f2f20546865206163636f756e7420746f207472616e7366657220746865204e6f646544656c656761746f72206f626a65637420746f206d757374206861766520612076616c6964205374616b696e6720436f6c6c656374696f6e20696e206f7264657220746f207265636569766520746865204e6f646544656c656761746f722e0a20202020202020206966202821466c6f775374616b696e67436f6c6c656374696f6e2e646f65734163636f756e74486176655374616b696e67436f6c6c656374696f6e28616464726573733a20746f2929207b0a20202020202020202020202070616e6963282244657374696e6174696f6e206163636f756e74206d75737420686176652061205374616b696e6720436f6c6c656374696f6e207365742075702e22290a20202020202020207d0a0a20202020202020202f2f204765742061207265666572656e636520746f2074686520617574686f72697a657273205374616b696e67436f6c6c656374696f6e0a202020202020202073656c662e66726f6d5374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a0a20202020202020202f2f2047657420746865205075626c69634163636f756e74206f6620746865206163636f756e7420746f207472616e7366657220746865204e6f646544656c656761746f7220746f2e200a20202020202020206c657420746f4163636f756e74203d206765744163636f756e7428746f290a0a20202020202020202f2f20426f72726f772061206361706162696c69747920746f20746865207075626c6963206d6574686f647320617661696c61626c65206f6e2074686520726563656976657273205374616b696e67436f6c6c656374696f6e2e0a202020202020202073656c662e746f5374616b696e67436f6c6c656374696f6e436170203d20746f4163636f756e742e6361706162696c69746965730a2020202020202020202020202e626f72726f773c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e28466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e5075626c696350617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572616d636520746f2061205374616b696e67436f6c6c656374696f6e20696e207468652072656365697665722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a20202020202020202f2f2052656d6f766520746865204e6f646544656c656761746f722066726f6d2074686520617574686f72697a657273205374616b696e67436f6c6c656374696f6e2e0a20202020202020206c6574206e6f646544656c656761746f72203c2d2073656c662e66726f6d5374616b696e67436f6c6c656374696f6e5265662e72656d6f766544656c656761746f72286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f724944290a0a20202020202020202f2f204465706f73697420746865204e6f646544656c656761746f7220746f2074686520726563656976657273205374616b696e67436f6c6c656374696f6e2e0a202020202020202073656c662e746f5374616b696e67436f6c6c656374696f6e4361702e61646444656c656761746f724f626a656374283c2d206e6f646544656c656761746f7221290a202020207d0a7df8adb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227d9e7b2276616c7565223a223432222c2274797065223a2255496e743332227daf7b2276616c7565223a22307838633533303365616132363230326436222c2274797065223a2241646472657373227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02f9fa239cb78b3e07b8f8d56e173e2673b4b53aeb07d507a769c8d96eaf400b8d11e2107d2ccd96cb6b3fa3a704491dcd9e1736215137304e0494243c21befc765472616e736665722044656c656761746f720003044e6f646520494400000144656c656761746f72204944000155496e743332000301416464726573730002416464726573730003",
    "hash": "f9fa239cb78b3e07b8f8d56e173e2673b4b53aeb07d507a769c8d96eaf400b8d"
  },
  {
    "title": "SCO.15 - Withdraw From Machine Account",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Request to withdraw tokens from the machine account\n/// The tokens are automatically deposited to the unlocked account vault\n\ntransaction(nodeID: String, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawFromMachineAccount(nodeID: nodeID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Request to withdraw tokens from the machine account\n/// The tokens are automatically deposited to the unlocked account vault\n\ntransaction(nodeID: String, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawFromMachineAccount(nodeID: nodeID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90415b90341696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f205265717565737420746f20776974686472617720746f6b656e732066726f6d20746865206d616368696e65206163636f756e740a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e776974686472617746726f6d4d616368696e654163636f756e74286e6f646549443a206e6f646549442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af88fb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90419f90415b90341696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f205265717565737420746f20776974686472617720746f6b656e732066726f6d20746865206d616368696e65206163636f756e740a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e776974686472617746726f6d4d616368696e654163636f756e74286e6f646549443a206e6f646549442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af88fb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02fdd40862af04dc36dd0e9e727966c6f81dd6be8246b9c70afd18297aac9e86a8e12b16ef4218b8ce52189ae5814b381272bf473436978fae94d01c10c036903457697468647261772046726f6d204d616368696e65204163636f756e740002044e6f6465204944000001416d6f756e7400015546697836340003",
    "hash": "fdd40862af04dc36dd0e9e727966c6f81dd6be8246b9c70afd18297aac9e86a8"
  },
  {
    "title": "SCO.16 - Update Networking Address",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Changes the networking address for the specified node\n\ntransaction(nodeID: String, newAddress: String) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.updateNetworkingAddress(nodeID: nodeID, newAddress: newAddress)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "flow-node.test:3569",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Changes the networking address for the specified node\n\ntransaction(nodeID: String, newAddress: String) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.updateNetworkingAddress(nodeID: nodeID, newAddress: newAddress)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "flow-node.test:3569",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f903d6b90303696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f204368616e67657320746865206e6574776f726b696e67206164647265737320666f722074686520737065636966696564206e6f64650a0a7472616e73616374696f6e286e6f646549443a20537472696e672c206e6577416464726573733a20537472696e6729207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7570646174654e6574776f726b696e6741646472657373286e6f646549443a206e6f646549442c206e6577416464726573733a206e657741646472657373290a202020207d0a7d0af88eb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227daf7b2276616c7565223a22666c6f772d6e6f64652e746573743a33353639222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f903daf903d6b90303696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f204368616e67657320746865206e6574776f726b696e67206164647265737320666f722074686520737065636966696564206e6f64650a0a7472616e73616374696f6e286e6f646549443a20537472696e672c206e6577416464726573733a20537472696e6729207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7570646174654e6574776f726b696e6741646472657373286e6f646549443a206e6f646549442c206e6577416464726573733a206e657741646472657373290a202020207d0a7d0af88eb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227daf7b2276616c7565223a22666c6f772d6e6f64652e746573743a33353639222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "023a68789d8cd56e6c7b064057045a56340746aac710db57700de2c33eb6610e5f68d24560d9e49318dca82ab0975f526a8663d934225f0cb715cd1ff188def16d557064617465204e6574776f726b696e6720416464726573730002044e6f6465204944000004416464726573730001",
    "hash": "3a68789d8cd56e6c7b064057045a56340746aac710db57700de2c33eb6610e5f"
  },
  {
    "title": "FA.01 - Create Account",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import Crypto\n\ntransaction(key: String, signatureAlgorithm: UInt8, hashAlgorithm: UInt8, weight: UFix64) {\n\tprepare(signer: auth(BorrowValue, Storage) &Account) {\n\t\tpre {\n\t\t\tsignatureAlgorithm >= 1 && signatureAlgorithm <= 3: \"Must provide a signature algoritm raw value that is 1, 2, or 3\"\n\t\t\thashAlgorithm >= 1 && hashAlgorithm <= 6: \"Must provide a hash algoritm raw value that is between 1 and 6\"\n\t\t\tweight <= 1000.0: \"The key weight must be between 0 and 1000\"\n\t\t}\n\n\t\tlet publicKey = PublicKey(\n\t\t\tpublicKey: key.decodeHex(),\n\t\t\tsignatureAlgorithm: SignatureAlgorithm(rawValue: signatureAlgorithm)!\n\t\t)\n\n\t\tlet account = Account(payer: signer)\n\n\t\taccount.keys.add(publicKey: publicKey, hashAlgorithm: HashAlgorithm(rawValue: hashAlgorithm)!, weight: weight)\n\t}\n}",
      "arguments": [
        {
          "type": "String",
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1000.00000000",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import Crypto\n\ntransaction(key: String, signatureAlgorithm: UInt8, hashAlgorithm: UInt8, weight: UFix64) {\n\tprepare(signer: auth(BorrowValue, Storage) &Account) {\n\t\tpre {\n\t\t\tsignatureAlgorithm >= 1 && signatureAlgorithm <= 3: \"Must provide a signature algoritm raw value that is 1, 2, or 3\"\n\t\t\thashAlgorithm >= 1 && hashAlgorithm <= 6: \"Must provide a hash algoritm raw value that is between 1 and 6\"\n\t\t\tweight <= 1000.0: \"The key weight must be between 0 and 1000\"\n\t\t}\n\n\t\tlet publicKey = PublicKey(\n\t\t\tpublicKey: key.decodeHex(),\n\t\t\tsignatureAlgorithm: SignatureAlgorithm(rawValue: signatureAlgorithm)!\n\t\t)\n\n\t\tlet account = Account(payer: signer)\n\n\t\taccount.keys.add(publicKey: publicKey, hashAlgorithm: HashAlgorithm(rawValue: hashAlgorithm)!, weight: weight)\n\t}\n}",
      "arguments": [
        {
          "type": "String",
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1000.00000000",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90454b902fe696d706f72742043727970746f0a0a7472616e73616374696f6e286b65793a20537472696e672c207369676e6174757265416c676f726974686d3a2055496e74382c2068617368416c676f726974686d3a2055496e74382c207765696768743a2055466978363429207b0a0970726570617265287369676e65723a206175746828426f72726f7756616c75652c2053746f726167652920264163636f756e7429207b0a0909707265207b0a0909097369676e6174757265416c676f726974686d203e3d2031202626207369676e6174757265416c676f726974686d203c3d20333a20224d7573742070726f766964652061207369676e617475726520616c676f7269746d207261772076616c7565207468617420697320312c20322c206f722033220a09090968617368416c676f726974686d203e3d20312026262068617368416c676f726974686d203c3d20363a20224d7573742070726f766964652061206861736820616c676f7269746d207261772076616c75652074686174206973206265747765656e203120616e642036220a090909776569676874203c3d20313030302e303a2022546865206b657920776569676874206d757374206265206265747765656e203020616e642031303030220a09097d0a0a09096c6574207075626c69634b6579203d205075626c69634b6579280a0909097075626c69634b65793a206b65792e6465636f646548657828292c0a0909097369676e6174757265416c676f726974686d3a205369676e6174757265416c676f726974686d2872617756616c75653a207369676e6174757265416c676f726974686d29210a0909290a0a09096c6574206163636f756e74203d204163636f756e742870617965723a207369676e6572290a0a09096163636f756e742e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2048617368416c676f726974686d2872617756616c75653a2068617368416c676f726974686d29212c207765696768743a20776569676874290a097d0a7df90110b8aa7b2274797065223a22537472696e67222c2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da97b2276616c7565223a22313030302e3030303030303030222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90458f90454b902fe696d706f72742043727970746f0a0a7472616e73616374696f6e286b65793a20537472696e672c207369676e6174757265416c676f726974686d3a2055496e74382c2068617368416c676f726974686d3a2055496e74382c207765696768743a2055466978363429207b0a0970726570617265287369676e65723a206175746828426f72726f7756616c75652c2053746f726167652920264163636f756e7429207b0a0909707265207b0a0909097369676e6174757265416c676f726974686d203e3d2031202626207369676e6174757265416c676f726974686d203c3d20333a20224d7573742070726f766964652061207369676e617475726520616c676f7269746d207261772076616c7565207468617420697320312c20322c206f722033220a09090968617368416c676f726974686d203e3d20312026262068617368416c676f726974686d203c3d20363a20224d7573742070726f766964652061206861736820616c676f7269746d207261772076616c75652074686174206973206265747765656e203120616e642036220a090909776569676874203c3d20313030302e303a2022546865206b657920776569676874206d757374206265206265747765656e203020616e642031303030220a09097d0a0a09096c6574207075626c69634b6579203d205075626c69634b6579280a0909097075626c69634b65793a206b65792e6465636f646548657828292c0a0909097369676e6174757265416c676f726974686d3a205369676e6174757265416c676f726974686d2872617756616c75653a207369676e6174757265416c676f726974686d29210a0909290a0a09096c6574206163636f756e74203d204163636f756e742870617965723a207369676e6572290a0a09096163636f756e742e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2048617368416c676f726974686d2872617756616c75653a2068617368416c676f726974686d29212c207765696768743a20776569676874290a097d0a7df90110b8aa7b2274797065223a22537472696e67222c2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da97b2276616c7565223a22313030302e3030303030303030222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "0263d8b6a045bf8e6196198184db685c2cf22932503ccb2dcb85c7d2dc04c882ba63d8b6a045bf8e6196198184db685c2cf22932503ccb2dcb85c7d2dc04c882ba437265617465204163636f756e740004045075626c6963204b65790000065369676e617475726520416c672e0001054861736820416c672e0002014b65792057656967687400035546697836340003",
    "hash": "63d8b6a045bf8e6196198184db685c2cf22932503ccb2dcb85c7d2dc04c882ba"
  },
  {
    "title": "FA.02 - Add Key",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import Crypto\n\ntransaction(key: String, signatureAlgorithm: UInt8, hashAlgorithm: UInt8, weight: UFix64) {\n\n\tprepare(signer: auth(AddKey) &Account) {\n\t\tpre {\n\t\t\tsignatureAlgorithm >= 1 && signatureAlgorithm <= 3: \"Must provide a signature algoritm raw value that is 1, 2, or 3\"\n\t\t\thashAlgorithm >= 1 && hashAlgorithm <= 6: \"Must provide a hash algoritm raw value that is between 1 and 6\"\n\t\t\tweight <= 1000.0: \"The key weight must be between 0 and 1000\"\n\t\t}\n\t\tlet publicKey = PublicKey(\n\t\t\tpublicKey: key.decodeHex(),\n\t\t\tsignatureAlgorithm: SignatureAlgorithm(rawValue: signatureAlgorithm)!\n\t\t)\n\n\t\tsigner.keys.add(publicKey: publicKey, hashAlgorithm: HashAlgorithm(rawValue: hashAlgorithm)!, weight: weight)\n\t}\n}",
      "arguments": [
        {
          "type": "String",
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1000.00000000",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import Crypto\n\ntransaction(key: String, signatureAlgorithm: UInt8, hashAlgorithm: UInt8, weight: UFix64) {\n\n\tprepare(signer: auth(AddKey) &Account) {\n\t\tpre {\n\t\t\tsignatureAlgorithm >= 1 && signatureAlgorithm <= 3: \"Must provide a signature algoritm raw value that is 1, 2, or 3\"\n\t\t\thashAlgorithm >= 1 && hashAlgorithm <= 6: \"Must provide a hash algoritm raw value that is between 1 and 6\"\n\t\t\tweight <= 1000.0: \"The key weight must be between 0 and 1000\"\n\t\t}\n\t\tlet publicKey = PublicKey(\n\t\t\tpublicKey: key.decodeHex(),\n\t\t\tsignatureAlgorithm: SignatureAlgorithm(rawValue: signatureAlgorithm)!\n\t\t)\n\n\t\tsigner.keys.add(publicKey: publicKey, hashAlgorithm: HashAlgorithm(rawValue: hashAlgorithm)!, weight: weight)\n\t}\n}",
      "arguments": [
        {
          "type": "String",
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1000.00000000",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9041db902c7696d706f72742043727970746f0a0a7472616e73616374696f6e286b65793a20537472696e672c207369676e6174757265416c676f726974686d3a2055496e74382c2068617368416c676f726974686d3a2055496e74382c207765696768743a2055466978363429207b0a0a0970726570617265287369676e65723a2061757468284164644b65792920264163636f756e7429207b0a0909707265207b0a0909097369676e6174757265416c676f726974686d203e3d2031202626207369676e6174757265416c676f726974686d203c3d20333a20224d7573742070726f766964652061207369676e617475726520616c676f7269746d207261772076616c7565207468617420697320312c20322c206f722033220a09090968617368416c676f726974686d203e3d20312026262068617368416c676f726974686d203c3d20363a20224d7573742070726f766964652061206861736820616c676f7269746d207261772076616c75652074686174206973206265747765656e203120616e642036220a090909776569676874203c3d20313030302e303a2022546865206b657920776569676874206d757374206265206265747765656e203020616e642031303030220a09097d0a09096c6574207075626c69634b6579203d205075626c69634b6579280a0909097075626c69634b65793a206b65792e6465636f646548657828292c0a0909097369676e6174757265416c676f726974686d3a205369676e6174757265416c676f726974686d2872617756616c75653a207369676e6174757265416c676f726974686d29210a0909290a0a09097369676e65722e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2048617368416c676f726974686d2872617756616c75653a2068617368416c676f726974686d29212c207765696768743a20776569676874290a097d0a7df90110b8aa7b2274797065223a22537472696e67222c2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da97b2276616c7565223a22313030302e3030303030303030222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90421f9041db902c7696d706f72742043727970746f0a0a7472616e73616374696f6e286b65793a20537472696e672c207369676e6174757265416c676f726974686d3a2055496e74382c2068617368416c676f726974686d3a2055496e74382c207765696768743a2055466978363429207b0a0a0970726570617265287369676e65723a2061757468284164644b65792920264163636f756e7429207b0a0909707265207b0a0909097369676e6174757265416c676f726974686d203e3d2031202626207369676e6174757265416c676f726974686d203c3d20333a20224d7573742070726f766964652061207369676e617475726520616c676f7269746d207261772076616c7565207468617420697320312c20322c206f722033220a09090968617368416c676f726974686d203e3d20312026262068617368416c676f726974686d203c3d20363a20224d7573742070726f766964652061206861736820616c676f7269746d207261772076616c75652074686174206973206265747765656e203120616e642036220a090909776569676874203c3d20313030302e303a2022546865206b657920776569676874206d757374206265206265747765656e203020616e642031303030220a09097d0a09096c6574207075626c69634b6579203d205075626c69634b6579280a0909097075626c69634b65793a206b65792e6465636f646548657828292c0a0909097369676e6174757265416c676f726974686d3a205369676e6174757265416c676f726974686d2872617756616c75653a207369676e6174757265416c676f726974686d29210a0909290a0a09097369676e65722e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2048617368416c676f726974686d2872617756616c75653a2068617368416c676f726974686d29212c207765696768743a20776569676874290a097d0a7df90110b8aa7b2274797065223a22537472696e67222c2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da97b2276616c7565223a22313030302e3030303030303030222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "0221d4e87df171ccbe015efe69dc2ffd24814c5fc0f2e364daf5c80515ce4a8bd921d4e87df171ccbe015efe69dc2ffd24814c5fc0f2e364daf5c80515ce4a8bd9416464204b65790004045075626c6963204b65790000065369676e617475726520416c672e0001054861736820416c672e0002014b65792057656967687400035546697836340003",
    "hash": "21d4e87df171ccbe015efe69dc2ffd24814c5fc0f2e364daf5c80515ce4a8bd9"
  },
  {
    "title": "FA.03 - Remove Key",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "transaction(keyIndex: Int) {\n\tprepare(signer: auth(RevokeKey) &Account) {\n\t\tif let key = signer.keys.get(keyIndex: keyIndex) {\n\t\t\tsigner.keys.revoke(keyIndex: keyIndex)\n\t\t} else {\n\t\t\tpanic(\"No key with the given index exists on the authorizer's account\")\n\t\t}\n\t}\n}",
      "arguments": [
        {
          "type": "Int",
          "value": "1"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "transaction(keyIndex: Int) {\n\tprepare(signer: auth(RevokeKey) &Account) {\n\t\tif let key = signer.keys.get(keyIndex: keyIndex) {\n\t\t\tsigner.keys.revoke(keyIndex: keyIndex)\n\t\t} else {\n\t\t\tpanic(\"No key with the given index exists on the authorizer's account\")\n\t\t}\n\t}\n}",
      "arguments": [
        {
          "type": "Int",
          "value": "1"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90166b901077472616e73616374696f6e286b6579496e6465783a20496e7429207b0a0970726570617265287369676e65723a2061757468285265766f6b654b65792920264163636f756e7429207b0a09096966206c6574206b6579203d207369676e65722e6b6579732e676574286b6579496e6465783a206b6579496e64657829207b0a0909097369676e65722e6b6579732e7265766f6b65286b6579496e6465783a206b6579496e646578290a09097d20656c7365207b0a09090970616e696328224e6f206b657920776974682074686520676976656e20696e64657820657869737473206f6e2074686520617574686f72697a65722773206163636f756e7422290a09097d0a097d0a7ddb9a7b2274797065223a22496e74222c2276616c7565223a2231227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f9016af90166b901077472616e73616374696f6e286b6579496e6465783a20496e7429207b0a0970726570617265287369676e65723a2061757468285265766f6b654b65792920264163636f756e7429207b0a09096966206c6574206b6579203d207369676e65722e6b6579732e676574286b6579496e6465783a206b6579496e64657829207b0a0909097369676e65722e6b6579732e7265766f6b65286b6579496e6465783a206b6579496e646578290a09097d20656c7365207b0a09090970616e696328224e6f206b657920776974682074686520676976656e20696e64657820657869737473206f6e2074686520617574686f72697a65722773206163636f756e7422290a09097d0a097d0a7ddb9a7b2274797065223a22496e74222c2276616c7565223a2231227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "026c7ab72837fdce77a910f6fc0c622c6c4d5b17f6fbf7295f345d50d3508dd5156c7ab72837fdce77a910f6fc0c622c6c4d5b17f6fbf7295f345d50d3508dd51552656d6f7665204b65790001014b657920496e6465780000496e740003",
    "hash": "6c7ab72837fdce77a910f6fc0c622c6c4d5b17f6fbf7295f345d50d3508dd515"
  },
  {
    "title": "FT.01 - Setup Fungible Token Vault",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FungibleToken from 0xf233dcee88fe0abe\nimport FungibleTokenMetadataViews from 0xf233dcee88fe0abe\n\n/// This transaction is what an account would run\n/// to set itself up to manage fungible tokens. This function\n/// uses views to know where to set up the vault\n/// in storage and to create the empty vault.\n\ntransaction(contractAddress: Address, contractName: String) {\n\n    prepare(signer: auth(SaveValue, Capabilities) &Account) {\n        // Borrow a reference to the vault stored on the passed account at the passed publicPath\n        let resolverRef = getAccount(contractAddress)\n            .contracts.borrow<&{FungibleToken}>(name: contractName)\n            ?? panic(\"Could not borrow a reference to the fungible token contract\")\n\n        // Use that reference to retrieve the FTView \n        let ftVaultData = resolverRef.resolveContractView(resourceType: nil, viewType: Type<FungibleTokenMetadataViews.FTVaultData>()) as! FungibleTokenMetadataViews.FTVaultData?\n            ?? panic(\"Could not resolve the FTVaultData view for the given Fungible token contract\")\n\n        // Create a new empty vault using the createEmptyVault function inside the FTVaultData\n        let emptyVault <-ftVaultData.createEmptyVault()\n\n        // Save it to the account\n        signer.storage.save(<-emptyVault, to: ftVaultData.storagePath)\n        \n        // Create a public capability for the vault which includes the .Resolver interface\n        let vaultCap = signer.capabilities.storage.issue<&{FungibleToken.Vault}>(ftVaultData.storagePath)\n        signer.capabilities.publish(vaultCap, at: ftVaultData.metadataPath)\n\n        // Create a public capability for the vault exposing the receiver interface\n        let receiverCap = signer.capabilities.storage.issue<&{FungibleToken.Receiver}>(ftVaultData.storagePath)\n        signer.capabilities.publish(receiverCap, at: ftVaultData.receiverPath)\n\n    }\n}\n ",
      "arguments": [
        {
          "type": "Address",
          "value": "0xe467b9dd11fa00df"
        },
        {
          "value": "FiatToken",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FungibleToken from 0xf233dcee88fe0abe\nimport FungibleTokenMetadataViews from 0xf233dcee88fe0abe\n\n/// This transaction is what an account would run\n/// to set itself up to manage fungible tokens. This function\n/// uses views to know where to set up the vault\n/// in storage and to create the empty vault.\n\ntransaction(contractAddress: Address, contractName: String) {\n\n    prepare(signer: auth(SaveValue, Capabilities) &Account) {\n        // Borrow a reference to the vault stored on the passed account at the passed publicPath\n        let resolverRef = getAccount(contractAddress)\n            .contracts.borrow<&{FungibleToken}>(name: contractName)\n            ?? panic(\"Could not borrow a reference to the fungible token contract\")\n\n        // Use that reference to retrieve the FTView \n        let ftVaultData = resolverRef.resolveContractView(resourceType: nil, viewType: Type<FungibleTokenMetadataViews.FTVaultData>()) as! FungibleTokenMetadataViews.FTVaultData?\n            ?? panic(\"Could not resolve the FTVaultData view for the given Fungible token contract\")\n\n        // Create a new empty vault using the createEmptyVault function inside the FTVaultData\n        let emptyVault <-ftVaultData.createEmptyVault()\n\n        // Save it to the account\n        signer.storage.save(<-emptyVault, to: ftVaultData.storagePath)\n        \n        // Create a public capability for the vault which includes the .Resolver interface\n        let vaultCap = signer.capabilities.storage.issue<&{FungibleToken.Vault}>(ftVaultData.storagePath)\n        signer.capabilities.publish(vaultCap, at: ftVaultData.metadataPath)\n\n        // Create a public capability for the vault exposing the receiver interface\n        let receiverCap = signer.capabilities.storage.issue<&{FungibleToken.Receiver}>(ftVaultData.storagePath)\n        signer.capabilities.publish(receiverCap, at: ftVaultData.receiverPath)\n\n    }\n}\n ",
      "arguments": [
        {
          "type": "Address",
          "value": "0xe467b9dd11fa00df"
        },
        {
          "value": "FiatToken",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90808b9076d696d706f72742046756e6769626c65546f6b656e2066726f6d203078663233336463656538386665306162650a696d706f72742046756e6769626c65546f6b656e4d6574616461746156696577732066726f6d203078663233336463656538386665306162650a0a2f2f2f2054686973207472616e73616374696f6e206973207768617420616e206163636f756e7420776f756c642072756e0a2f2f2f20746f2073657420697473656c6620757020746f206d616e6167652066756e6769626c6520746f6b656e732e20546869732066756e6374696f6e0a2f2f2f207573657320766965777320746f206b6e6f7720776865726520746f2073657420757020746865207661756c740a2f2f2f20696e2073746f7261676520616e6420746f206372656174652074686520656d707479207661756c742e0a0a7472616e73616374696f6e28636f6e7472616374416464726573733a20416464726573732c20636f6e74726163744e616d653a20537472696e6729207b0a0a2020202070726570617265287369676e65723a2061757468285361766556616c75652c204361706162696c69746965732920264163636f756e7429207b0a20202020202020202f2f20426f72726f772061207265666572656e636520746f20746865207661756c742073746f726564206f6e2074686520706173736564206163636f756e742061742074686520706173736564207075626c6963506174680a20202020202020206c6574207265736f6c766572526566203d206765744163636f756e7428636f6e747261637441646472657373290a2020202020202020202020202e636f6e7472616374732e626f72726f773c267b46756e6769626c65546f6b656e7d3e286e616d653a20636f6e74726163744e616d65290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f207468652066756e6769626c6520746f6b656e20636f6e747261637422290a0a20202020202020202f2f205573652074686174207265666572656e636520746f2072657472696576652074686520465456696577200a20202020202020206c65742066745661756c7444617461203d207265736f6c7665725265662e7265736f6c7665436f6e747261637456696577287265736f75726365547970653a206e696c2c2076696577547970653a20547970653c46756e6769626c65546f6b656e4d6574616461746156696577732e46545661756c74446174613e282929206173212046756e6769626c65546f6b656e4d6574616461746156696577732e46545661756c74446174613f0a2020202020202020202020203f3f2070616e69632822436f756c64206e6f74207265736f6c7665207468652046545661756c7444617461207669657720666f722074686520676976656e2046756e6769626c6520746f6b656e20636f6e747261637422290a0a20202020202020202f2f204372656174652061206e657720656d707479207661756c74207573696e672074686520637265617465456d7074795661756c742066756e6374696f6e20696e73696465207468652046545661756c74446174610a20202020202020206c657420656d7074795661756c74203c2d66745661756c74446174612e637265617465456d7074795661756c7428290a0a20202020202020202f2f205361766520697420746f20746865206163636f756e740a20202020202020207369676e65722e73746f726167652e73617665283c2d656d7074795661756c742c20746f3a2066745661756c74446174612e73746f7261676550617468290a20202020202020200a20202020202020202f2f204372656174652061207075626c6963206361706162696c69747920666f7220746865207661756c7420776869636820696e636c7564657320746865202e5265736f6c76657220696e746572666163650a20202020202020206c6574207661756c74436170203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c267b46756e6769626c65546f6b656e2e5661756c747d3e2866745661756c74446174612e73746f7261676550617468290a20202020202020207369676e65722e6361706162696c69746965732e7075626c697368287661756c744361702c2061743a2066745661756c74446174612e6d6574616461746150617468290a0a20202020202020202f2f204372656174652061207075626c6963206361706162696c69747920666f7220746865207661756c74206578706f73696e672074686520726563656976657220696e746572666163650a20202020202020206c6574207265636569766572436170203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c267b46756e6769626c65546f6b656e2e52656365697665727d3e2866745661756c74446174612e73746f7261676550617468290a20202020202020207369676e65722e6361706162696c69746965732e7075626c6973682872656365697665724361702c2061743a2066745661756c74446174612e726563656976657250617468290a0a202020207d0a7d0a20f856af7b2274797065223a2241646472657373222c2276616c7565223a22307865343637623964643131666130306466227da57b2276616c7565223a2246696174546f6b656e222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f9080cf90808b9076d696d706f72742046756e6769626c65546f6b656e2066726f6d203078663233336463656538386665306162650a696d706f72742046756e6769626c65546f6b656e4d6574616461746156696577732066726f6d203078663233336463656538386665306162650a0a2f2f2f2054686973207472616e73616374696f6e206973207768617420616e206163636f756e7420776f756c642072756e0a2f2f2f20746f2073657420697473656c6620757020746f206d616e6167652066756e6769626c6520746f6b656e732e20546869732066756e6374696f6e0a2f2f2f207573657320766965777320746f206b6e6f7720776865726520746f2073657420757020746865207661756c740a2f2f2f20696e2073746f7261676520616e6420746f206372656174652074686520656d707479207661756c742e0a0a7472616e73616374696f6e28636f6e7472616374416464726573733a20416464726573732c20636f6e74726163744e616d653a20537472696e6729207b0a0a2020202070726570617265287369676e65723a2061757468285361766556616c75652c204361706162696c69746965732920264163636f756e7429207b0a20202020202020202f2f20426f72726f772061207265666572656e636520746f20746865207661756c742073746f726564206f6e2074686520706173736564206163636f756e742061742074686520706173736564207075626c6963506174680a20202020202020206c6574207265736f6c766572526566203d206765744163636f756e7428636f6e747261637441646472657373290a2020202020202020202020202e636f6e7472616374732e626f72726f773c267b46756e6769626c65546f6b656e7d3e286e616d653a20636f6e74726163744e616d65290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f207468652066756e6769626c6520746f6b656e20636f6e747261637422290a0a20202020202020202f2f205573652074686174207265666572656e636520746f2072657472696576652074686520465456696577200a20202020202020206c65742066745661756c7444617461203d207265736f6c7665725265662e7265736f6c7665436f6e747261637456696577287265736f75726365547970653a206e696c2c2076696577547970653a20547970653c46756e6769626c65546f6b656e4d6574616461746156696577732e46545661756c74446174613e282929206173212046756e6769626c65546f6b656e4d6574616461746156696577732e46545661756c74446174613f0a2020202020202020202020203f3f2070616e69632822436f756c64206e6f74207265736f6c7665207468652046545661756c7444617461207669657720666f722074686520676976656e2046756e6769626c6520746f6b656e20636f6e747261637422290a0a20202020202020202f2f204372656174652061206e657720656d707479207661756c74207573696e672074686520637265617465456d7074795661756c742066756e6374696f6e20696e73696465207468652046545661756c74446174610a20202020202020206c657420656d7074795661756c74203c2d66745661756c74446174612e637265617465456d7074795661756c7428290a0a20202020202020202f2f205361766520697420746f20746865206163636f756e740a20202020202020207369676e65722e73746f726167652e73617665283c2d656d7074795661756c742c20746f3a2066745661756c74446174612e73746f7261676550617468290a20202020202020200a20202020202020202f2f204372656174652061207075626c6963206361706162696c69747920666f7220746865207661756c7420776869636820696e636c7564657320746865202e5265736f6c76657220696e746572666163650a20202020202020206c6574207661756c74436170203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c267b46756e6769626c65546f6b656e2e5661756c747d3e2866745661756c74446174612e73746f7261676550617468290a20202020202020207369676e65722e6361706162696c69746965732e7075626c697368287661756c744361702c2061743a2066745661756c74446174612e6d6574616461746150617468290a0a20202020202020202f2f204372656174652061207075626c6963206361706162696c69747920666f7220746865207661756c74206578706f73696e672074686520726563656976657220696e746572666163650a20202020202020206c6574207265636569766572436170203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c267b46756e6769626c65546f6b656e2e52656365697665727d3e2866745661756c74446174612e73746f7261676550617468290a20202020202020207369676e65722e6361706162696c69746965732e7075626c6973682872656365697665724361702c2061743a2066745661756c74446174612e726563656976657250617468290a0a202020207d0a7d0a20f856af7b2274797065223a2241646472657373222c2276616c7565223a22307865343637623964643131666130306466227da57b2276616c7565223a2246696174546f6b656e222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "023ccbbfebf10c47c49e4058a33fd9a29c4191c545de52c9afd27a29d38110aa280246076f1cf5d3160397766a9227b35f592f4d15c014848044c509818328b62b53657475702046756e6769626c6520546f6b656e205661756c74000201465420436f6e74726163742041646472657373000041646472657373000304465420436f6e7472616374204e616d650001",
    "hash": "0246076f1cf5d3160397766a9227b35f592f4d15c014848044c509818328b62b"
  },
  {
    "title": "FT.02 - Transfer Fungible Token with Paths",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FungibleToken from 0xf233dcee88fe0abe\n\n/// Can pass in any storage path and receiver path identifier instead of just the default.\n/// This lets you choose the token you want to send as well the capability you want to send it to.\n///\n/// Any token path can be passed as an argument here, so wallets should\n/// should check argument values to make sure the intended token path is passed in\n///\ntransaction(amount: UFix64, to: Address, senderPathIdentifier: String, receiverPathIdentifier: String) {\n\n    // The Vault resource that holds the tokens that are being transferred\n    let tempVault: @{FungibleToken.Vault}\n\n    prepare(signer: auth(BorrowValue) &Account) {\n\n        let storagePath = StoragePath(identifier: senderPathIdentifier)\n            ?? panic(\"Could not construct a storage path from the provided path identifier string\")\n\n        // Get a reference to the signer's stored vault\n        let vaultRef = signer.storage.borrow<auth(FungibleToken.Withdraw) &{FungibleToken.Provider}>(from: storagePath)\n\t\t\t?? panic(\"Could not borrow reference to the owner's Vault!\")\n\n        self.tempVault <- vaultRef.withdraw(amount: amount)\n    }\n\n    execute {\n        let publicPath = PublicPath(identifier: receiverPathIdentifier)\n            ?? panic(\"Could not construct a public path from the provided path identifier string\")\n\n        let recipient = getAccount(to)\n        let receiverRef = recipient.capabilities.borrow<&{FungibleToken.Receiver}>(publicPath)\n            ?? panic(\"Could not borrow reference to the recipient's Receiver!\")\n\n        // Transfer tokens from the signer's stored vault to the receiver capability\n        receiverRef.deposit(from: <-self.tempVault)\n    }\n}",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        },
        {
          "value": "0xe467b9dd11fa00df",
          "type": "Address"
        },
        {
          "value": "flowTokenVault",
          "type": "String"
        },
        {
          "value": "flowTokenReceiver",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FungibleToken from 0xf233dcee88fe0abe\n\n/// Can pass in any storage path and receiver path identifier instead of just the default.\n/// This lets you choose the token you want to send as well the capability you want to send it to.\n///\n/// Any token path can be passed as an argument here, so wallets should\n/// should check argument values to make sure the intended token path is passed in\n///\ntransaction(amount: UFix64, to: Address, senderPathIdentifier: String, receiverPathIdentifier: String) {\n\n    // The Vault resource that holds the tokens that are being transferred\n    let tempVault: @{FungibleToken.Vault}\n\n    prepare(signer: auth(BorrowValue) &Account) {\n\n        let storagePath = StoragePath(identifier: senderPathIdentifier)\n            ?? panic(\"Could not construct a storage path from the provided path identifier string\")\n\n        // Get a reference to the signer's stored vault\n        let vaultRef = signer.storage.borrow<auth(FungibleToken.Withdraw) &{FungibleToken.Provider}>(from: storagePath)\n\t\t\t?? panic(\"Could not borrow reference to the owner's Vault!\")\n\n        self.tempVault <- vaultRef.withdraw(amount: amount)\n    }\n\n    execute {\n        let publicPath = PublicPath(identifier: receiverPathIdentifier)\n            ?? panic(\"Could not construct a public path from the provided path identifier string\")\n\n        let recipient = getAccount(to)\n        let receiverRef = recipient.capabilities.borrow<&{FungibleToken.Receiver}>(publicPath)\n            ?? panic(\"Could not borrow reference to the recipient's Receiver!\")\n\n        // Transfer tokens from the signer's stored vault to the receiver capability\n        receiverRef.deposit(from: <-self.tempVault)\n    }\n}",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        },
        {
          "value": "0xe467b9dd11fa00df",
          "type": "Address"
        },
        {
          "value": "flowTokenVault",
          "type": "String"
        },
        {
          "value": "flowTokenReceiver",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f907a3b906a4696d706f72742046756e6769626c65546f6b656e2066726f6d203078663233336463656538386665306162650a0a2f2f2f2043616e207061737320696e20616e792073746f72616765207061746820616e642072656365697665722070617468206964656e74696669657220696e7374656164206f66206a757374207468652064656661756c742e0a2f2f2f2054686973206c65747320796f752063686f6f73652074686520746f6b656e20796f752077616e7420746f2073656e642061732077656c6c20746865206361706162696c69747920796f752077616e7420746f2073656e6420697420746f2e0a2f2f2f0a2f2f2f20416e7920746f6b656e20706174682063616e2062652070617373656420617320616e20617267756d656e7420686572652c20736f2077616c6c6574732073686f756c640a2f2f2f2073686f756c6420636865636b20617267756d656e742076616c75657320746f206d616b6520737572652074686520696e74656e64656420746f6b656e20706174682069732070617373656420696e0a2f2f2f0a7472616e73616374696f6e28616d6f756e743a205546697836342c20746f3a20416464726573732c2073656e646572506174684964656e7469666965723a20537472696e672c207265636569766572506174684964656e7469666965723a20537472696e6729207b0a0a202020202f2f20546865205661756c74207265736f75726365207468617420686f6c64732074686520746f6b656e73207468617420617265206265696e67207472616e736665727265640a202020206c65742074656d705661756c743a20407b46756e6769626c65546f6b656e2e5661756c747d0a0a2020202070726570617265287369676e65723a206175746828426f72726f7756616c75652920264163636f756e7429207b0a0a20202020202020206c65742073746f7261676550617468203d2053746f7261676550617468286964656e7469666965723a2073656e646572506174684964656e746966696572290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420636f6e73747275637420612073746f7261676520706174682066726f6d207468652070726f76696465642070617468206964656e74696669657220737472696e6722290a0a20202020202020202f2f204765742061207265666572656e636520746f20746865207369676e657227732073746f726564207661756c740a20202020202020206c6574207661756c74526566203d207369676e65722e73746f726167652e626f72726f773c617574682846756e6769626c65546f6b656e2e57697468647261772920267b46756e6769626c65546f6b656e2e50726f76696465727d3e2866726f6d3a2073746f7261676550617468290a0909093f3f2070616e69632822436f756c64206e6f7420626f72726f77207265666572656e636520746f20746865206f776e65722773205661756c742122290a0a202020202020202073656c662e74656d705661756c74203c2d207661756c745265662e776974686472617728616d6f756e743a20616d6f756e74290a202020207d0a0a2020202065786563757465207b0a20202020202020206c6574207075626c696350617468203d205075626c696350617468286964656e7469666965723a207265636569766572506174684964656e746966696572290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420636f6e7374727563742061207075626c696320706174682066726f6d207468652070726f76696465642070617468206964656e74696669657220737472696e6722290a0a20202020202020206c657420726563697069656e74203d206765744163636f756e7428746f290a20202020202020206c6574207265636569766572526566203d20726563697069656e742e6361706162696c69746965732e626f72726f773c267b46756e6769626c65546f6b656e2e52656365697665727d3e287075626c696350617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f77207265666572656e636520746f2074686520726563697069656e7427732052656365697665722122290a0a20202020202020202f2f205472616e7366657220746f6b656e732066726f6d20746865207369676e657227732073746f726564207661756c7420746f20746865207265636569766572206361706162696c6974790a202020202020202072656365697665725265662e6465706f7369742866726f6d3a203c2d73656c662e74656d705661756c74290a202020207d0a7df8bab07b2274797065223a22554669783634222c2276616c7565223a2239323233333732303336382e3534373735383038227daf7b2276616c7565223a22307865343637623964643131666130306466222c2274797065223a2241646472657373227daa7b2276616c7565223a22666c6f77546f6b656e5661756c74222c2274797065223a22537472696e67227dad7b2276616c7565223a22666c6f77546f6b656e5265636569766572222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f907a7f907a3b906a4696d706f72742046756e6769626c65546f6b656e2066726f6d203078663233336463656538386665306162650a0a2f2f2f2043616e207061737320696e20616e792073746f72616765207061746820616e642072656365697665722070617468206964656e74696669657220696e7374656164206f66206a757374207468652064656661756c742e0a2f2f2f2054686973206c65747320796f752063686f6f73652074686520746f6b656e20796f752077616e7420746f2073656e642061732077656c6c20746865206361706162696c69747920796f752077616e7420746f2073656e6420697420746f2e0a2f2f2f0a2f2f2f20416e7920746f6b656e20706174682063616e2062652070617373656420617320616e20617267756d656e7420686572652c20736f2077616c6c6574732073686f756c640a2f2f2f2073686f756c6420636865636b20617267756d656e742076616c75657320746f206d616b6520737572652074686520696e74656e64656420746f6b656e20706174682069732070617373656420696e0a2f2f2f0a7472616e73616374696f6e28616d6f756e743a205546697836342c20746f3a20416464726573732c2073656e646572506174684964656e7469666965723a20537472696e672c207265636569766572506174684964656e7469666965723a20537472696e6729207b0a0a202020202f2f20546865205661756c74207265736f75726365207468617420686f6c64732074686520746f6b656e73207468617420617265206265696e67207472616e736665727265640a202020206c65742074656d705661756c743a20407b46756e6769626c65546f6b656e2e5661756c747d0a0a2020202070726570617265287369676e65723a206175746828426f72726f7756616c75652920264163636f756e7429207b0a0a20202020202020206c65742073746f7261676550617468203d2053746f7261676550617468286964656e7469666965723a2073656e646572506174684964656e746966696572290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420636f6e73747275637420612073746f7261676520706174682066726f6d207468652070726f76696465642070617468206964656e74696669657220737472696e6722290a0a20202020202020202f2f204765742061207265666572656e636520746f20746865207369676e657227732073746f726564207661756c740a20202020202020206c6574207661756c74526566203d207369676e65722e73746f726167652e626f72726f773c617574682846756e6769626c65546f6b656e2e57697468647261772920267b46756e6769626c65546f6b656e2e50726f76696465727d3e2866726f6d3a2073746f7261676550617468290a0909093f3f2070616e69632822436f756c64206e6f7420626f72726f77207265666572656e636520746f20746865206f776e65722773205661756c742122290a0a202020202020202073656c662e74656d705661756c74203c2d207661756c745265662e776974686472617728616d6f756e743a20616d6f756e74290a202020207d0a0a2020202065786563757465207b0a20202020202020206c6574207075626c696350617468203d205075626c696350617468286964656e7469666965723a207265636569766572506174684964656e746966696572290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420636f6e7374727563742061207075626c696320706174682066726f6d207468652070726f76696465642070617468206964656e74696669657220737472696e6722290a0a20202020202020206c657420726563697069656e74203d206765744163636f756e7428746f290a20202020202020206c6574207265636569766572526566203d20726563697069656e742e6361706162696c69746965732e626f72726f773c267b46756e6769626c65546f6b656e2e52656365697665727d3e287075626c696350617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f77207265666572656e636520746f2074686520726563697069656e7427732052656365697665722122290a0a20202020202020202f2f205472616e7366657220746f6b656e732066726f6d20746865207369676e657227732073746f726564207661756c7420746f20746865207265636569766572206361706162696c6974790a202020202020202072656365697665725265662e6465706f7369742866726f6d3a203c2d73656c662e74656d705661756c74290a202020207d0a7df8bab07b2274797065223a22554669783634222c2276616c7565223a2239323233333732303336382e3534373735383038227daf7b2276616c7565223a22307865343637623964643131666130306466222c2274797065223a2241646472657373227daa7b2276616c7565223a22666c6f77546f6b656e5661756c74222c2274797065223a22537472696e67227dad7b2276616c7565223a22666c6f77546f6b656e5265636569766572222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02c9b9a6156280812703c15dde74df95cd0d7d1034dd2d8bf0cccf72b6071429886e5b8c83a3e8445eaa4bed391978443f124d9aa457fabdbaa016e0f65b57591e5472616e736665722046756e6769626c6520546f6b656e2077697468205061746873000401416d6f756e740000554669783634000301526563697069656e7400014164647265737300030453656e646572277320436f6c6c656374696f6e2050617468204964656e746966696572000204526563697069656e7427732052656365697665722050617468204964656e7469666965720003",
    "hash": "6e5b8c83a3e8445eaa4bed391978443f124d9aa457fabdbaa016e0f65b57591e"
  },
  {
    "title": "FT.03 - Transfer Fungible Token with Address",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FungibleToken from 0xf233dcee88fe0abe\nimport FungibleTokenMetadataViews from 0xf233dcee88fe0abe\n\n/// Can pass in any contract address and name to transfer a token from that contract\n/// This lets you choose the token you want to send\n///\n/// Any contract can be chosen here, so wallets should check argument values\n/// to make sure the intended token path is passed in\n///\ntransaction(amount: UFix64, to: Address, contractAddress: Address, contractName: String) {\n\n    // The Vault resource that holds the tokens that are being transferred\n    let tempVault: @{FungibleToken.Vault}\n\n    // FTVaultData struct to get paths from\n    let vaultData: FungibleTokenMetadataViews.FTVaultData\n\n    prepare(signer: auth(BorrowValue) &Account) {\n\n        // Borrow a reference to the vault stored on the passed account at the passed publicPath\n        let resolverRef = getAccount(contractAddress)\n            .contracts.borrow<&{FungibleToken}>(name: contractName)\n            ?? panic(\"Could not borrow a reference to the fungible token contract\")\n\n        // Use that reference to retrieve the FTView \n        self.vaultData = resolverRef.resolveContractView(resourceType: nil, viewType: Type<FungibleTokenMetadataViews.FTVaultData>()) as! FungibleTokenMetadataViews.FTVaultData?\n            ?? panic(\"Could not resolve the FTVaultData view for the given Fungible token contract\")\n\n        // Get a reference to the signer's stored vault\n        let vaultRef = signer.storage.borrow<auth(FungibleToken.Withdraw) &{FungibleToken.Provider}>(from: self.vaultData.storagePath)\n\t\t\t?? panic(\"Could not borrow reference to the owner's Vault!\")\n\n        self.tempVault <- vaultRef.withdraw(amount: amount)\n    }\n\n    execute {\n        let recipient = getAccount(to)\n        let receiverRef = recipient.capabilities.borrow<&{FungibleToken.Receiver}>(self.vaultData.receiverPath)\n            ?? panic(\"Could not borrow reference to the recipient's Receiver!\")\n\n        // Transfer tokens from the signer's stored vault to the receiver capability\n        receiverRef.deposit(from: <-self.tempVault)\n    }\n}",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        },
        {
          "value": "0xe467b9dd11fa00df",
          "type": "Address"
        },
        {
          "value": "0xe467b9dd11fa00df",
          "type": "Address"
        },
        {
          "value": "FiatToken",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FungibleToken from 0xf233dcee88fe0abe\nimport FungibleTokenMetadataViews from 0xf233dcee88fe0abe\n\n/// Can pass in any contract address and name to transfer a token from that contract\n/// This lets you choose the token you want to send\n///\n/// Any contract can be chosen here, so wallets should check argument values\n/// to make sure the intended token path is passed in\n///\ntransaction(amount: UFix64, to: Address, contractAddress: Address, contractName: String) {\n\n    // The Vault resource that holds the tokens that are being transferred\n    let tempVault: @{FungibleToken.Vault}\n\n    // FTVaultData struct to get paths from\n    let vaultData: FungibleTokenMetadataViews.FTVaultData\n\n    prepare(signer: auth(BorrowValue) &Account) {\n\n        // Borrow a reference to the vault stored on the passed account at the passed publicPath\n        let resolverRef = getAccount(contractAddress)\n            .contracts.borrow<&{FungibleToken}>(name: contractName)\n            ?? panic(\"Could not borrow a reference to the fungible token contract\")\n\n        // Use that reference to retrieve the FTView \n        self.vaultData = resolverRef.resolveContractView(resourceType: nil, viewType: Type<FungibleTokenMetadataViews.FTVaultData>()) as! FungibleTokenMetadataViews.FTVaultData?\n            ?? panic(\"Could not resolve the FTVaultData view for the given Fungible token contract\")\n\n        // Get a reference to the signer's stored vault\n        let vaultRef = signer.storage.borrow<auth(FungibleToken.Withdraw) &{FungibleToken.Provider}>(from: self.vaultData.storagePath)\n\t\t\t?? panic(\"Could not borrow reference to the owner's Vault!\")\n\n        self.tempVault <- vaultRef.withdraw(amount: amount)\n    }\n\n    execute {\n        let recipient = getAccount(to)\n        let receiverRef = recipient.capabilities.borrow<&{FungibleToken.Receiver}>(self.vaultData.receiverPath)\n            ?? panic(\"Could not borrow reference to the recipient's Receiver!\")\n\n        // Transfer tokens from the signer's stored vault to the receiver capability\n        receiverRef.deposit(from: <-self.tempVault)\n    }\n}",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        },
        {
          "value": "0xe467b9dd11fa00df",
          "type": "Address"
        },
        {
          "value": "0xe467b9dd11fa00df",
          "type": "Address"
        },
        {
          "value": "FiatToken",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9092bb9082f696d706f72742046756e6769626c65546f6b656e2066726f6d203078663233336463656538386665306162650a696d706f72742046756e6769626c65546f6b656e4d6574616461746156696577732066726f6d203078663233336463656538386665306162650a0a2f2f2f2043616e207061737320696e20616e7920636f6e7472616374206164647265737320616e64206e616d6520746f207472616e73666572206120746f6b656e2066726f6d207468617420636f6e74726163740a2f2f2f2054686973206c65747320796f752063686f6f73652074686520746f6b656e20796f752077616e7420746f2073656e640a2f2f2f0a2f2f2f20416e7920636f6e74726163742063616e2062652063686f73656e20686572652c20736f2077616c6c6574732073686f756c6420636865636b20617267756d656e742076616c7565730a2f2f2f20746f206d616b6520737572652074686520696e74656e64656420746f6b656e20706174682069732070617373656420696e0a2f2f2f0a7472616e73616374696f6e28616d6f756e743a205546697836342c20746f3a20416464726573732c20636f6e7472616374416464726573733a20416464726573732c20636f6e74726163744e616d653a20537472696e6729207b0a0a202020202f2f20546865205661756c74207265736f75726365207468617420686f6c64732074686520746f6b656e73207468617420617265206265696e67207472616e736665727265640a202020206c65742074656d705661756c743a20407b46756e6769626c65546f6b656e2e5661756c747d0a0a202020202f2f2046545661756c74446174612073747275637420746f206765742070617468732066726f6d0a202020206c6574207661756c74446174613a2046756e6769626c65546f6b656e4d6574616461746156696577732e46545661756c74446174610a0a2020202070726570617265287369676e65723a206175746828426f72726f7756616c75652920264163636f756e7429207b0a0a20202020202020202f2f20426f72726f772061207265666572656e636520746f20746865207661756c742073746f726564206f6e2074686520706173736564206163636f756e742061742074686520706173736564207075626c6963506174680a20202020202020206c6574207265736f6c766572526566203d206765744163636f756e7428636f6e747261637441646472657373290a2020202020202020202020202e636f6e7472616374732e626f72726f773c267b46756e6769626c65546f6b656e7d3e286e616d653a20636f6e74726163744e616d65290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f207468652066756e6769626c6520746f6b656e20636f6e747261637422290a0a20202020202020202f2f205573652074686174207265666572656e636520746f2072657472696576652074686520465456696577200a202020202020202073656c662e7661756c7444617461203d207265736f6c7665725265662e7265736f6c7665436f6e747261637456696577287265736f75726365547970653a206e696c2c2076696577547970653a20547970653c46756e6769626c65546f6b656e4d6574616461746156696577732e46545661756c74446174613e282929206173212046756e6769626c65546f6b656e4d6574616461746156696577732e46545661756c74446174613f0a2020202020202020202020203f3f2070616e69632822436f756c64206e6f74207265736f6c7665207468652046545661756c7444617461207669657720666f722074686520676976656e2046756e6769626c6520746f6b656e20636f6e747261637422290a0a20202020202020202f2f204765742061207265666572656e636520746f20746865207369676e657227732073746f726564207661756c740a20202020202020206c6574207661756c74526566203d207369676e65722e73746f726167652e626f72726f773c617574682846756e6769626c65546f6b656e2e57697468647261772920267b46756e6769626c65546f6b656e2e50726f76696465727d3e2866726f6d3a2073656c662e7661756c74446174612e73746f7261676550617468290a0909093f3f2070616e69632822436f756c64206e6f7420626f72726f77207265666572656e636520746f20746865206f776e65722773205661756c742122290a0a202020202020202073656c662e74656d705661756c74203c2d207661756c745265662e776974686472617728616d6f756e743a20616d6f756e74290a202020207d0a0a2020202065786563757465207b0a20202020202020206c657420726563697069656e74203d206765744163636f756e7428746f290a20202020202020206c6574207265636569766572526566203d20726563697069656e742e6361706162696c69746965732e626f72726f773c267b46756e6769626c65546f6b656e2e52656365697665727d3e2873656c662e7661756c74446174612e726563656976657250617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f77207265666572656e636520746f2074686520726563697069656e7427732052656365697665722122290a0a20202020202020202f2f205472616e7366657220746f6b656e732066726f6d20746865207369676e657227732073746f726564207661756c7420746f20746865207265636569766572206361706162696c6974790a202020202020202072656365697665725265662e6465706f7369742866726f6d3a203c2d73656c662e74656d705661756c74290a202020207d0a7df8b7b07b2274797065223a22554669783634222c2276616c7565223a2239323233333732303336382e3534373735383038227daf7b2276616c7565223a22307865343637623964643131666130306466222c2274797065223a2241646472657373227daf7b2276616c7565223a22307865343637623964643131666130306466222c2274797065223a2241646472657373227da57b2276616c7565223a2246696174546f6b656e222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f9092ff9092bb9082f696d706f72742046756e6769626c65546f6b656e2066726f6d203078663233336463656538386665306162650a696d706f72742046756e6769626c65546f6b656e4d6574616461746156696577732066726f6d203078663233336463656538386665306162650a0a2f2f2f2043616e207061737320696e20616e7920636f6e7472616374206164647265737320616e64206e616d6520746f207472616e73666572206120746f6b656e2066726f6d207468617420636f6e74726163740a2f2f2f2054686973206c65747320796f752063686f6f73652074686520746f6b656e20796f752077616e7420746f2073656e640a2f2f2f0a2f2f2f20416e7920636f6e74726163742063616e2062652063686f73656e20686572652c20736f2077616c6c6574732073686f756c6420636865636b20617267756d656e742076616c7565730a2f2f2f20746f206d616b6520737572652074686520696e74656e64656420746f6b656e20706174682069732070617373656420696e0a2f2f2f0a7472616e73616374696f6e28616d6f756e743a205546697836342c20746f3a20416464726573732c20636f6e7472616374416464726573733a20416464726573732c20636f6e74726163744e616d653a20537472696e6729207b0a0a202020202f2f20546865205661756c74207265736f75726365207468617420686f6c64732074686520746f6b656e73207468617420617265206265696e67207472616e736665727265640a202020206c65742074656d705661756c743a20407b46756e6769626c65546f6b656e2e5661756c747d0a0a202020202f2f2046545661756c74446174612073747275637420746f206765742070617468732066726f6d0a202020206c6574207661756c74446174613a2046756e6769626c65546f6b656e4d6574616461746156696577732e46545661756c74446174610a0a2020202070726570617265287369676e65723a206175746828426f72726f7756616c75652920264163636f756e7429207b0a0a20202020202020202f2f20426f72726f772061207265666572656e636520746f20746865207661756c742073746f726564206f6e2074686520706173736564206163636f756e742061742074686520706173736564207075626c6963506174680a20202020202020206c6574207265736f6c766572526566203d206765744163636f756e7428636f6e747261637441646472657373290a2020202020202020202020202e636f6e7472616374732e626f72726f773c267b46756e6769626c65546f6b656e7d3e286e616d653a20636f6e74726163744e616d65290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f207468652066756e6769626c6520746f6b656e20636f6e747261637422290a0a20202020202020202f2f205573652074686174207265666572656e636520746f2072657472696576652074686520465456696577200a202020202020202073656c662e7661756c7444617461203d207265736f6c7665725265662e7265736f6c7665436f6e747261637456696577287265736f75726365547970653a206e696c2c2076696577547970653a20547970653c46756e6769626c65546f6b656e4d6574616461746156696577732e46545661756c74446174613e282929206173212046756e6769626c65546f6b656e4d6574616461746156696577732e46545661756c74446174613f0a2020202020202020202020203f3f2070616e69632822436f756c64206e6f74207265736f6c7665207468652046545661756c7444617461207669657720666f722074686520676976656e2046756e6769626c6520746f6b656e20636f6e747261637422290a0a20202020202020202f2f204765742061207265666572656e636520746f20746865207369676e657227732073746f726564207661756c740a20202020202020206c6574207661756c74526566203d207369676e65722e73746f726167652e626f72726f773c617574682846756e6769626c65546f6b656e2e57697468647261772920267b46756e6769626c65546f6b656e2e50726f76696465727d3e2866726f6d3a2073656c662e7661756c74446174612e73746f7261676550617468290a0909093f3f2070616e69632822436f756c64206e6f7420626f72726f77207265666572656e636520746f20746865206f776e65722773205661756c742122290a0a202020202020202073656c662e74656d705661756c74203c2d207661756c745265662e776974686472617728616d6f756e743a20616d6f756e74290a202020207d0a0a2020202065786563757465207b0a20202020202020206c657420726563697069656e74203d206765744163636f756e7428746f290a20202020202020206c6574207265636569766572526566203d20726563697069656e742e6361706162696c69746965732e626f72726f773c267b46756e6769626c65546f6b656e2e52656365697665727d3e2873656c662e7661756c74446174612e726563656976657250617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f77207265666572656e636520746f2074686520726563697069656e7427732052656365697665722122290a0a20202020202020202f2f205472616e7366657220746f6b656e732066726f6d20746865207369676e657227732073746f726564207661756c7420746f20746865207265636569766572206361706162696c6974790a202020202020202072656365697665725265662e6465706f7369742866726f6d3a203c2d73656c662e74656d705661756c74290a202020207d0a7df8b7b07b2274797065223a22554669783634222c2276616c7565223a2239323233333732303336382e3534373735383038227daf7b2276616c7565223a22307865343637623964643131666130306466222c2274797065223a2241646472657373227daf7b2276616c7565223a22307865343637623964643131666130306466222c2274797065223a2241646472657373227da57b2276616c7565223a2246696174546f6b656e222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02c1518742a95f9b49259abed8364b05d616ee8acebe123e9979f762b9e7522f93697ad2a90da93cbd02b7658f174c9c32e2016a574edb89cf24b57a8155c343e45472616e736665722046756e6769626c6520546f6b656e20776974682041646472657373000401416d6f756e740000554669783634000301526563697069656e74000141646472657373000301465420436f6e74726163742041646472657373000241646472657373000304465420436f6e7472616374204e616d650003",
    "hash": "697ad2a90da93cbd02b7658f174c9c32e2016a574edb89cf24b57a8155c343e4"
  },
  {
    "title": "NFT.01 - Setup NFT Collection",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "/// This transaction is what an account would run\n/// to set itself up to receive NFTs. This function\n/// uses views to know where to set up the collection\n/// in storage and to create the empty collection.\n\nimport 0x1d7e57aa55817448\nimport 0x1d7e57aa55817448\n\ntransaction(contractAddress: Address, contractName: String) {\n\n    prepare(signer: auth(IssueStorageCapabilityController, PublishCapability, SaveValue) &Account) {\n        // Borrow a reference to the nft contract deployed to the passed account\n        let resolverRef = getAccount(contractAddress)\n            .contracts.borrow<&{NonFungibleToken}>(name: contractName)\n            ?? panic(\"Could not borrow a reference to the non-fungible token contract\")\n\n        // Use that reference to retrieve the NFTCollectionData view \n        let collectionData = resolverRef.resolveContractView(resourceType: nil, viewType: Type<MetadataViews.NFTCollectionData>()) as! MetadataViews.NFTCollectionData?\n            ?? panic(\"Could not resolve the NFTCollectionData view for the given non-fungible token contract\")\n\n        // Create a new empty collections\n        let emptyCollection <- collectionData.createEmptyCollection()\n\n        // save it to the account\n        signer.storage.save(<-emptyCollection, to: collectionData.storagePath)\n\n        // create a public capability for the collection\n        let collectionCap = signer.capabilities.storage.issue<&{NonFungibleToken.Collection}>(\n                collectionData.storagePath\n            )\n        signer.capabilities.publish(collectionCap, at: collectionData.publicPath)\n    }\n}\n",
      "arguments": [
        {
          "type": "Address",
          "value": "0xe467b9dd11fa00df"
        },
        {
          "value": "TopShot",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "/// This transaction is what an account would run\n/// to set itself up to receive NFTs. This function\n/// uses views to know where to set up the collection\n/// in storage and to create the empty collection.\n\nimport 0x1d7e57aa55817448\nimport 0x1d7e57aa55817448\n\ntransaction(contractAddress: Address, contractName: String) {\n\n    prepare(signer: auth(IssueStorageCapabilityController, PublishCapability, SaveValue) &Account) {\n        // Borrow a reference to the nft contract deployed to the passed account\n        let resolverRef = getAccount(contractAddress)\n            .contracts.borrow<&{NonFungibleToken}>(name: contractName)\n            ?? panic(\"Could not borrow a reference to the non-fungible token contract\")\n\n        // Use that reference to retrieve the NFTCollectionData view \n        let collectionData = resolverRef.resolveContractView(resourceType: nil, viewType: Type<MetadataViews.NFTCollectionData>()) as! MetadataViews.NFTCollectionData?\n            ?? panic(\"Could not resolve the NFTCollectionData view for the given non-fungible token contract\")\n\n        // Create a new empty collections\n        let emptyCollection <- collectionData.createEmptyCollection()\n\n        // save it to the account\n        signer.storage.save(<-emptyCollection, to: collectionData.storagePath)\n\n        // create a public capability for the collection\n        let collectionCap = signer.capabilities.storage.issue<&{NonFungibleToken.Collection}>(\n                collectionData.storagePath\n            )\n        signer.capabilities.publish(collectionCap, at: collectionData.publicPath)\n    }\n}\n",
      "arguments": [
        {
          "type": "Address",
          "value": "0xe467b9dd11fa00df"
        },
        {
          "value": "TopShot",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f906d5b9063c2f2f2f2054686973207472616e73616374696f6e206973207768617420616e206163636f756e7420776f756c642072756e0a2f2f2f20746f2073657420697473656c6620757020746f2072656365697665204e4654732e20546869732066756e6374696f6e0a2f2f2f207573657320766965777320746f206b6e6f7720776865726520746f207365742075702074686520636f6c6c656374696f6e0a2f2f2f20696e2073746f7261676520616e6420746f206372656174652074686520656d70747920636f6c6c656374696f6e2e0a0a696d706f7274203078316437653537616135353831373434380a696d706f7274203078316437653537616135353831373434380a0a7472616e73616374696f6e28636f6e7472616374416464726573733a20416464726573732c20636f6e74726163744e616d653a20537472696e6729207b0a0a2020202070726570617265287369676e65723a206175746828497373756553746f726167654361706162696c697479436f6e74726f6c6c65722c205075626c6973684361706162696c6974792c205361766556616c75652920264163636f756e7429207b0a20202020202020202f2f20426f72726f772061207265666572656e636520746f20746865206e667420636f6e7472616374206465706c6f79656420746f2074686520706173736564206163636f756e740a20202020202020206c6574207265736f6c766572526566203d206765744163636f756e7428636f6e747261637441646472657373290a2020202020202020202020202e636f6e7472616374732e626f72726f773c267b4e6f6e46756e6769626c65546f6b656e7d3e286e616d653a20636f6e74726163744e616d65290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f20746865206e6f6e2d66756e6769626c6520746f6b656e20636f6e747261637422290a0a20202020202020202f2f205573652074686174207265666572656e636520746f20726574726965766520746865204e4654436f6c6c656374696f6e446174612076696577200a20202020202020206c657420636f6c6c656374696f6e44617461203d207265736f6c7665725265662e7265736f6c7665436f6e747261637456696577287265736f75726365547970653a206e696c2c2076696577547970653a20547970653c4d6574616461746156696577732e4e4654436f6c6c656374696f6e446174613e28292920617321204d6574616461746156696577732e4e4654436f6c6c656374696f6e446174613f0a2020202020202020202020203f3f2070616e69632822436f756c64206e6f74207265736f6c766520746865204e4654436f6c6c656374696f6e44617461207669657720666f722074686520676976656e206e6f6e2d66756e6769626c6520746f6b656e20636f6e747261637422290a0a20202020202020202f2f204372656174652061206e657720656d70747920636f6c6c656374696f6e730a20202020202020206c657420656d707479436f6c6c656374696f6e203c2d20636f6c6c656374696f6e446174612e637265617465456d707479436f6c6c656374696f6e28290a0a20202020202020202f2f207361766520697420746f20746865206163636f756e740a20202020202020207369676e65722e73746f726167652e73617665283c2d656d707479436f6c6c656374696f6e2c20746f3a20636f6c6c656374696f6e446174612e73746f7261676550617468290a0a20202020202020202f2f206372656174652061207075626c6963206361706162696c69747920666f722074686520636f6c6c656374696f6e0a20202020202020206c657420636f6c6c656374696f6e436170203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c267b4e6f6e46756e6769626c65546f6b656e2e436f6c6c656374696f6e7d3e280a20202020202020202020202020202020636f6c6c656374696f6e446174612e73746f72616765506174680a202020202020202020202020290a20202020202020207369676e65722e6361706162696c69746965732e7075626c69736828636f6c6c656374696f6e4361702c2061743a20636f6c6c656374696f6e446174612e7075626c696350617468290a202020207d0a7d0af854af7b2274797065223a2241646472657373222c2276616c7565223a22307865343637623964643131666130306466227da37b2276616c7565223a22546f7053686f74222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f906d9f906d5b9063c2f2f2f2054686973207472616e73616374696f6e206973207768617420616e206163636f756e7420776f756c642072756e0a2f2f2f20746f2073657420697473656c6620757020746f2072656365697665204e4654732e20546869732066756e6374696f6e0a2f2f2f207573657320766965777320746f206b6e6f7720776865726520746f207365742075702074686520636f6c6c656374696f6e0a2f2f2f20696e2073746f7261676520616e6420746f206372656174652074686520656d70747920636f6c6c656374696f6e2e0a0a696d706f7274203078316437653537616135353831373434380a696d706f7274203078316437653537616135353831373434380a0a7472616e73616374696f6e28636f6e7472616374416464726573733a20416464726573732c20636f6e74726163744e616d653a20537472696e6729207b0a0a2020202070726570617265287369676e65723a206175746828497373756553746f726167654361706162696c697479436f6e74726f6c6c65722c205075626c6973684361706162696c6974792c205361766556616c75652920264163636f756e7429207b0a20202020202020202f2f20426f72726f772061207265666572656e636520746f20746865206e667420636f6e7472616374206465706c6f79656420746f2074686520706173736564206163636f756e740a20202020202020206c6574207265736f6c766572526566203d206765744163636f756e7428636f6e747261637441646472657373290a2020202020202020202020202e636f6e7472616374732e626f72726f773c267b4e6f6e46756e6769626c65546f6b656e7d3e286e616d653a20636f6e74726163744e616d65290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f20746865206e6f6e2d66756e6769626c6520746f6b656e20636f6e747261637422290a0a20202020202020202f2f205573652074686174207265666572656e636520746f20726574726965766520746865204e4654436f6c6c656374696f6e446174612076696577200a20202020202020206c657420636f6c6c656374696f6e44617461203d207265736f6c7665725265662e7265736f6c7665436f6e747261637456696577287265736f75726365547970653a206e696c2c2076696577547970653a20547970653c4d6574616461746156696577732e4e4654436f6c6c656374696f6e446174613e28292920617321204d6574616461746156696577732e4e4654436f6c6c656374696f6e446174613f0a2020202020202020202020203f3f2070616e69632822436f756c64206e6f74207265736f6c766520746865204e4654436f6c6c656374696f6e44617461207669657720666f722074686520676976656e206e6f6e2d66756e6769626c6520746f6b656e20636f6e747261637422290a0a20202020202020202f2f204372656174652061206e657720656d70747920636f6c6c656374696f6e730a20202020202020206c657420656d707479436f6c6c656374696f6e203c2d20636f6c6c656374696f6e446174612e637265617465456d707479436f6c6c656374696f6e28290a0a20202020202020202f2f207361766520697420746f20746865206163636f756e740a20202020202020207369676e65722e73746f726167652e73617665283c2d656d707479436f6c6c656374696f6e2c20746f3a20636f6c6c656374696f6e446174612e73746f7261676550617468290a0a20202020202020202f2f206372656174652061207075626c6963206361706162696c69747920666f722074686520636f6c6c656374696f6e0a20202020202020206c657420636f6c6c656374696f6e436170203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c267b4e6f6e46756e6769626c65546f6b656e2e436f6c6c656374696f6e7d3e280a20202020202020202020202020202020636f6c6c656374696f6e446174612e73746f72616765506174680a202020202020202020202020290a20202020202020207369676e65722e6361706162696c69746965732e7075626c69736828636f6c6c656374696f6e4361702c2061743a20636f6c6c656374696f6e446174612e7075626c696350617468290a202020207d0a7d0af854af7b2274797065223a2241646472657373222c2276616c7565223a22307865343637623964643131666130306466227da37b2276616c7565223a22546f7053686f74222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02d9ef3b05f8b06d43c3a0ef4066e88e6248323c5f235f9a5d1f8a85d6e2bc9bfa1d12c005fa7a08277204e5d54e29b725c52b9e8e3dd6ff6e01f8d47d7be1626c5365747570204e465420436f6c6c656374696f6e0002014e465420436f6e747261637420416464726573730000416464726573730003044e465420436f6e7472616374204e616d650001",
    "hash": "1d12c005fa7a08277204e5d54e29b725c52b9e8e3dd6ff6e01f8d47d7be1626c"
  },
  {
    "title": "NFT.02 - Transfer NFT with Paths",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import 0x1d7e57aa55817448\n\n/// Can pass in any storage path and receiver path instead of just the default.\n/// This lets you choose the token you want to send as well the capability you want to send it to.\n///\n/// Any token path can be passed as an argument here, so wallets should\n/// should check argument values to make sure the intended token path is passed in\n///\ntransaction(to: Address, id: UInt64, senderPathIdentifier: String, receiverPathIdentifier: String) {\n\n    // The NFT resource to be transferred\n    let tempNFT: @{NonFungibleToken.NFT}\n\n    prepare(signer: auth(BorrowValue) &Account) {\n\n        let storagePath = StoragePath(identifier: senderPathIdentifier)\n            ?? panic(\"Could not construct a storage path from the provided path identifier string\")\n\n        // borrow a reference to the signer's NFT collection\n        let withdrawRef = signer.storage.borrow<auth(NonFungibleToken.Withdraw) &{NonFungibleToken.Collection}>(\n                from: storagePath\n            ) ?? panic(\"Account does not store a collection object at the specified path\")\n\n        self.tempNFT <- withdrawRef.withdraw(withdrawID: id)\n    }\n\n    execute {\n        let publicPath = PublicPath(identifier: receiverPathIdentifier)\n            ?? panic(\"Could not construct a public path from the provided path identifier string\")\n\n        // get the recipients public account object\n        let recipient = getAccount(to)\n\n        // borrow a public reference to the receivers collection\n        let receiverCap = recipient.capabilities.get<&{NonFungibleToken.Receiver}>(publicPath)\n            ?? panic(\"Could not get the recipient's Receiver Capability\")\n\n        let receiverRef = receiverCap.borrow()\n            ?? panic(\"Could not borrow reference to the recipient's receiver\")\n\n        // Deposit the NFT to the receiver\n        receiverRef.deposit(token: <-self.tempNFT)\n    }\n}",
      "arguments": [
        {
          "type": "Address",
          "value": "0xe467b9dd11fa00df"
        },
        {
          "value": "10",
          "type": "UInt64"
        },
        {
          "value": "flowTokenVault",
          "type": "String"
        },
        {
          "value": "flowTokenReceiver",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import 0x1d7e57aa55817448\n\n/// Can pass in any storage path and receiver path instead of just the default.\n/// This lets you choose the token you want to send as well the capability you want to send it to.\n///\n/// Any token path can be passed as an argument here, so wallets should\n/// should check argument values to make sure the intended token path is passed in\n///\ntransaction(to: Address, id: UInt64, senderPathIdentifier: String, receiverPathIdentifier: String) {\n\n    // The NFT resource to be transferred\n    let tempNFT: @{NonFungibleToken.NFT}\n\n    prepare(signer: auth(BorrowValue) &Account) {\n\n        let storagePath = StoragePath(identifier: senderPathIdentifier)\n            ?? panic(\"Could not construct a storage path from the provided path identifier string\")\n\n        // borrow a reference to the signer's NFT collection\n        let withdrawRef = signer.storage.borrow<auth(NonFungibleToken.Withdraw) &{NonFungibleToken.Collection}>(\n                from: storagePath\n            ) ?? panic(\"Account does not store a collection object at the specified path\")\n\n        self.tempNFT <- withdrawRef.withdraw(withdrawID: id)\n    }\n\n    execute {\n        let publicPath = PublicPath(identifier: receiverPathIdentifier)\n            ?? panic(\"Could not construct a public path from the provided path identifier string\")\n\n        // get the recipients public account object\n        let recipient = getAccount(to)\n\n        // borrow a public reference to the receivers collection\n        let receiverCap = recipient.capabilities.get<&{NonFungibleToken.Receiver}>(publicPath)\n            ?? panic(\"Could not get the recipient's Receiver Capability\")\n\n        let receiverRef = receiverCap.borrow()\n            ?? panic(\"Could not borrow reference to the recipient's receiver\")\n\n        // Deposit the NFT to the receiver\n        receiverRef.deposit(token: <-self.tempNFT)\n    }\n}",
      "arguments": [
        {
          "type": "Address",
          "value": "0xe467b9dd11fa00df"
        },
        {
          "value": "10",
          "type": "UInt64"
        },
        {
          "value": "flowTokenVault",
          "type": "String"
        },
        {
          "value": "flowTokenReceiver",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9084db90760696d706f7274203078316437653537616135353831373434380a0a2f2f2f2043616e207061737320696e20616e792073746f72616765207061746820616e64207265636569766572207061746820696e7374656164206f66206a757374207468652064656661756c742e0a2f2f2f2054686973206c65747320796f752063686f6f73652074686520746f6b656e20796f752077616e7420746f2073656e642061732077656c6c20746865206361706162696c69747920796f752077616e7420746f2073656e6420697420746f2e0a2f2f2f0a2f2f2f20416e7920746f6b656e20706174682063616e2062652070617373656420617320616e20617267756d656e7420686572652c20736f2077616c6c6574732073686f756c640a2f2f2f2073686f756c6420636865636b20617267756d656e742076616c75657320746f206d616b6520737572652074686520696e74656e64656420746f6b656e20706174682069732070617373656420696e0a2f2f2f0a7472616e73616374696f6e28746f3a20416464726573732c2069643a2055496e7436342c2073656e646572506174684964656e7469666965723a20537472696e672c207265636569766572506174684964656e7469666965723a20537472696e6729207b0a0a202020202f2f20546865204e4654207265736f7572636520746f206265207472616e736665727265640a202020206c65742074656d704e46543a20407b4e6f6e46756e6769626c65546f6b656e2e4e46547d0a0a2020202070726570617265287369676e65723a206175746828426f72726f7756616c75652920264163636f756e7429207b0a0a20202020202020206c65742073746f7261676550617468203d2053746f7261676550617468286964656e7469666965723a2073656e646572506174684964656e746966696572290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420636f6e73747275637420612073746f7261676520706174682066726f6d207468652070726f76696465642070617468206964656e74696669657220737472696e6722290a0a20202020202020202f2f20626f72726f772061207265666572656e636520746f20746865207369676e65722773204e465420636f6c6c656374696f6e0a20202020202020206c6574207769746864726177526566203d207369676e65722e73746f726167652e626f72726f773c61757468284e6f6e46756e6769626c65546f6b656e2e57697468647261772920267b4e6f6e46756e6769626c65546f6b656e2e436f6c6c656374696f6e7d3e280a2020202020202020202020202020202066726f6d3a2073746f72616765506174680a20202020202020202020202029203f3f2070616e696328224163636f756e7420646f6573206e6f742073746f7265206120636f6c6c656374696f6e206f626a6563742061742074686520737065636966696564207061746822290a0a202020202020202073656c662e74656d704e4654203c2d2077697468647261775265662e776974686472617728776974686472617749443a206964290a202020207d0a0a2020202065786563757465207b0a20202020202020206c6574207075626c696350617468203d205075626c696350617468286964656e7469666965723a207265636569766572506174684964656e746966696572290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420636f6e7374727563742061207075626c696320706174682066726f6d207468652070726f76696465642070617468206964656e74696669657220737472696e6722290a0a20202020202020202f2f206765742074686520726563697069656e7473207075626c6963206163636f756e74206f626a6563740a20202020202020206c657420726563697069656e74203d206765744163636f756e7428746f290a0a20202020202020202f2f20626f72726f772061207075626c6963207265666572656e636520746f207468652072656365697665727320636f6c6c656374696f6e0a20202020202020206c6574207265636569766572436170203d20726563697069656e742e6361706162696c69746965732e6765743c267b4e6f6e46756e6769626c65546f6b656e2e52656365697665727d3e287075626c696350617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f74206765742074686520726563697069656e742773205265636569766572204361706162696c69747922290a0a20202020202020206c6574207265636569766572526566203d2072656365697665724361702e626f72726f7728290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f77207265666572656e636520746f2074686520726563697069656e74277320726563656976657222290a0a20202020202020202f2f204465706f73697420746865204e465420746f207468652072656365697665720a202020202020202072656365697665725265662e6465706f73697428746f6b656e3a203c2d73656c662e74656d704e4654290a202020207d0a7df8a8af7b2274797065223a2241646472657373222c2276616c7565223a22307865343637623964643131666130306466227d9e7b2276616c7565223a223130222c2274797065223a2255496e743634227daa7b2276616c7565223a22666c6f77546f6b656e5661756c74222c2274797065223a22537472696e67227dad7b2276616c7565223a22666c6f77546f6b656e5265636569766572222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90851f9084db90760696d706f7274203078316437653537616135353831373434380a0a2f2f2f2043616e207061737320696e20616e792073746f72616765207061746820616e64207265636569766572207061746820696e7374656164206f66206a757374207468652064656661756c742e0a2f2f2f2054686973206c65747320796f752063686f6f73652074686520746f6b656e20796f752077616e7420746f2073656e642061732077656c6c20746865206361706162696c69747920796f752077616e7420746f2073656e6420697420746f2e0a2f2f2f0a2f2f2f20416e7920746f6b656e20706174682063616e2062652070617373656420617320616e20617267756d656e7420686572652c20736f2077616c6c6574732073686f756c640a2f2f2f2073686f756c6420636865636b20617267756d656e742076616c75657320746f206d616b6520737572652074686520696e74656e64656420746f6b656e20706174682069732070617373656420696e0a2f2f2f0a7472616e73616374696f6e28746f3a20416464726573732c2069643a2055496e7436342c2073656e646572506174684964656e7469666965723a20537472696e672c207265636569766572506174684964656e7469666965723a20537472696e6729207b0a0a202020202f2f20546865204e4654207265736f7572636520746f206265207472616e736665727265640a202020206c65742074656d704e46543a20407b4e6f6e46756e6769626c65546f6b656e2e4e46547d0a0a2020202070726570617265287369676e65723a206175746828426f72726f7756616c75652920264163636f756e7429207b0a0a20202020202020206c65742073746f7261676550617468203d2053746f7261676550617468286964656e7469666965723a2073656e646572506174684964656e746966696572290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420636f6e73747275637420612073746f7261676520706174682066726f6d207468652070726f76696465642070617468206964656e74696669657220737472696e6722290a0a20202020202020202f2f20626f72726f772061207265666572656e636520746f20746865207369676e65722773204e465420636f6c6c656374696f6e0a20202020202020206c6574207769746864726177526566203d207369676e65722e73746f726167652e626f72726f773c61757468284e6f6e46756e6769626c65546f6b656e2e57697468647261772920267b4e6f6e46756e6769626c65546f6b656e2e436f6c6c656374696f6e7d3e280a2020202020202020202020202020202066726f6d3a2073746f72616765506174680a20202020202020202020202029203f3f2070616e696328224163636f756e7420646f6573206e6f742073746f7265206120636f6c6c656374696f6e206f626a6563742061742074686520737065636966696564207061746822290a0a202020202020202073656c662e74656d704e4654203c2d2077697468647261775265662e776974686472617728776974686472617749443a206964290a202020207d0a0a2020202065786563757465207b0a20202020202020206c6574207075626c696350617468203d205075626c696350617468286964656e7469666965723a207265636569766572506174684964656e746966696572290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420636f6e7374727563742061207075626c696320706174682066726f6d207468652070726f76696465642070617468206964656e74696669657220737472696e6722290a0a20202020202020202f2f206765742074686520726563697069656e7473207075626c6963206163636f756e74206f626a6563740a20202020202020206c657420726563697069656e74203d206765744163636f756e7428746f290a0a20202020202020202f2f20626f72726f772061207075626c6963207265666572656e636520746f207468652072656365697665727320636f6c6c656374696f6e0a20202020202020206c6574207265636569766572436170203d20726563697069656e742e6361706162696c69746965732e6765743c267b4e6f6e46756e6769626c65546f6b656e2e52656365697665727d3e287075626c696350617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f74206765742074686520726563697069656e742773205265636569766572204361706162696c69747922290a0a20202020202020206c6574207265636569766572526566203d2072656365697665724361702e626f72726f7728290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f77207265666572656e636520746f2074686520726563697069656e74277320726563656976657222290a0a20202020202020202f2f204465706f73697420746865204e465420746f207468652072656365697665720a202020202020202072656365697665725265662e6465706f73697428746f6b656e3a203c2d73656c662e74656d704e4654290a202020207d0a7df8a8af7b2274797065223a2241646472657373222c2276616c7565223a22307865343637623964643131666130306466227d9e7b2276616c7565223a223130222c2274797065223a2255496e743634227daa7b2276616c7565223a22666c6f77546f6b656e5661756c74222c2274797065223a22537472696e67227dad7b2276616c7565223a22666c6f77546f6b656e5265636569766572222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02f08815a2f535512a65e5c95c391dd6ff89662dad8fd68da836d11d0827a52bd4a56eb0c3e6c3456eee86d5cb62ddf700b0d1e5e65f12fe6926edd6d1816582855472616e73666572204e46542077697468205061746873000401526563697069656e740000416464726573730003014e465420494420746f205472616e73666572000155496e74363400030453656e646572277320436f6c6c656374696f6e2050617468204964656e746966696572000204526563697069656e7427732052656365697665722050617468204964656e7469666965720003",
    "hash": "a56eb0c3e6c3456eee86d5cb62ddf700b0d1e5e65f12fe6926edd6d181658285"
  },
  {
    "title": "NFT.03 - Transfer NFT with Address",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import 0x1d7e57aa55817448\nimport 0x1d7e57aa55817448\n\n/// Can pass in any contract address and name\n/// This lets you choose the token you want to send because\n/// the transaction gets the metadata from the provided contract.\n///\ntransaction(to: Address, id: UInt64, contractAddress: Address, contractName: String) {\n\n    // The NFT resource to be transferred\n    let tempNFT: @{NonFungibleToken.NFT}\n\n    // NFTCollectionData struct to get paths from\n    let collectionData: MetadataViews.NFTCollectionData\n\n    prepare(signer: auth(BorrowValue) &Account) {\n\n        // Borrow a reference to the nft contract deployed to the passed account\n        let resolverRef = getAccount(contractAddress)\n            .contracts.borrow<&{NonFungibleToken}>(name: contractName)\n            ?? panic(\"Could not borrow a reference to the non-fungible token contract\")\n\n        // Use that reference to retrieve the NFTCollectionData view \n        self.collectionData = resolverRef.resolveContractView(resourceType: nil, viewType: Type<MetadataViews.NFTCollectionData>()) as! MetadataViews.NFTCollectionData?\n            ?? panic(\"Could not resolve the NFTCollectionData view for the given non-fungible token contract\")\n\n\n        // borrow a reference to the signer's NFT collection\n        let withdrawRef = signer.storage.borrow<auth(NonFungibleToken.Withdraw) &{NonFungibleToken.Collection}>(\n                from: self.collectionData.storagePath\n            ) ?? panic(\"Account does not store a collection object at the specified path\")\n\n        self.tempNFT <- withdrawRef.withdraw(withdrawID: id)\n    }\n\n    execute {\n        // get the recipients public account object\n        let recipient = getAccount(to)\n\n        // borrow a public reference to the receivers collection\n        let receiverCap = recipient.capabilities.get<&{NonFungibleToken.Receiver}>(self.collectionData.publicPath)\n            ?? panic(\"Could not get the recipient's Receiver Capability\")\n\n        let receiverRef = receiverCap.borrow()\n            ?? panic(\"Could not borrow reference to the recipient's receiver\")\n\n        // Deposit the NFT to the receiver\n        receiverRef.deposit(token: <-self.tempNFT)\n    }\n}",
      "arguments": [
        {
          "type": "Address",
          "value": "0xe467b9dd11fa00df"
        },
        {
          "value": "10",
          "type": "UInt64"
        },
        {
          "value": "0xe467b9dd11fa00df",
          "type": "Address"
        },
        {
          "value": "TopShot",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import 0x1d7e57aa55817448\nimport 0x1d7e57aa55817448\n\n/// Can pass in any contract address and name\n/// This lets you choose the token you want to send because\n/// the transaction gets the metadata from the provided contract.\n///\ntransaction(to: Address, id: UInt64, contractAddress: Address, contractName: String) {\n\n    // The NFT resource to be transferred\n    let tempNFT: @{NonFungibleToken.NFT}\n\n    // NFTCollectionData struct to get paths from\n    let collectionData: MetadataViews.NFTCollectionData\n\n    prepare(signer: auth(BorrowValue) &Account) {\n\n        // Borrow a reference to the nft contract deployed to the passed account\n        let resolverRef = getAccount(contractAddress)\n            .contracts.borrow<&{NonFungibleToken}>(name: contractName)\n            ?? panic(\"Could not borrow a reference to the non-fungible token contract\")\n\n        // Use that reference to retrieve the NFTCollectionData view \n        self.collectionData = resolverRef.resolveContractView(resourceType: nil, viewType: Type<MetadataViews.NFTCollectionData>()) as! MetadataViews.NFTCollectionData?\n            ?? panic(\"Could not resolve the NFTCollectionData view for the given non-fungible token contract\")\n\n\n        // borrow a reference to the signer's NFT collection\n        let withdrawRef = signer.storage.borrow<auth(NonFungibleToken.Withdraw) &{NonFungibleToken.Collection}>(\n                from: self.collectionData.storagePath\n            ) ?? panic(\"Account does not store a collection object at the specified path\")\n\n        self.tempNFT <- withdrawRef.withdraw(withdrawID: id)\n    }\n\n    execute {\n        // get the recipients public account object\n        let recipient = getAccount(to)\n\n        // borrow a public reference to the receivers collection\n        let receiverCap = recipient.capabilities.get<&{NonFungibleToken.Receiver}>(self.collectionData.publicPath)\n            ?? panic(\"Could not get the recipient's Receiver Capability\")\n\n        let receiverRef = receiverCap.borrow()\n            ?? panic(\"Could not borrow reference to the recipient's receiver\")\n\n        // Deposit the NFT to the receiver\n        receiverRef.deposit(token: <-self.tempNFT)\n    }\n}",
      "arguments": [
        {
          "type": "Address",
          "value": "0xe467b9dd11fa00df"
        },
        {
          "value": "10",
          "type": "UInt64"
        },
        {
          "value": "0xe467b9dd11fa00df",
          "type": "Address"
        },
        {
          "value": "TopShot",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9096fb90887696d706f7274203078316437653537616135353831373434380a696d706f7274203078316437653537616135353831373434380a0a2f2f2f2043616e207061737320696e20616e7920636f6e7472616374206164647265737320616e64206e616d650a2f2f2f2054686973206c65747320796f752063686f6f73652074686520746f6b656e20796f752077616e7420746f2073656e6420626563617573650a2f2f2f20746865207472616e73616374696f6e206765747320746865206d657461646174612066726f6d207468652070726f766964656420636f6e74726163742e0a2f2f2f0a7472616e73616374696f6e28746f3a20416464726573732c2069643a2055496e7436342c20636f6e7472616374416464726573733a20416464726573732c20636f6e74726163744e616d653a20537472696e6729207b0a0a202020202f2f20546865204e4654207265736f7572636520746f206265207472616e736665727265640a202020206c65742074656d704e46543a20407b4e6f6e46756e6769626c65546f6b656e2e4e46547d0a0a202020202f2f204e4654436f6c6c656374696f6e446174612073747275637420746f206765742070617468732066726f6d0a202020206c657420636f6c6c656374696f6e446174613a204d6574616461746156696577732e4e4654436f6c6c656374696f6e446174610a0a2020202070726570617265287369676e65723a206175746828426f72726f7756616c75652920264163636f756e7429207b0a0a20202020202020202f2f20426f72726f772061207265666572656e636520746f20746865206e667420636f6e7472616374206465706c6f79656420746f2074686520706173736564206163636f756e740a20202020202020206c6574207265736f6c766572526566203d206765744163636f756e7428636f6e747261637441646472657373290a2020202020202020202020202e636f6e7472616374732e626f72726f773c267b4e6f6e46756e6769626c65546f6b656e7d3e286e616d653a20636f6e74726163744e616d65290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f20746865206e6f6e2d66756e6769626c6520746f6b656e20636f6e747261637422290a0a20202020202020202f2f205573652074686174207265666572656e636520746f20726574726965766520746865204e4654436f6c6c656374696f6e446174612076696577200a202020202020202073656c662e636f6c6c656374696f6e44617461203d207265736f6c7665725265662e7265736f6c7665436f6e747261637456696577287265736f75726365547970653a206e696c2c2076696577547970653a20547970653c4d6574616461746156696577732e4e4654436f6c6c656374696f6e446174613e28292920617321204d6574616461746156696577732e4e4654436f6c6c656374696f6e446174613f0a2020202020202020202020203f3f2070616e69632822436f756c64206e6f74207265736f6c766520746865204e4654436f6c6c656374696f6e44617461207669657720666f722074686520676976656e206e6f6e2d66756e6769626c6520746f6b656e20636f6e747261637422290a0a0a20202020202020202f2f20626f72726f772061207265666572656e636520746f20746865207369676e65722773204e465420636f6c6c656374696f6e0a20202020202020206c6574207769746864726177526566203d207369676e65722e73746f726167652e626f72726f773c61757468284e6f6e46756e6769626c65546f6b656e2e57697468647261772920267b4e6f6e46756e6769626c65546f6b656e2e436f6c6c656374696f6e7d3e280a2020202020202020202020202020202066726f6d3a2073656c662e636f6c6c656374696f6e446174612e73746f72616765506174680a20202020202020202020202029203f3f2070616e696328224163636f756e7420646f6573206e6f742073746f7265206120636f6c6c656374696f6e206f626a6563742061742074686520737065636966696564207061746822290a0a202020202020202073656c662e74656d704e4654203c2d2077697468647261775265662e776974686472617728776974686472617749443a206964290a202020207d0a0a2020202065786563757465207b0a20202020202020202f2f206765742074686520726563697069656e7473207075626c6963206163636f756e74206f626a6563740a20202020202020206c657420726563697069656e74203d206765744163636f756e7428746f290a0a20202020202020202f2f20626f72726f772061207075626c6963207265666572656e636520746f207468652072656365697665727320636f6c6c656374696f6e0a20202020202020206c6574207265636569766572436170203d20726563697069656e742e6361706162696c69746965732e6765743c267b4e6f6e46756e6769626c65546f6b656e2e52656365697665727d3e2873656c662e636f6c6c656374696f6e446174612e7075626c696350617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f74206765742074686520726563697069656e742773205265636569766572204361706162696c69747922290a0a20202020202020206c6574207265636569766572526566203d2072656365697665724361702e626f72726f7728290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f77207265666572656e636520746f2074686520726563697069656e74277320726563656976657222290a0a20202020202020202f2f204465706f73697420746865204e465420746f207468652072656365697665720a202020202020202072656365697665725265662e6465706f73697428746f6b656e3a203c2d73656c662e74656d704e4654290a202020207d0a7df8a3af7b2274797065223a2241646472657373222c2276616c7565223a22307865343637623964643131666130306466227d9e7b2276616c7565223a223130222c2274797065223a2255496e743634227daf7b2276616c7565223a22307865343637623964643131666130306466222c2274797065223a2241646472657373227da37b2276616c7565223a22546f7053686f74222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90973f9096fb90887696d706f7274203078316437653537616135353831373434380a696d706f7274203078316437653537616135353831373434380a0a2f2f2f2043616e207061737320696e20616e7920636f6e7472616374206164647265737320616e64206e616d650a2f2f2f2054686973206c65747320796f752063686f6f73652074686520746f6b656e20796f752077616e7420746f2073656e6420626563617573650a2f2f2f20746865207472616e73616374696f6e206765747320746865206d657461646174612066726f6d207468652070726f766964656420636f6e74726163742e0a2f2f2f0a7472616e73616374696f6e28746f3a20416464726573732c2069643a2055496e7436342c20636f6e7472616374416464726573733a20416464726573732c20636f6e74726163744e616d653a20537472696e6729207b0a0a202020202f2f20546865204e4654207265736f7572636520746f206265207472616e736665727265640a202020206c65742074656d704e46543a20407b4e6f6e46756e6769626c65546f6b656e2e4e46547d0a0a202020202f2f204e4654436f6c6c656374696f6e446174612073747275637420746f206765742070617468732066726f6d0a202020206c657420636f6c6c656374696f6e446174613a204d6574616461746156696577732e4e4654436f6c6c656374696f6e446174610a0a2020202070726570617265287369676e65723a206175746828426f72726f7756616c75652920264163636f756e7429207b0a0a20202020202020202f2f20426f72726f772061207265666572656e636520746f20746865206e667420636f6e7472616374206465706c6f79656420746f2074686520706173736564206163636f756e740a20202020202020206c6574207265736f6c766572526566203d206765744163636f756e7428636f6e747261637441646472657373290a2020202020202020202020202e636f6e7472616374732e626f72726f773c267b4e6f6e46756e6769626c65546f6b656e7d3e286e616d653a20636f6e74726163744e616d65290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f20746865206e6f6e2d66756e6769626c6520746f6b656e20636f6e747261637422290a0a20202020202020202f2f205573652074686174207265666572656e636520746f20726574726965766520746865204e4654436f6c6c656374696f6e446174612076696577200a202020202020202073656c662e636f6c6c656374696f6e44617461203d207265736f6c7665725265662e7265736f6c7665436f6e747261637456696577287265736f75726365547970653a206e696c2c2076696577547970653a20547970653c4d6574616461746156696577732e4e4654436f6c6c656374696f6e446174613e28292920617321204d6574616461746156696577732e4e4654436f6c6c656374696f6e446174613f0a2020202020202020202020203f3f2070616e69632822436f756c64206e6f74207265736f6c766520746865204e4654436f6c6c656374696f6e44617461207669657720666f722074686520676976656e206e6f6e2d66756e6769626c6520746f6b656e20636f6e747261637422290a0a0a20202020202020202f2f20626f72726f772061207265666572656e636520746f20746865207369676e65722773204e465420636f6c6c656374696f6e0a20202020202020206c6574207769746864726177526566203d207369676e65722e73746f726167652e626f72726f773c61757468284e6f6e46756e6769626c65546f6b656e2e57697468647261772920267b4e6f6e46756e6769626c65546f6b656e2e436f6c6c656374696f6e7d3e280a2020202020202020202020202020202066726f6d3a2073656c662e636f6c6c656374696f6e446174612e73746f72616765506174680a20202020202020202020202029203f3f2070616e696328224163636f756e7420646f6573206e6f742073746f7265206120636f6c6c656374696f6e206f626a6563742061742074686520737065636966696564207061746822290a0a202020202020202073656c662e74656d704e4654203c2d2077697468647261775265662e776974686472617728776974686472617749443a206964290a202020207d0a0a2020202065786563757465207b0a20202020202020202f2f206765742074686520726563697069656e7473207075626c6963206163636f756e74206f626a6563740a20202020202020206c657420726563697069656e74203d206765744163636f756e7428746f290a0a20202020202020202f2f20626f72726f772061207075626c6963207265666572656e636520746f207468652072656365697665727320636f6c6c656374696f6e0a20202020202020206c6574207265636569766572436170203d20726563697069656e742e6361706162696c69746965732e6765743c267b4e6f6e46756e6769626c65546f6b656e2e52656365697665727d3e2873656c662e636f6c6c656374696f6e446174612e7075626c696350617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f74206765742074686520726563697069656e742773205265636569766572204361706162696c69747922290a0a20202020202020206c6574207265636569766572526566203d2072656365697665724361702e626f72726f7728290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f77207265666572656e636520746f2074686520726563697069656e74277320726563656976657222290a0a20202020202020202f2f204465706f73697420746865204e465420746f207468652072656365697665720a202020202020202072656365697665725265662e6465706f73697428746f6b656e3a203c2d73656c662e74656d704e4654290a202020207d0a7df8a3af7b2274797065223a2241646472657373222c2276616c7565223a22307865343637623964643131666130306466227d9e7b2276616c7565223a223130222c2274797065223a2255496e743634227daf7b2276616c7565223a22307865343637623964643131666130306466222c2274797065223a2241646472657373227da37b2276616c7565223a22546f7053686f74222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02b7892b30d7a68531db8af3aa73eec7bf899bd039bc9883c4d0270e44c78cec30111142945f27d91bf3be630737805eba25d586b0c292bb3818e5d4cf4287e31c5472616e73666572204e465420776974682041646472657373000401526563697069656e740000416464726573730003014e465420494420746f205472616e73666572000155496e7436340003014e465420436f6e747261637420416464726573730002416464726573730003044e465420436f6e7472616374204e616d650003",
    "hash": "111142945f27d91bf3be630737805eba25d586b0c292bb3818e5d4cf4287e31c"
  },
  {
    "title": "TH.01 - Withdraw Unlocked FLOW",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FungibleToken from 0xf233dcee88fe0abe\nimport FlowToken from 0x1654653399040a61\nimport LockedTokens from 0x8d0e87b65159ae63\n\ntransaction(amount: UFix64) {\n\n    let holderRef: auth(LockedTokens.TokenOperations, FungibleToken.Withdraw) &LockedTokens.TokenHolder\n    let vaultRef: auth(FungibleToken.Withdraw) &FlowToken.Vault\n\n    prepare(acct: auth(BorrowValue) &Account) {\n        self.holderRef = acct.storage.borrow<auth(LockedTokens.TokenOperations, FungibleToken.Withdraw) &LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"The primary user account does not have an associated locked account\")\n\n        self.vaultRef = acct.storage.borrow<auth(FungibleToken.Withdraw) &FlowToken.Vault>(from: /storage/flowTokenVault)\n            ?? panic(\"Could not borrow flow token vault ref\")\n    }\n\n    execute {\n        self.vaultRef.deposit(from: <-self.holderRef.withdraw(amount: amount))\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FungibleToken from 0xf233dcee88fe0abe\nimport FlowToken from 0x1654653399040a61\nimport LockedTokens from 0x8d0e87b65159ae63\n\ntransaction(amount: UFix64) {\n\n    let holderRef: auth(LockedTokens.TokenOperations, FungibleToken.Withdraw) &LockedTokens.TokenHolder\n    let vaultRef: auth(FungibleToken.Withdraw) &FlowToken.Vault\n\n    prepare(acct: auth(BorrowValue) &Account) {\n        self.holderRef = acct.storage.borrow<auth(LockedTokens.TokenOperations, FungibleToken.Withdraw) &LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"The primary user account does not have an associated locked account\")\n\n        self.vaultRef = acct.storage.borrow<auth(FungibleToken.Withdraw) &FlowToken.Vault>(from: /storage/flowTokenVault)\n            ?? panic(\"Could not borrow flow token vault ref\")\n    }\n\n    execute {\n        self.vaultRef.deposit(from: <-self.holderRef.withdraw(amount: amount))\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9041fb903aa696d706f72742046756e6769626c65546f6b656e2066726f6d203078663233336463656538386665306162650a696d706f727420466c6f77546f6b656e2066726f6d203078313635343635333339393034306136310a696d706f7274204c6f636b6564546f6b656e732066726f6d203078386430653837623635313539616536330a0a7472616e73616374696f6e28616d6f756e743a2055466978363429207b0a0a202020206c657420686f6c6465725265663a2061757468284c6f636b6564546f6b656e732e546f6b656e4f7065726174696f6e732c2046756e6769626c65546f6b656e2e57697468647261772920264c6f636b6564546f6b656e732e546f6b656e486f6c6465720a202020206c6574207661756c745265663a20617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c740a0a202020207072657061726528616363743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e686f6c646572526566203d20616363742e73746f726167652e626f72726f773c61757468284c6f636b6564546f6b656e732e546f6b656e4f7065726174696f6e732c2046756e6769626c65546f6b656e2e57697468647261772920264c6f636b6564546f6b656e732e546f6b656e486f6c6465723e2866726f6d3a204c6f636b6564546f6b656e732e546f6b656e486f6c64657253746f7261676550617468290a2020202020202020202020203f3f2070616e69632822546865207072696d6172792075736572206163636f756e7420646f6573206e6f74206861766520616e206173736f636961746564206c6f636b6564206163636f756e7422290a0a202020202020202073656c662e7661756c74526566203d20616363742e73746f726167652e626f72726f773c617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c743e2866726f6d3a202f73746f726167652f666c6f77546f6b656e5661756c74290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f7720666c6f7720746f6b656e207661756c742072656622290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7661756c745265662e6465706f7369742866726f6d3a203c2d73656c662e686f6c6465725265662e776974686472617728616d6f756e743a20616d6f756e7429290a202020207d0a7d0af1b07b2274797065223a22554669783634222c2276616c7565223a2239323233333732303336382e3534373735383038227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90423f9041fb903aa696d706f72742046756e6769626c65546f6b656e2066726f6d203078663233336463656538386665306162650a696d706f727420466c6f77546f6b656e2066726f6d203078313635343635333339393034306136310a696d706f7274204c6f636b6564546f6b656e732066726f6d203078386430653837623635313539616536330a0a7472616e73616374696f6e28616d6f756e743a2055466978363429207b0a0a202020206c657420686f6c6465725265663a2061757468284c6f636b6564546f6b656e732e546f6b656e4f7065726174696f6e732c2046756e6769626c65546f6b656e2e57697468647261772920264c6f636b6564546f6b656e732e546f6b656e486f6c6465720a202020206c6574207661756c745265663a20617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c740a0a202020207072657061726528616363743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e686f6c646572526566203d20616363742e73746f726167652e626f72726f773c61757468284c6f636b6564546f6b656e732e546f6b656e4f7065726174696f6e732c2046756e6769626c65546f6b656e2e57697468647261772920264c6f636b6564546f6b656e732e546f6b656e486f6c6465723e2866726f6d3a204c6f636b6564546f6b656e732e546f6b656e486f6c64657253746f7261676550617468290a2020202020202020202020203f3f2070616e69632822546865207072696d6172792075736572206163636f756e7420646f6573206e6f74206861766520616e206173736f636961746564206c6f636b6564206163636f756e7422290a0a202020202020202073656c662e7661756c74526566203d20616363742e73746f726167652e626f72726f773c617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c743e2866726f6d3a202f73746f726167652f666c6f77546f6b656e5661756c74290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f7720666c6f7720746f6b656e207661756c742072656622290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7661756c745265662e6465706f7369742866726f6d3a203c2d73656c662e686f6c6465725265662e776974686472617728616d6f756e743a20616d6f756e7429290a202020207d0a7d0af1b07b2274797065223a22554669783634222c2276616c7565223a2239323233333732303336382e3534373735383038227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02094798e93daeacaa9ff262486a3683ec5a5e2204407e7d00bc3416fbf3efa3b14a830e6f93f74179a99e17c7ae762980c7fdc428bc949767529be2f071ac52b9576974686472617720556e6c6f636b656420464c4f57000101416d6f756e7400005546697836340003",
    "hash": "4a830e6f93f74179a99e17c7ae762980c7fdc428bc949767529be2f071ac52b9"
  },
  {
    "title": "TH.02 - Deposit Unlocked FLOW",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FungibleToken from 0xf233dcee88fe0abe\nimport FlowToken from 0x1654653399040a61\nimport LockedTokens from 0x8d0e87b65159ae63\n\ntransaction(amount: UFix64) {\n\n    let holderRef: &LockedTokens.TokenHolder\n    let vaultRef: auth(FungibleToken.Withdraw) &FlowToken.Vault\n\n    prepare(acct: auth(BorrowValue) &Account) {\n        self.holderRef = acct.storage.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"The primary user account does not have an associated locked account\")\n\n        self.vaultRef = acct.storage.borrow<auth(FungibleToken.Withdraw) &FlowToken.Vault>(from: /storage/flowTokenVault)\n            ?? panic(\"Could not borrow flow token vault ref\")\n    }\n\n    execute {\n        self.holderRef.deposit(from: <-self.vaultRef.withdraw(amount: amount))\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FungibleToken from 0xf233dcee88fe0abe\nimport FlowToken from 0x1654653399040a61\nimport LockedTokens from 0x8d0e87b65159ae63\n\ntransaction(amount: UFix64) {\n\n    let holderRef: &LockedTokens.TokenHolder\n    let vaultRef: auth(FungibleToken.Withdraw) &FlowToken.Vault\n\n    prepare(acct: auth(BorrowValue) &Account) {\n        self.holderRef = acct.storage.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"The primary user account does not have an associated locked account\")\n\n        self.vaultRef = acct.storage.borrow<auth(FungibleToken.Withdraw) &FlowToken.Vault>(from: /storage/flowTokenVault)\n            ?? panic(\"Could not borrow flow token vault ref\")\n    }\n\n    execute {\n        self.holderRef.deposit(from: <-self.vaultRef.withdraw(amount: amount))\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f903a9b90334696d706f72742046756e6769626c65546f6b656e2066726f6d203078663233336463656538386665306162650a696d706f727420466c6f77546f6b656e2066726f6d203078313635343635333339393034306136310a696d706f7274204c6f636b6564546f6b656e732066726f6d203078386430653837623635313539616536330a0a7472616e73616374696f6e28616d6f756e743a2055466978363429207b0a0a202020206c657420686f6c6465725265663a20264c6f636b6564546f6b656e732e546f6b656e486f6c6465720a202020206c6574207661756c745265663a20617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c740a0a202020207072657061726528616363743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e686f6c646572526566203d20616363742e73746f726167652e626f72726f773c264c6f636b6564546f6b656e732e546f6b656e486f6c6465723e2866726f6d3a204c6f636b6564546f6b656e732e546f6b656e486f6c64657253746f7261676550617468290a2020202020202020202020203f3f2070616e69632822546865207072696d6172792075736572206163636f756e7420646f6573206e6f74206861766520616e206173736f636961746564206c6f636b6564206163636f756e7422290a0a202020202020202073656c662e7661756c74526566203d20616363742e73746f726167652e626f72726f773c617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c743e2866726f6d3a202f73746f726167652f666c6f77546f6b656e5661756c74290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f7720666c6f7720746f6b656e207661756c742072656622290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e686f6c6465725265662e6465706f7369742866726f6d3a203c2d73656c662e7661756c745265662e776974686472617728616d6f756e743a20616d6f756e7429290a202020207d0a7d0af1b07b2274797065223a22554669783634222c2276616c7565223a2239323233333732303336382e3534373735383038227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f903adf903a9b90334696d706f72742046756e6769626c65546f6b656e2066726f6d203078663233336463656538386665306162650a696d706f727420466c6f77546f6b656e2066726f6d203078313635343635333339393034306136310a696d706f7274204c6f636b6564546f6b656e732066726f6d203078386430653837623635313539616536330a0a7472616e73616374696f6e28616d6f756e743a2055466978363429207b0a0a202020206c657420686f6c6465725265663a20264c6f636b6564546f6b656e732e546f6b656e486f6c6465720a202020206c6574207661756c745265663a20617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c740a0a202020207072657061726528616363743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e686f6c646572526566203d20616363742e73746f726167652e626f72726f773c264c6f636b6564546f6b656e732e546f6b656e486f6c6465723e2866726f6d3a204c6f636b6564546f6b656e732e546f6b656e486f6c64657253746f7261676550617468290a2020202020202020202020203f3f2070616e69632822546865207072696d6172792075736572206163636f756e7420646f6573206e6f74206861766520616e206173736f636961746564206c6f636b6564206163636f756e7422290a0a202020202020202073656c662e7661756c74526566203d20616363742e73746f726167652e626f72726f773c617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c743e2866726f6d3a202f73746f726167652f666c6f77546f6b656e5661756c74290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f7720666c6f7720746f6b656e207661756c742072656622290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e686f6c6465725265662e6465706f7369742866726f6d3a203c2d73656c662e7661756c745265662e776974686472617728616d6f756e743a20616d6f756e7429290a202020207d0a7d0af1b07b2274797065223a22554669783634222c2276616c7565223a2239323233333732303336382e3534373735383038227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "0217ffcd60667893674d8d4044bdd8232959dc8b694df1dd88d1b9c5443352f253038382a947fa96bf2f4dfe5aa9b4b2abee1ef0975955175e80cf911c3edf4b614465706f73697420556e6c6f636b656420464c4f57000101416d6f756e7400005546697836340003",
    "hash": "038382a947fa96bf2f4dfe5aa9b4b2abee1ef0975955175e80cf911c3edf4b61"
  },
  {
    "title": "SCO.01 - Setup Staking Collection",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FungibleToken from 0xf233dcee88fe0abe\nimport FlowToken from 0x1654653399040a61\nimport FlowIDTableStaking from 0x8624b52f9ddcd04a\nimport LockedTokens from 0x8d0e87b65159ae63\nimport FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// This transaction sets up an account to use a staking collection\n/// It will work regardless of whether they have a regular account, a two-account locked tokens setup,\n/// or staking objects stored in the unlocked account\n\ntransaction {\n    prepare(signer: auth(BorrowValue, Storage, Capabilities) &Account) {\n\n        // If there isn't already a staking collection\n        if signer.storage.borrow<&FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath) == nil {\n\n            // Create private capabilities for the token holder and unlocked vault\n            let lockedHolder = signer.capabilities.storage.issue<auth(FungibleToken.Withdraw, LockedTokens.TokenOperations) &LockedTokens.TokenHolder>(LockedTokens.TokenHolderStoragePath)!\n            let flowToken = signer.capabilities.storage.issue<auth(FungibleToken.Withdraw) &FlowToken.Vault>(/storage/flowTokenVault)!\n\n            // Create a new Staking Collection and put it in storage\n            if lockedHolder.check() {\n                signer.storage.save(\n                    <- FlowStakingCollection.createStakingCollection(\n                        unlockedVault: flowToken,\n                        tokenHolder: lockedHolder\n                    ),\n                    to: FlowStakingCollection.StakingCollectionStoragePath\n                )\n            } else {\n                signer.storage.save(\n                    <- FlowStakingCollection.createStakingCollection(\n                        unlockedVault: flowToken,\n                        tokenHolder: nil\n                    ),\n                    to: FlowStakingCollection.StakingCollectionStoragePath\n                )\n            }\n\n            // Publish a capability to the created staking collection.\n            let stakingCollectionCap = signer.capabilities.storage.issue<&FlowStakingCollection.StakingCollection>(\n                FlowStakingCollection.StakingCollectionStoragePath\n            )\n\n            signer.capabilities.publish(\n                stakingCollectionCap,\n                at: FlowStakingCollection.StakingCollectionPublicPath\n            )\n        }\n\n        // borrow a reference to the staking collection\n        let collectionRef = signer.storage.borrow<&FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow staking collection reference\")\n\n        // If there is a node staker object in the account, put it in the staking collection\n        if signer.storage.borrow<&FlowIDTableStaking.NodeStaker>(from: FlowIDTableStaking.NodeStakerStoragePath) != nil {\n            let node <- signer.storage.load<@FlowIDTableStaking.NodeStaker>(from: FlowIDTableStaking.NodeStakerStoragePath)!\n            collectionRef.addNodeObject(<-node, machineAccountInfo: nil)\n        }\n\n        // If there is a delegator object in the account, put it in the staking collection\n        if signer.storage.borrow<&FlowIDTableStaking.NodeDelegator>(from: FlowIDTableStaking.DelegatorStoragePath) != nil {\n            let delegator <- signer.storage.load<@FlowIDTableStaking.NodeDelegator>(from: FlowIDTableStaking.DelegatorStoragePath)!\n            collectionRef.addDelegatorObject(<-delegator)\n        }\n    }\n}\n",
      "arguments": [],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FungibleToken from 0xf233dcee88fe0abe\nimport FlowToken from 0x1654653399040a61\nimport FlowIDTableStaking from 0x8624b52f9ddcd04a\nimport LockedTokens from 0x8d0e87b65159ae63\nimport FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// This transaction sets up an account to use a staking collection\n/// It will work regardless of whether they have a regular account, a two-account locked tokens setup,\n/// or staking objects stored in the unlocked account\n\ntransaction {\n    prepare(signer: auth(BorrowValue, Storage, Capabilities) &Account) {\n\n        // If there isn't already a staking collection\n        if signer.storage.borrow<&FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath) == nil {\n\n            // Create private capabilities for the token holder and unlocked vault\n            let lockedHolder = signer.capabilities.storage.issue<auth(FungibleToken.Withdraw, LockedTokens.TokenOperations) &LockedTokens.TokenHolder>(LockedTokens.TokenHolderStoragePath)!\n            let flowToken = signer.capabilities.storage.issue<auth(FungibleToken.Withdraw) &FlowToken.Vault>(/storage/flowTokenVault)!\n\n            // Create a new Staking Collection and put it in storage\n            if lockedHolder.check() {\n                signer.storage.save(\n                    <- FlowStakingCollection.createStakingCollection(\n                        unlockedVault: flowToken,\n                        tokenHolder: lockedHolder\n                    ),\n                    to: FlowStakingCollection.StakingCollectionStoragePath\n                )\n            } else {\n                signer.storage.save(\n                    <- FlowStakingCollection.createStakingCollection(\n                        unlockedVault: flowToken,\n                        tokenHolder: nil\n                    ),\n                    to: FlowStakingCollection.StakingCollectionStoragePath\n                )\n            }\n\n            // Publish a capability to the created staking collection.\n            let stakingCollectionCap = signer.capabilities.storage.issue<&FlowStakingCollection.StakingCollection>(\n                FlowStakingCollection.StakingCollectionStoragePath\n            )\n\n            signer.capabilities.publish(\n                stakingCollectionCap,\n                at: FlowStakingCollection.StakingCollectionPublicPath\n            )\n        }\n\n        // borrow a reference to the staking collection\n        let collectionRef = signer.storage.borrow<&FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow staking collection reference\")\n\n        // If there is a node staker object in the account, put it in the staking collection\n        if signer.storage.borrow<&FlowIDTableStaking.NodeStaker>(from: FlowIDTableStaking.NodeStakerStoragePath) != nil {\n            let node <- signer.storage.load<@FlowIDTableStaking.NodeStaker>(from: FlowIDTableStaking.NodeStakerStoragePath)!\n            collectionRef.addNodeObject(<-node, machineAccountInfo: nil)\n        }\n\n        // If there is a delegator object in the account, put it in the staking collection\n        if signer.storage.borrow<&FlowIDTableStaking.NodeDelegator>(from: FlowIDTableStaking.DelegatorStoragePath) != nil {\n            let delegator <- signer.storage.load<@FlowIDTableStaking.NodeDelegator>(from: FlowIDTableStaking.DelegatorStoragePath)!\n            collectionRef.addDelegatorObject(<-delegator)\n        }\n    }\n}\n",
      "arguments": [],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90df1b90dad696d706f72742046756e6769626c65546f6b656e2066726f6d203078663233336463656538386665306162650a696d706f727420466c6f77546f6b656e2066726f6d203078313635343635333339393034306136310a696d706f727420466c6f7749445461626c655374616b696e672066726f6d203078383632346235326639646463643034610a696d706f7274204c6f636b6564546f6b656e732066726f6d203078386430653837623635313539616536330a696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f2054686973207472616e73616374696f6e207365747320757020616e206163636f756e7420746f207573652061207374616b696e6720636f6c6c656374696f6e0a2f2f2f2049742077696c6c20776f726b207265676172646c657373206f66207768657468657220746865792068617665206120726567756c6172206163636f756e742c20612074776f2d6163636f756e74206c6f636b656420746f6b656e732073657475702c0a2f2f2f206f72207374616b696e67206f626a656374732073746f72656420696e2074686520756e6c6f636b6564206163636f756e740a0a7472616e73616374696f6e207b0a2020202070726570617265287369676e65723a206175746828426f72726f7756616c75652c2053746f726167652c204361706162696c69746965732920264163636f756e7429207b0a0a20202020202020202f2f2049662074686572652069736e277420616c72656164792061207374616b696e6720636f6c6c656374696f6e0a20202020202020206966207369676e65722e73746f726167652e626f72726f773c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f726167655061746829203d3d206e696c207b0a0a2020202020202020202020202f2f204372656174652070726976617465206361706162696c697469657320666f722074686520746f6b656e20686f6c64657220616e6420756e6c6f636b6564207661756c740a2020202020202020202020206c6574206c6f636b6564486f6c646572203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c617574682846756e6769626c65546f6b656e2e57697468647261772c204c6f636b6564546f6b656e732e546f6b656e4f7065726174696f6e732920264c6f636b6564546f6b656e732e546f6b656e486f6c6465723e284c6f636b6564546f6b656e732e546f6b656e486f6c64657253746f726167655061746829210a2020202020202020202020206c657420666c6f77546f6b656e203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c743e282f73746f726167652f666c6f77546f6b656e5661756c7429210a0a2020202020202020202020202f2f204372656174652061206e6577205374616b696e6720436f6c6c656374696f6e20616e642070757420697420696e2073746f726167650a2020202020202020202020206966206c6f636b6564486f6c6465722e636865636b2829207b0a202020202020202020202020202020207369676e65722e73746f726167652e73617665280a20202020202020202020202020202020202020203c2d20466c6f775374616b696e67436f6c6c656374696f6e2e6372656174655374616b696e67436f6c6c656374696f6e280a202020202020202020202020202020202020202020202020756e6c6f636b65645661756c743a20666c6f77546f6b656e2c0a202020202020202020202020202020202020202020202020746f6b656e486f6c6465723a206c6f636b6564486f6c6465720a2020202020202020202020202020202020202020292c0a2020202020202020202020202020202020202020746f3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f72616765506174680a20202020202020202020202020202020290a2020202020202020202020207d20656c7365207b0a202020202020202020202020202020207369676e65722e73746f726167652e73617665280a20202020202020202020202020202020202020203c2d20466c6f775374616b696e67436f6c6c656374696f6e2e6372656174655374616b696e67436f6c6c656374696f6e280a202020202020202020202020202020202020202020202020756e6c6f636b65645661756c743a20666c6f77546f6b656e2c0a202020202020202020202020202020202020202020202020746f6b656e486f6c6465723a206e696c0a2020202020202020202020202020202020202020292c0a2020202020202020202020202020202020202020746f3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f72616765506174680a20202020202020202020202020202020290a2020202020202020202020207d0a0a2020202020202020202020202f2f205075626c6973682061206361706162696c69747920746f207468652063726561746564207374616b696e6720636f6c6c656374696f6e2e0a2020202020202020202020206c6574207374616b696e67436f6c6c656374696f6e436170203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e280a20202020202020202020202020202020466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f72616765506174680a202020202020202020202020290a0a2020202020202020202020207369676e65722e6361706162696c69746965732e7075626c697368280a202020202020202020202020202020207374616b696e67436f6c6c656374696f6e4361702c0a2020202020202020202020202020202061743a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e5075626c6963506174680a202020202020202020202020290a20202020202020207d0a0a20202020202020202f2f20626f72726f772061207265666572656e636520746f20746865207374616b696e6720636f6c6c656374696f6e0a20202020202020206c657420636f6c6c656374696f6e526566203d207369676e65722e73746f726167652e626f72726f773c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f77207374616b696e6720636f6c6c656374696f6e207265666572656e636522290a0a20202020202020202f2f2049662074686572652069732061206e6f6465207374616b6572206f626a65637420696e20746865206163636f756e742c2070757420697420696e20746865207374616b696e6720636f6c6c656374696f6e0a20202020202020206966207369676e65722e73746f726167652e626f72726f773c26466c6f7749445461626c655374616b696e672e4e6f64655374616b65723e2866726f6d3a20466c6f7749445461626c655374616b696e672e4e6f64655374616b657253746f72616765506174682920213d206e696c207b0a2020202020202020202020206c6574206e6f6465203c2d207369676e65722e73746f726167652e6c6f61643c40466c6f7749445461626c655374616b696e672e4e6f64655374616b65723e2866726f6d3a20466c6f7749445461626c655374616b696e672e4e6f64655374616b657253746f726167655061746829210a202020202020202020202020636f6c6c656374696f6e5265662e6164644e6f64654f626a656374283c2d6e6f64652c206d616368696e654163636f756e74496e666f3a206e696c290a20202020202020207d0a0a20202020202020202f2f20496620746865726520697320612064656c656761746f72206f626a65637420696e20746865206163636f756e742c2070757420697420696e20746865207374616b696e6720636f6c6c656374696f6e0a20202020202020206966207369676e65722e73746f726167652e626f72726f773c26466c6f7749445461626c655374616b696e672e4e6f646544656c656761746f723e2866726f6d3a20466c6f7749445461626c655374616b696e672e44656c656761746f7253746f72616765506174682920213d206e696c207b0a2020202020202020202020206c65742064656c656761746f72203c2d207369676e65722e73746f726167652e6c6f61643c40466c6f7749445461626c655374616b696e672e4e6f646544656c656761746f723e2866726f6d3a20466c6f7749445461626c655374616b696e672e44656c656761746f7253746f726167655061746829210a202020202020202020202020636f6c6c656374696f6e5265662e61646444656c656761746f724f626a656374283c2d64656c656761746f72290a20202020202020207d0a202020207d0a7d0ac0a0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90df5f90df1b90dad696d706f72742046756e6769626c65546f6b656e2066726f6d203078663233336463656538386665306162650a696d706f727420466c6f77546f6b656e2066726f6d203078313635343635333339393034306136310a696d706f727420466c6f7749445461626c655374616b696e672066726f6d203078383632346235326639646463643034610a696d706f7274204c6f636b6564546f6b656e732066726f6d203078386430653837623635313539616536330a696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f2054686973207472616e73616374696f6e207365747320757020616e206163636f756e7420746f207573652061207374616b696e6720636f6c6c656374696f6e0a2f2f2f2049742077696c6c20776f726b207265676172646c657373206f66207768657468657220746865792068617665206120726567756c6172206163636f756e742c20612074776f2d6163636f756e74206c6f636b656420746f6b656e732073657475702c0a2f2f2f206f72207374616b696e67206f626a656374732073746f72656420696e2074686520756e6c6f636b6564206163636f756e740a0a7472616e73616374696f6e207b0a2020202070726570617265287369676e65723a206175746828426f72726f7756616c75652c2053746f726167652c204361706162696c69746965732920264163636f756e7429207b0a0a20202020202020202f2f2049662074686572652069736e277420616c72656164792061207374616b696e6720636f6c6c656374696f6e0a20202020202020206966207369676e65722e73746f726167652e626f72726f773c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f726167655061746829203d3d206e696c207b0a0a2020202020202020202020202f2f204372656174652070726976617465206361706162696c697469657320666f722074686520746f6b656e20686f6c64657220616e6420756e6c6f636b6564207661756c740a2020202020202020202020206c6574206c6f636b6564486f6c646572203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c617574682846756e6769626c65546f6b656e2e57697468647261772c204c6f636b6564546f6b656e732e546f6b656e4f7065726174696f6e732920264c6f636b6564546f6b656e732e546f6b656e486f6c6465723e284c6f636b6564546f6b656e732e546f6b656e486f6c64657253746f726167655061746829210a2020202020202020202020206c657420666c6f77546f6b656e203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c743e282f73746f726167652f666c6f77546f6b656e5661756c7429210a0a2020202020202020202020202f2f204372656174652061206e6577205374616b696e6720436f6c6c656374696f6e20616e642070757420697420696e2073746f726167650a2020202020202020202020206966206c6f636b6564486f6c6465722e636865636b2829207b0a202020202020202020202020202020207369676e65722e73746f726167652e73617665280a20202020202020202020202020202020202020203c2d20466c6f775374616b696e67436f6c6c656374696f6e2e6372656174655374616b696e67436f6c6c656374696f6e280a202020202020202020202020202020202020202020202020756e6c6f636b65645661756c743a20666c6f77546f6b656e2c0a202020202020202020202020202020202020202020202020746f6b656e486f6c6465723a206c6f636b6564486f6c6465720a2020202020202020202020202020202020202020292c0a2020202020202020202020202020202020202020746f3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f72616765506174680a20202020202020202020202020202020290a2020202020202020202020207d20656c7365207b0a202020202020202020202020202020207369676e65722e73746f726167652e73617665280a20202020202020202020202020202020202020203c2d20466c6f775374616b696e67436f6c6c656374696f6e2e6372656174655374616b696e67436f6c6c656374696f6e280a202020202020202020202020202020202020202020202020756e6c6f636b65645661756c743a20666c6f77546f6b656e2c0a202020202020202020202020202020202020202020202020746f6b656e486f6c6465723a206e696c0a2020202020202020202020202020202020202020292c0a2020202020202020202020202020202020202020746f3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f72616765506174680a20202020202020202020202020202020290a2020202020202020202020207d0a0a2020202020202020202020202f2f205075626c6973682061206361706162696c69747920746f207468652063726561746564207374616b696e6720636f6c6c656374696f6e2e0a2020202020202020202020206c6574207374616b696e67436f6c6c656374696f6e436170203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e280a20202020202020202020202020202020466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f72616765506174680a202020202020202020202020290a0a2020202020202020202020207369676e65722e6361706162696c69746965732e7075626c697368280a202020202020202020202020202020207374616b696e67436f6c6c656374696f6e4361702c0a2020202020202020202020202020202061743a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e5075626c6963506174680a202020202020202020202020290a20202020202020207d0a0a20202020202020202f2f20626f72726f772061207265666572656e636520746f20746865207374616b696e6720636f6c6c656374696f6e0a20202020202020206c657420636f6c6c656374696f6e526566203d207369676e65722e73746f726167652e626f72726f773c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f77207374616b696e6720636f6c6c656374696f6e207265666572656e636522290a0a20202020202020202f2f2049662074686572652069732061206e6f6465207374616b6572206f626a65637420696e20746865206163636f756e742c2070757420697420696e20746865207374616b696e6720636f6c6c656374696f6e0a20202020202020206966207369676e65722e73746f726167652e626f72726f773c26466c6f7749445461626c655374616b696e672e4e6f64655374616b65723e2866726f6d3a20466c6f7749445461626c655374616b696e672e4e6f64655374616b657253746f72616765506174682920213d206e696c207b0a2020202020202020202020206c6574206e6f6465203c2d207369676e65722e73746f726167652e6c6f61643c40466c6f7749445461626c655374616b696e672e4e6f64655374616b65723e2866726f6d3a20466c6f7749445461626c655374616b696e672e4e6f64655374616b657253746f726167655061746829210a202020202020202020202020636f6c6c656374696f6e5265662e6164644e6f64654f626a656374283c2d6e6f64652c206d616368696e654163636f756e74496e666f3a206e696c290a20202020202020207d0a0a20202020202020202f2f20496620746865726520697320612064656c656761746f72206f626a65637420696e20746865206163636f756e742c2070757420697420696e20746865207374616b696e6720636f6c6c656374696f6e0a20202020202020206966207369676e65722e73746f726167652e626f72726f773c26466c6f7749445461626c655374616b696e672e4e6f646544656c656761746f723e2866726f6d3a20466c6f7749445461626c655374616b696e672e44656c656761746f7253746f72616765506174682920213d206e696c207b0a2020202020202020202020206c65742064656c656761746f72203c2d207369676e65722e73746f726167652e6c6f61643c40466c6f7749445461626c655374616b696e672e4e6f646544656c656761746f723e2866726f6d3a20466c6f7749445461626c655374616b696e672e44656c656761746f7253746f726167655061746829210a202020202020202020202020636f6c6c656374696f6e5265662e61646444656c656761746f724f626a656374283c2d64656c656761746f72290a20202020202020207d0a202020207d0a7d0ac0a0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02861784e7ac135a9cfec90decdff2e53971a4d63135db77bcef3b273b710b181469f30decc15bd78107c631e200963398e8ddbc58bb61e577d223725f348fc2d95365747570205374616b696e6720436f6c6c656374696f6e0000",
    "hash": "69f30decc15bd78107c631e200963398e8ddbc58bb61e577d223725f348fc2d9"
  },
  {
    "title": "SCO.02 - Register Delegator",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Registers a delegator in the staking collection resource\n/// for the specified nodeID and the amount of tokens to commit\n\ntransaction(id: String, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.registerDelegator(nodeID: id, amount: amount)      \n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Registers a delegator in the staking collection resource\n/// for the specified nodeID and the amount of tokens to commit\n\ntransaction(id: String, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.registerDelegator(nodeID: id, amount: amount)      \n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90406b90332696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f2052656769737465727320612064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e207265736f757263650a2f2f2f20666f722074686520737065636966696564206e6f6465494420616e642074686520616d6f756e74206f6620746f6b656e7320746f20636f6d6d69740a0a7472616e73616374696f6e2869643a20537472696e672c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e726567697374657244656c656761746f72286e6f646549443a2069642c20616d6f756e743a20616d6f756e74292020202020200a202020207d0a7d0af88fb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f9040af90406b90332696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f2052656769737465727320612064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e207265736f757263650a2f2f2f20666f722074686520737065636966696564206e6f6465494420616e642074686520616d6f756e74206f6620746f6b656e7320746f20636f6d6d69740a0a7472616e73616374696f6e2869643a20537472696e672c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e726567697374657244656c656761746f72286e6f646549443a2069642c20616d6f756e743a20616d6f756e74292020202020200a202020207d0a7d0af88fb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02e093df9c425be9cdbee44bdbbd721f6aff523e41802a50cf0ff353873e9f94830a41e53ad3c9c1c16c8732dd8331b8ca66063617d433b01d4d09c4730044874452656769737465722044656c656761746f720002044e6f6465204944000001416d6f756e7400015546697836340003",
    "hash": "0a41e53ad3c9c1c16c8732dd8331b8ca66063617d433b01d4d09c47300448744"
  },
  {
    "title": "SCO.03 - Register Node",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import Crypto\nimport FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Registers a delegator in the staking collection resource\n/// for the specified node information and the amount of tokens to commit\n\ntransaction(id: String,\n            role: UInt8,\n            networkingAddress: String,\n            networkingKey: String,\n            stakingKey: String,\n            amount: UFix64,\n            machineAccountKey: String, \n            machineAccountKeySignatureAlgorithm: UInt8, \n            machineAccountKeyHashAlgorithm: UInt8) {\n\n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n\n        if let machineAccount = self.stakingCollectionRef.registerNode(\n            id: id,\n            role: role,\n            networkingAddress: networkingAddress,\n            networkingKey: networkingKey,\n            stakingKey: stakingKey,\n            amount: amount,\n            payer: account\n        ) {\n            let sigAlgo = SignatureAlgorithm(rawValue: machineAccountKeySignatureAlgorithm)\n                ?? panic(\"Could not get a signature algorithm from the raw enum value provided\")\n\n            let hashAlgo = HashAlgorithm(rawValue: machineAccountKeyHashAlgorithm)\n                ?? panic(\"Could not get a hash algorithm from the raw enum value provided\")\n            \n            let publicKey = PublicKey(\n\t\t\t    publicKey: machineAccountKey.decodeHex(),\n\t\t\t    signatureAlgorithm: sigAlgo\n\t\t    )\n            machineAccount.keys.add(publicKey: publicKey, hashAlgorithm: hashAlgo, weight: 1000.0)\n        }\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "flow-node.test:3569",
          "type": "String"
        },
        {
          "value": "1348307bc77c688e80049de9d081aa09755da33e6997605fa059db2144fc85e560cbe6f7da8d74b453f5916618cb8fd392c2db856f3e78221dc68db1b1d914e4",
          "type": "String"
        },
        {
          "value": "9e9ae0d645fd5fd9050792e0b0daa82cc1686d9133afa0f81a784b375c42ae48567d1545e7a9e1965f2c1a32f73cf8575ebb7a967f6e4d104d2df78eb8be409135d12da0499b8a00771f642c1b9c49397f22b440439f036c3bdee82f5309dab3",
          "type": "String"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        },
        {
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164",
          "type": "String"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import Crypto\nimport FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Registers a delegator in the staking collection resource\n/// for the specified node information and the amount of tokens to commit\n\ntransaction(id: String,\n            role: UInt8,\n            networkingAddress: String,\n            networkingKey: String,\n            stakingKey: String,\n            amount: UFix64,\n            machineAccountKey: String, \n            machineAccountKeySignatureAlgorithm: UInt8, \n            machineAccountKeyHashAlgorithm: UInt8) {\n\n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n\n        if let machineAccount = self.stakingCollectionRef.registerNode(\n            id: id,\n            role: role,\n            networkingAddress: networkingAddress,\n            networkingKey: networkingKey,\n            stakingKey: stakingKey,\n            amount: amount,\n            payer: account\n        ) {\n            let sigAlgo = SignatureAlgorithm(rawValue: machineAccountKeySignatureAlgorithm)\n                ?? panic(\"Could not get a signature algorithm from the raw enum value provided\")\n\n            let hashAlgo = HashAlgorithm(rawValue: machineAccountKeyHashAlgorithm)\n                ?? panic(\"Could not get a hash algorithm from the raw enum value provided\")\n            \n            let publicKey = PublicKey(\n\t\t\t    publicKey: machineAccountKey.decodeHex(),\n\t\t\t    signatureAlgorithm: sigAlgo\n\t\t    )\n            machineAccount.keys.add(publicKey: publicKey, hashAlgorithm: hashAlgo, weight: 1000.0)\n        }\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "flow-node.test:3569",
          "type": "String"
        },
        {
          "value": "1348307bc77c688e80049de9d081aa09755da33e6997605fa059db2144fc85e560cbe6f7da8d74b453f5916618cb8fd392c2db856f3e78221dc68db1b1d914e4",
          "type": "String"
        },
        {
          "value": "9e9ae0d645fd5fd9050792e0b0daa82cc1686d9133afa0f81a784b375c42ae48567d1545e7a9e1965f2c1a32f73cf8575ebb7a967f6e4d104d2df78eb8be409135d12da0499b8a00771f642c1b9c49397f22b440439f036c3bdee82f5309dab3",
          "type": "String"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        },
        {
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164",
          "type": "String"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90b24b907a0696d706f72742043727970746f0a696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f2052656769737465727320612064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e207265736f757263650a2f2f2f20666f722074686520737065636966696564206e6f646520696e666f726d6174696f6e20616e642074686520616d6f756e74206f6620746f6b656e7320746f20636f6d6d69740a0a7472616e73616374696f6e2869643a20537472696e672c0a202020202020202020202020726f6c653a2055496e74382c0a2020202020202020202020206e6574776f726b696e67416464726573733a20537472696e672c0a2020202020202020202020206e6574776f726b696e674b65793a20537472696e672c0a2020202020202020202020207374616b696e674b65793a20537472696e672c0a202020202020202020202020616d6f756e743a205546697836342c0a2020202020202020202020206d616368696e654163636f756e744b65793a20537472696e672c200a2020202020202020202020206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d3a2055496e74382c200a2020202020202020202020206d616368696e654163636f756e744b657948617368416c676f726974686d3a2055496e743829207b0a0a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a0a20202020202020206966206c6574206d616368696e654163636f756e74203d2073656c662e7374616b696e67436f6c6c656374696f6e5265662e72656769737465724e6f6465280a20202020202020202020202069643a2069642c0a202020202020202020202020726f6c653a20726f6c652c0a2020202020202020202020206e6574776f726b696e67416464726573733a206e6574776f726b696e67416464726573732c0a2020202020202020202020206e6574776f726b696e674b65793a206e6574776f726b696e674b65792c0a2020202020202020202020207374616b696e674b65793a207374616b696e674b65792c0a202020202020202020202020616d6f756e743a20616d6f756e742c0a20202020202020202020202070617965723a206163636f756e740a202020202020202029207b0a2020202020202020202020206c657420736967416c676f203d205369676e6174757265416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d290a202020202020202020202020202020203f3f2070616e69632822436f756c64206e6f74206765742061207369676e617475726520616c676f726974686d2066726f6d207468652072617720656e756d2076616c75652070726f766964656422290a0a2020202020202020202020206c65742068617368416c676f203d2048617368416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b657948617368416c676f726974686d290a202020202020202020202020202020203f3f2070616e69632822436f756c64206e6f74206765742061206861736820616c676f726974686d2066726f6d207468652072617720656e756d2076616c75652070726f766964656422290a2020202020202020202020200a2020202020202020202020206c6574207075626c69634b6579203d205075626c69634b6579280a090909202020207075626c69634b65793a206d616368696e654163636f756e744b65792e6465636f646548657828292c0a090909202020207369676e6174757265416c676f726974686d3a20736967416c676f0a090920202020290a2020202020202020202020206d616368696e654163636f756e742e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2068617368416c676f2c207765696768743a20313030302e30290a20202020202020207d0a202020207d0a7d0af9033eb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227daf7b2276616c7565223a22666c6f772d6e6f64652e746573743a33353639222c2274797065223a22537472696e67227db89c7b2276616c7565223a223133343833303762633737633638386538303034396465396430383161613039373535646133336536393937363035666130353964623231343466633835653536306362653666376461386437346234353366353931363631386362386664333932633264623835366633653738323231646336386462316231643931346534222c2274797065223a22537472696e67227db8dc7b2276616c7565223a22396539616530643634356664356664393035303739326530623064616138326363313638366439313333616661306638316137383462333735633432616534383536376431353435653761396531393635663263316133326637336366383537356562623761393637663665346431303464326466373865623862653430393133356431326461303439396238613030373731663634326331623963343933393766323262343430343339663033366333626465653832663533303964616233222c2274797065223a22537472696e67227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227db8aa7b2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634222c2274797065223a22537472696e67227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90b28f90b24b907a0696d706f72742043727970746f0a696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f2052656769737465727320612064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e207265736f757263650a2f2f2f20666f722074686520737065636966696564206e6f646520696e666f726d6174696f6e20616e642074686520616d6f756e74206f6620746f6b656e7320746f20636f6d6d69740a0a7472616e73616374696f6e2869643a20537472696e672c0a202020202020202020202020726f6c653a2055496e74382c0a2020202020202020202020206e6574776f726b696e67416464726573733a20537472696e672c0a2020202020202020202020206e6574776f726b696e674b65793a20537472696e672c0a2020202020202020202020207374616b696e674b65793a20537472696e672c0a202020202020202020202020616d6f756e743a205546697836342c0a2020202020202020202020206d616368696e654163636f756e744b65793a20537472696e672c200a2020202020202020202020206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d3a2055496e74382c200a2020202020202020202020206d616368696e654163636f756e744b657948617368416c676f726974686d3a2055496e743829207b0a0a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a0a20202020202020206966206c6574206d616368696e654163636f756e74203d2073656c662e7374616b696e67436f6c6c656374696f6e5265662e72656769737465724e6f6465280a20202020202020202020202069643a2069642c0a202020202020202020202020726f6c653a20726f6c652c0a2020202020202020202020206e6574776f726b696e67416464726573733a206e6574776f726b696e67416464726573732c0a2020202020202020202020206e6574776f726b696e674b65793a206e6574776f726b696e674b65792c0a2020202020202020202020207374616b696e674b65793a207374616b696e674b65792c0a202020202020202020202020616d6f756e743a20616d6f756e742c0a20202020202020202020202070617965723a206163636f756e740a202020202020202029207b0a2020202020202020202020206c657420736967416c676f203d205369676e6174757265416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d290a202020202020202020202020202020203f3f2070616e69632822436f756c64206e6f74206765742061207369676e617475726520616c676f726974686d2066726f6d207468652072617720656e756d2076616c75652070726f766964656422290a0a2020202020202020202020206c65742068617368416c676f203d2048617368416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b657948617368416c676f726974686d290a202020202020202020202020202020203f3f2070616e69632822436f756c64206e6f74206765742061206861736820616c676f726974686d2066726f6d207468652072617720656e756d2076616c75652070726f766964656422290a2020202020202020202020200a2020202020202020202020206c6574207075626c69634b6579203d205075626c69634b6579280a090909202020207075626c69634b65793a206d616368696e654163636f756e744b65792e6465636f646548657828292c0a090909202020207369676e6174757265416c676f726974686d3a20736967416c676f0a090920202020290a2020202020202020202020206d616368696e654163636f756e742e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2068617368416c676f2c207765696768743a20313030302e30290a20202020202020207d0a202020207d0a7d0af9033eb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227daf7b2276616c7565223a22666c6f772d6e6f64652e746573743a33353639222c2274797065223a22537472696e67227db89c7b2276616c7565223a223133343833303762633737633638386538303034396465396430383161613039373535646133336536393937363035666130353964623231343466633835653536306362653666376461386437346234353366353931363631386362386664333932633264623835366633653738323231646336386462316231643931346534222c2274797065223a22537472696e67227db8dc7b2276616c7565223a22396539616530643634356664356664393035303739326530623064616138326363313638366439313333616661306638316137383462333735633432616534383536376431353435653761396531393635663263316133326637336366383537356562623761393637663665346431303464326466373865623862653430393133356431326461303439396238613030373731663634326331623963343933393766323262343430343339663033366333626465653832663533303964616233222c2274797065223a22537472696e67227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227db8aa7b2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634222c2274797065223a22537472696e67227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02deb5f758f3eb3b125cd9b14a6528f18d535377709fcef41e743751eb828009213b0b2bbc3a2ad674122c182112f7008a8d3d1b60b107033c0ebe7bbe50df52675265676973746572204e6f64650009044e6f64652049440000074e6f646520526f6c650001044e6574772e20416464726573730002044e6574772e204b65790003045374616b696e67204b6579000401416d6f756e7400055546697836340003044d41205075622e204b65790006064d41205369676e2e20416c672e0007054d41204861736820416c672e0008",
    "hash": "3b0b2bbc3a2ad674122c182112f7008a8d3d1b60b107033c0ebe7bbe50df5267"
  },
  {
    "title": "SCO.04 - Create Machine Account",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import Crypto\nimport FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Creates a machine account for a node that is already in the staking collection\n/// and adds public keys to the new account\n\ntransaction(nodeID: String, \n            machineAccountKey: String, \n            machineAccountKeySignatureAlgorithm: UInt8, \n            machineAccountKeyHashAlgorithm: UInt8) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n\n        if let machineAccount = self.stakingCollectionRef.createMachineAccountForExistingNode(nodeID: nodeID, payer: account) {\n            let sigAlgo = SignatureAlgorithm(rawValue: machineAccountKeySignatureAlgorithm)\n                ?? panic(\"Could not get a signature algorithm from the raw enum value provided\")\n\n            let hashAlgo = HashAlgorithm(rawValue: machineAccountKeyHashAlgorithm)\n                ?? panic(\"Could not get a hash algorithm from the raw enum value provided\")\n            \n            let publicKey = PublicKey(\n\t\t\t    publicKey: machineAccountKey.decodeHex(),\n\t\t\t    signatureAlgorithm: sigAlgo\n\t\t    )\n            machineAccount.keys.add(publicKey: publicKey, hashAlgorithm: hashAlgo, weight: 1000.0)\n        } else {\n            panic(\"Could not create a machine account for the node\")\n        }\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164",
          "type": "String"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import Crypto\nimport FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Creates a machine account for a node that is already in the staking collection\n/// and adds public keys to the new account\n\ntransaction(nodeID: String, \n            machineAccountKey: String, \n            machineAccountKeySignatureAlgorithm: UInt8, \n            machineAccountKeyHashAlgorithm: UInt8) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n\n        if let machineAccount = self.stakingCollectionRef.createMachineAccountForExistingNode(nodeID: nodeID, payer: account) {\n            let sigAlgo = SignatureAlgorithm(rawValue: machineAccountKeySignatureAlgorithm)\n                ?? panic(\"Could not get a signature algorithm from the raw enum value provided\")\n\n            let hashAlgo = HashAlgorithm(rawValue: machineAccountKeyHashAlgorithm)\n                ?? panic(\"Could not get a hash algorithm from the raw enum value provided\")\n            \n            let publicKey = PublicKey(\n\t\t\t    publicKey: machineAccountKey.decodeHex(),\n\t\t\t    signatureAlgorithm: sigAlgo\n\t\t    )\n            machineAccount.keys.add(publicKey: publicKey, hashAlgorithm: hashAlgo, weight: 1000.0)\n        } else {\n            panic(\"Could not create a machine account for the node\")\n        }\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164",
          "type": "String"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9082bb906a1696d706f72742043727970746f0a696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20437265617465732061206d616368696e65206163636f756e7420666f722061206e6f6465207468617420697320616c726561647920696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f20616e642061646473207075626c6963206b65797320746f20746865206e6577206163636f756e740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c200a2020202020202020202020206d616368696e654163636f756e744b65793a20537472696e672c200a2020202020202020202020206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d3a2055496e74382c200a2020202020202020202020206d616368696e654163636f756e744b657948617368416c676f726974686d3a2055496e743829207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a0a20202020202020206966206c6574206d616368696e654163636f756e74203d2073656c662e7374616b696e67436f6c6c656374696f6e5265662e6372656174654d616368696e654163636f756e74466f724578697374696e674e6f6465286e6f646549443a206e6f646549442c2070617965723a206163636f756e7429207b0a2020202020202020202020206c657420736967416c676f203d205369676e6174757265416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d290a202020202020202020202020202020203f3f2070616e69632822436f756c64206e6f74206765742061207369676e617475726520616c676f726974686d2066726f6d207468652072617720656e756d2076616c75652070726f766964656422290a0a2020202020202020202020206c65742068617368416c676f203d2048617368416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b657948617368416c676f726974686d290a202020202020202020202020202020203f3f2070616e69632822436f756c64206e6f74206765742061206861736820616c676f726974686d2066726f6d207468652072617720656e756d2076616c75652070726f766964656422290a2020202020202020202020200a2020202020202020202020206c6574207075626c69634b6579203d205075626c69634b6579280a090909202020207075626c69634b65793a206d616368696e654163636f756e744b65792e6465636f646548657828292c0a090909202020207369676e6174757265416c676f726974686d3a20736967416c676f0a090920202020290a2020202020202020202020206d616368696e654163636f756e742e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2068617368416c676f2c207765696768743a20313030302e30290a20202020202020207d20656c7365207b0a20202020202020202020202070616e69632822436f756c64206e6f74206372656174652061206d616368696e65206163636f756e7420666f7220746865206e6f646522290a20202020202020207d0a202020207d0a7d0af90144b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db8aa7b2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634222c2274797065223a22537472696e67227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f9082ff9082bb906a1696d706f72742043727970746f0a696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20437265617465732061206d616368696e65206163636f756e7420666f722061206e6f6465207468617420697320616c726561647920696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f20616e642061646473207075626c6963206b65797320746f20746865206e6577206163636f756e740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c200a2020202020202020202020206d616368696e654163636f756e744b65793a20537472696e672c200a2020202020202020202020206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d3a2055496e74382c200a2020202020202020202020206d616368696e654163636f756e744b657948617368416c676f726974686d3a2055496e743829207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a0a20202020202020206966206c6574206d616368696e654163636f756e74203d2073656c662e7374616b696e67436f6c6c656374696f6e5265662e6372656174654d616368696e654163636f756e74466f724578697374696e674e6f6465286e6f646549443a206e6f646549442c2070617965723a206163636f756e7429207b0a2020202020202020202020206c657420736967416c676f203d205369676e6174757265416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d290a202020202020202020202020202020203f3f2070616e69632822436f756c64206e6f74206765742061207369676e617475726520616c676f726974686d2066726f6d207468652072617720656e756d2076616c75652070726f766964656422290a0a2020202020202020202020206c65742068617368416c676f203d2048617368416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b657948617368416c676f726974686d290a202020202020202020202020202020203f3f2070616e69632822436f756c64206e6f74206765742061206861736820616c676f726974686d2066726f6d207468652072617720656e756d2076616c75652070726f766964656422290a2020202020202020202020200a2020202020202020202020206c6574207075626c69634b6579203d205075626c69634b6579280a090909202020207075626c69634b65793a206d616368696e654163636f756e744b65792e6465636f646548657828292c0a090909202020207369676e6174757265416c676f726974686d3a20736967416c676f0a090920202020290a2020202020202020202020206d616368696e654163636f756e742e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2068617368416c676f2c207765696768743a20313030302e30290a20202020202020207d20656c7365207b0a20202020202020202020202070616e69632822436f756c64206e6f74206372656174652061206d616368696e65206163636f756e7420666f7220746865206e6f646522290a20202020202020207d0a202020207d0a7d0af90144b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db8aa7b2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634222c2274797065223a22537472696e67227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "024c1ad61500bcd0d32d7aa7eb84ca9b7417219ed6d524e05de8c55fb7d50940e4f0a6cedb6703cd4ce4cc3b735e5edb5a7e5b17a87a725343d745e5d53b7c0a01437265617465204d616368696e65204163636f756e740004044e6f64652049440000044d41205075622e204b65790001064d41205369676e2e20416c672e0002054d41204861736820416c672e0003",
    "hash": "f0a6cedb6703cd4ce4cc3b735e5edb5a7e5b17a87a725343d745e5d53b7c0a01"
  },
  {
    "title": "SCO.05 - Request Unstaking - 1",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Requests unstaking for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.requestUnstaking(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Requests unstaking for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.requestUnstaking(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90430b9033b696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20526571756573747320756e7374616b696e6720666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e72657175657374556e7374616b696e67286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90434f90430b9033b696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20526571756573747320756e7374616b696e6720666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e72657175657374556e7374616b696e67286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "022d59f2c2c402f919c8dba30009e31480d54e2b250d2e10456e1ff029bd7cce99f26c058a127500fcd8445ba9fcf55149fe8f1a1a7cd212688d13fcd6ee2765295265717565737420556e7374616b696e670003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "f26c058a127500fcd8445ba9fcf55149fe8f1a1a7cd212688d13fcd6ee276529"
  },
  {
    "title": "SCO.05 - Request Unstaking - 2",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Requests unstaking for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.requestUnstaking(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Requests unstaking for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.requestUnstaking(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9044bb9033b696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20526571756573747320756e7374616b696e6720666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e72657175657374556e7374616b696e67286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f9044ff9044bb9033b696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20526571756573747320756e7374616b696e6720666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e72657175657374556e7374616b696e67286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "022d59f2c2c402f919c8dba30009e31480d54e2b250d2e10456e1ff029bd7cce99f26c058a127500fcd8445ba9fcf55149fe8f1a1a7cd212688d13fcd6ee2765295265717565737420556e7374616b696e670003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "f26c058a127500fcd8445ba9fcf55149fe8f1a1a7cd212688d13fcd6ee276529"
  },
  {
    "title": "SCO.06 - Stake New Tokens - 1",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Commits new tokens to stake for the specified node or delegator in the staking collection\n/// The tokens from the locked vault are used first, if it exists\n/// followed by the tokens from the unlocked vault\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeNewTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Commits new tokens to stake for the specified node or delegator in the staking collection\n/// The tokens from the locked vault are used first, if it exists\n/// followed by the tokens from the unlocked vault\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeNewTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f904acb903b7696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20436f6d6d697473206e657720746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e732066726f6d20746865206c6f636b6564207661756c742061726520757365642066697273742c206966206974206578697374730a2f2f2f20666f6c6c6f7765642062792074686520746f6b656e732066726f6d2074686520756e6c6f636b6564207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b654e6577546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f904b0f904acb903b7696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20436f6d6d697473206e657720746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e732066726f6d20746865206c6f636b6564207661756c742061726520757365642066697273742c206966206974206578697374730a2f2f2f20666f6c6c6f7765642062792074686520746f6b656e732066726f6d2074686520756e6c6f636b6564207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b654e6577546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02cf2b03950077352487e6344ab65edc3e1856731ab9cf68aa2ebbe279ae496d4b4c0658934352486097cc89fa06b98bac21e514770fc6a4d70a7adc4bec6d711d5374616b65204e657720546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "4c0658934352486097cc89fa06b98bac21e514770fc6a4d70a7adc4bec6d711d"
  },
  {
    "title": "SCO.06 - Stake New Tokens - 2",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Commits new tokens to stake for the specified node or delegator in the staking collection\n/// The tokens from the locked vault are used first, if it exists\n/// followed by the tokens from the unlocked vault\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeNewTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Commits new tokens to stake for the specified node or delegator in the staking collection\n/// The tokens from the locked vault are used first, if it exists\n/// followed by the tokens from the unlocked vault\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeNewTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f904c7b903b7696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20436f6d6d697473206e657720746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e732066726f6d20746865206c6f636b6564207661756c742061726520757365642066697273742c206966206974206578697374730a2f2f2f20666f6c6c6f7765642062792074686520746f6b656e732066726f6d2074686520756e6c6f636b6564207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b654e6577546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f904cbf904c7b903b7696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20436f6d6d697473206e657720746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e732066726f6d20746865206c6f636b6564207661756c742061726520757365642066697273742c206966206974206578697374730a2f2f2f20666f6c6c6f7765642062792074686520746f6b656e732066726f6d2074686520756e6c6f636b6564207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b654e6577546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02cf2b03950077352487e6344ab65edc3e1856731ab9cf68aa2ebbe279ae496d4b4c0658934352486097cc89fa06b98bac21e514770fc6a4d70a7adc4bec6d711d5374616b65204e657720546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "4c0658934352486097cc89fa06b98bac21e514770fc6a4d70a7adc4bec6d711d"
  },
  {
    "title": "SCO.07 - Stake Rewarded Tokens - 1",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Commits rewarded tokens to stake for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeRewardedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Commits rewarded tokens to stake for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeRewardedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90441b9034c696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20436f6d6d69747320726577617264656420746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b655265776172646564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90445f90441b9034c696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20436f6d6d69747320726577617264656420746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b655265776172646564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "024395faf2e515eea4d40f82416ad387575f0d5a580612223c361130e53e72f00bc989e8b3beb9c2eb5af2ee1e11d592c9f1131e76e7ef105a0d40cf1610d1e3485374616b6520526577617264656420546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "c989e8b3beb9c2eb5af2ee1e11d592c9f1131e76e7ef105a0d40cf1610d1e348"
  },
  {
    "title": "SCO.07 - Stake Rewarded Tokens - 2",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Commits rewarded tokens to stake for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeRewardedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Commits rewarded tokens to stake for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeRewardedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9045cb9034c696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20436f6d6d69747320726577617264656420746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b655265776172646564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90460f9045cb9034c696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20436f6d6d69747320726577617264656420746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b655265776172646564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "024395faf2e515eea4d40f82416ad387575f0d5a580612223c361130e53e72f00bc989e8b3beb9c2eb5af2ee1e11d592c9f1131e76e7ef105a0d40cf1610d1e3485374616b6520526577617264656420546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "c989e8b3beb9c2eb5af2ee1e11d592c9f1131e76e7ef105a0d40cf1610d1e348"
  },
  {
    "title": "SCO.08 - Stake Unstaked Tokens - 1",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Commits unstaked tokens to stake for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeUnstakedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Commits unstaked tokens to stake for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeUnstakedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90441b9034c696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20436f6d6d69747320756e7374616b656420746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b65556e7374616b6564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90445f90441b9034c696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20436f6d6d69747320756e7374616b656420746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b65556e7374616b6564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "020b1721f2a8ef6c0c4121ef83c7b38f2141eebcd65c72dab9ebaafe1b4d66fea8fe6adb75bf22b2033800e916fa7e3a7810417e9a36d35320de7f4b5f7ec4f1b85374616b6520556e7374616b656420546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "fe6adb75bf22b2033800e916fa7e3a7810417e9a36d35320de7f4b5f7ec4f1b8"
  },
  {
    "title": "SCO.08 - Stake Unstaked Tokens - 2",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Commits unstaked tokens to stake for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeUnstakedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Commits unstaked tokens to stake for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeUnstakedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9045cb9034c696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20436f6d6d69747320756e7374616b656420746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b65556e7374616b6564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90460f9045cb9034c696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20436f6d6d69747320756e7374616b656420746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b65556e7374616b6564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "020b1721f2a8ef6c0c4121ef83c7b38f2141eebcd65c72dab9ebaafe1b4d66fea8fe6adb75bf22b2033800e916fa7e3a7810417e9a36d35320de7f4b5f7ec4f1b85374616b6520556e7374616b656420546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "fe6adb75bf22b2033800e916fa7e3a7810417e9a36d35320de7f4b5f7ec4f1b8"
  },
  {
    "title": "SCO.09 - Unstake All",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Requests to unstake ALL tokens for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.unstakeAll(nodeID: nodeID)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Requests to unstake ALL tokens for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.unstakeAll(nodeID: nodeID)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90394b902f1696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20526571756573747320746f20756e7374616b6520414c4c20746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e6729207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e756e7374616b65416c6c286e6f646549443a206e6f64654944290a202020207d0a7d0af85eb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90398f90394b902f1696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20526571756573747320746f20756e7374616b6520414c4c20746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e6729207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e756e7374616b65416c6c286e6f646549443a206e6f64654944290a202020207d0a7d0af85eb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02c84843e3399be2ce95ea00e7c17d72db3c5c3363ec008c7a1c1cfa5b6afe70ae1c8256fb857f6c6fd929511ecac8624d0159877cf72c884f7128297dfb069510556e7374616b6520416c6c0001044e6f64652049440000",
    "hash": "1c8256fb857f6c6fd929511ecac8624d0159877cf72c884f7128297dfb069510"
  },
  {
    "title": "SCO.10 - Withdraw Rewarded Tokens - 1",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Request to withdraw rewarded tokens for the specified node or delegator in the staking collection\n/// The tokens are automatically deposited to the unlocked account vault first,\n/// And then any locked tokens are deposited into the locked account vault\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawRewardedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Request to withdraw rewarded tokens for the specified node or delegator in the staking collection\n/// The tokens are automatically deposited to the unlocked account vault first,\n/// And then any locked tokens are deposited into the locked account vault\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawRewardedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f904fdb903ed696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f205265717565737420746f20776974686472617720726577617264656420746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c742066697273742c0a2f2f2f20416e64207468656e20616e79206c6f636b656420746f6b656e7320617265206465706f736974656420696e746f20746865206c6f636b6564206163636f756e74207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e77697468647261775265776172646564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90501f904fdb903ed696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f205265717565737420746f20776974686472617720726577617264656420746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c742066697273742c0a2f2f2f20416e64207468656e20616e79206c6f636b656420746f6b656e7320617265206465706f736974656420696e746f20746865206c6f636b6564206163636f756e74207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e77697468647261775265776172646564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "025a07ca4c016973bdeb168590e111b2c2855833b5ece11ffb28b08b8668f258a8fbd8ebbfff7a88b6b667ff4e3f9f904eaaba71cbf02a140f3b7007c61fbd8f34576974686472617720526577617264656420546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "fbd8ebbfff7a88b6b667ff4e3f9f904eaaba71cbf02a140f3b7007c61fbd8f34"
  },
  {
    "title": "SCO.10 - Withdraw Rewarded Tokens - 2",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Request to withdraw rewarded tokens for the specified node or delegator in the staking collection\n/// The tokens are automatically deposited to the unlocked account vault first,\n/// And then any locked tokens are deposited into the locked account vault\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawRewardedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Request to withdraw rewarded tokens for the specified node or delegator in the staking collection\n/// The tokens are automatically deposited to the unlocked account vault first,\n/// And then any locked tokens are deposited into the locked account vault\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawRewardedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f904e2b903ed696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f205265717565737420746f20776974686472617720726577617264656420746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c742066697273742c0a2f2f2f20416e64207468656e20616e79206c6f636b656420746f6b656e7320617265206465706f736974656420696e746f20746865206c6f636b6564206163636f756e74207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e77697468647261775265776172646564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f904e6f904e2b903ed696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f205265717565737420746f20776974686472617720726577617264656420746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c742066697273742c0a2f2f2f20416e64207468656e20616e79206c6f636b656420746f6b656e7320617265206465706f736974656420696e746f20746865206c6f636b6564206163636f756e74207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e77697468647261775265776172646564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "025a07ca4c016973bdeb168590e111b2c2855833b5ece11ffb28b08b8668f258a8fbd8ebbfff7a88b6b667ff4e3f9f904eaaba71cbf02a140f3b7007c61fbd8f34576974686472617720526577617264656420546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "fbd8ebbfff7a88b6b667ff4e3f9f904eaaba71cbf02a140f3b7007c61fbd8f34"
  },
  {
    "title": "SCO.11 - Withdraw Unstaked Tokens - 1",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Request to withdraw unstaked tokens for the specified node or delegator in the staking collection\n/// The tokens are automatically deposited to the unlocked account vault first,\n/// And then any locked tokens are deposited into the locked account vault if it is there\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawUnstakedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Request to withdraw unstaked tokens for the specified node or delegator in the staking collection\n/// The tokens are automatically deposited to the unlocked account vault first,\n/// And then any locked tokens are deposited into the locked account vault if it is there\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawUnstakedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f904f1b903fc696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f205265717565737420746f20776974686472617720756e7374616b656420746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c742066697273742c0a2f2f2f20416e64207468656e20616e79206c6f636b656420746f6b656e7320617265206465706f736974656420696e746f20746865206c6f636b6564206163636f756e74207661756c742069662069742069732074686572650a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7769746864726177556e7374616b6564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f904f5f904f1b903fc696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f205265717565737420746f20776974686472617720756e7374616b656420746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c742066697273742c0a2f2f2f20416e64207468656e20616e79206c6f636b656420746f6b656e7320617265206465706f736974656420696e746f20746865206c6f636b6564206163636f756e74207661756c742069662069742069732074686572650a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7769746864726177556e7374616b6564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "0201fd4ea83d20510d24ed9f245873a7ee2715aefb774495c80bce7e3e34d6442ec2484f17e640e285769c3edaa6f2d090dcef1f2f57983f82b7179c3c047290ca576974686472617720556e7374616b656420546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "c2484f17e640e285769c3edaa6f2d090dcef1f2f57983f82b7179c3c047290ca"
  },
  {
    "title": "SCO.11 - Withdraw Unstaked Tokens - 2",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Request to withdraw unstaked tokens for the specified node or delegator in the staking collection\n/// The tokens are automatically deposited to the unlocked account vault first,\n/// And then any locked tokens are deposited into the locked account vault if it is there\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawUnstakedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Request to withdraw unstaked tokens for the specified node or delegator in the staking collection\n/// The tokens are automatically deposited to the unlocked account vault first,\n/// And then any locked tokens are deposited into the locked account vault if it is there\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawUnstakedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9050cb903fc696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f205265717565737420746f20776974686472617720756e7374616b656420746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c742066697273742c0a2f2f2f20416e64207468656e20616e79206c6f636b656420746f6b656e7320617265206465706f736974656420696e746f20746865206c6f636b6564206163636f756e74207661756c742069662069742069732074686572650a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7769746864726177556e7374616b6564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90510f9050cb903fc696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f205265717565737420746f20776974686472617720756e7374616b656420746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c742066697273742c0a2f2f2f20416e64207468656e20616e79206c6f636b656420746f6b656e7320617265206465706f736974656420696e746f20746865206c6f636b6564206163636f756e74207661756c742069662069742069732074686572650a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7769746864726177556e7374616b6564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "0201fd4ea83d20510d24ed9f245873a7ee2715aefb774495c80bce7e3e34d6442ec2484f17e640e285769c3edaa6f2d090dcef1f2f57983f82b7179c3c047290ca576974686472617720556e7374616b656420546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "c2484f17e640e285769c3edaa6f2d090dcef1f2f57983f82b7179c3c047290ca"
  },
  {
    "title": "SCO.12 - Close Stake - 1",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n// Closes out a staking object in the staking collection\n// This does not remove the record from the identity table,\n// but it does mean that the account that closes it cannot ever access it again\n\ntransaction(nodeID: String, delegatorID: UInt32?) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.closeStake(nodeID: nodeID, delegatorID: delegatorID)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n// Closes out a staking object in the staking collection\n// This does not remove the record from the identity table,\n// but it does mean that the account that closes it cannot ever access it again\n\ntransaction(nodeID: String, delegatorID: UInt32?) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.closeStake(nodeID: nodeID, delegatorID: delegatorID)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90464b90385696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f20436c6f736573206f75742061207374616b696e67206f626a65637420696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f205468697320646f6573206e6f742072656d6f766520746865207265636f72642066726f6d20746865206964656e74697479207461626c652c0a2f2f2062757420697420646f6573206d65616e207468617420746865206163636f756e74207468617420636c6f7365732069742063616e6e6f7420657665722061636365737320697420616761696e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f29207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e636c6f73655374616b65286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f724944290a202020207d0a7d0af89ab85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90468f90464b90385696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f20436c6f736573206f75742061207374616b696e67206f626a65637420696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f205468697320646f6573206e6f742072656d6f766520746865207265636f72642066726f6d20746865206964656e74697479207461626c652c0a2f2f2062757420697420646f6573206d65616e207468617420746865206163636f756e74207468617420636c6f7365732069742063616e6e6f7420657665722061636365737320697420616761696e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f29207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e636c6f73655374616b65286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f724944290a202020207d0a7d0af89ab85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "027e216d96d75414b27c2301a3b0a7816804d43014337a14731d1493531116d185a0fad319bf8aede66212257ad0d21532858381e2c9d7c4cec179b28180f5be93436c6f7365205374616b650002044e6f646520494400000244656c656761746f72204944000155496e7433320003",
    "hash": "a0fad319bf8aede66212257ad0d21532858381e2c9d7c4cec179b28180f5be93"
  },
  {
    "title": "SCO.12 - Close Stake - 2",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n// Closes out a staking object in the staking collection\n// This does not remove the record from the identity table,\n// but it does mean that the account that closes it cannot ever access it again\n\ntransaction(nodeID: String, delegatorID: UInt32?) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.closeStake(nodeID: nodeID, delegatorID: delegatorID)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n// Closes out a staking object in the staking collection\n// This does not remove the record from the identity table,\n// but it does mean that the account that closes it cannot ever access it again\n\ntransaction(nodeID: String, delegatorID: UInt32?) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.closeStake(nodeID: nodeID, delegatorID: delegatorID)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90449b90385696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f20436c6f736573206f75742061207374616b696e67206f626a65637420696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f205468697320646f6573206e6f742072656d6f766520746865207265636f72642066726f6d20746865206964656e74697479207461626c652c0a2f2f2062757420697420646f6573206d65616e207468617420746865206163636f756e74207468617420636c6f7365732069742063616e6e6f7420657665722061636365737320697420616761696e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f29207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e636c6f73655374616b65286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f724944290a202020207d0a7d0af87fb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f9044df90449b90385696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f20436c6f736573206f75742061207374616b696e67206f626a65637420696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f205468697320646f6573206e6f742072656d6f766520746865207265636f72642066726f6d20746865206964656e74697479207461626c652c0a2f2f2062757420697420646f6573206d65616e207468617420746865206163636f756e74207468617420636c6f7365732069742063616e6e6f7420657665722061636365737320697420616761696e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f29207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e636c6f73655374616b65286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f724944290a202020207d0a7d0af87fb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "027e216d96d75414b27c2301a3b0a7816804d43014337a14731d1493531116d185a0fad319bf8aede66212257ad0d21532858381e2c9d7c4cec179b28180f5be93436c6f7365205374616b650002044e6f646520494400000244656c656761746f72204944000155496e7433320003",
    "hash": "a0fad319bf8aede66212257ad0d21532858381e2c9d7c4cec179b28180f5be93"
  },
  {
    "title": "SCO.13 - Transfer Node",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n// Transfers a NodeStaker object from an authorizers accoount\n// and adds the NodeStaker to another accounts Staking Collection\n// identified by the to Address.\n\ntransaction(nodeID: String, to: Address) {\n    let fromStakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n    let toStakingCollectionCap: &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        // The account to transfer the NodeStaker object to must have a valid Staking Collection in order to receive the NodeStaker.\n        if (!FlowStakingCollection.doesAccountHaveStakingCollection(address: to)) {\n            panic(\"Destination account must have a Staking Collection set up.\")\n        }\n\n        // Get a reference to the authorizers StakingCollection\n        self.fromStakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n\n        // Get the PublicAccount of the account to transfer the NodeStaker to. \n        let toAccount = getAccount(to)\n\n        // Borrow a capability to the public methods available on the receivers StakingCollection.\n        self.toStakingCollectionCap = toAccount.capabilities\n            .borrow<&FlowStakingCollection.StakingCollection>(FlowStakingCollection.StakingCollectionPublicPath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the receiver's account\")\n\n        let machineAccountInfo = self.fromStakingCollectionRef.getMachineAccounts()[nodeID]\n            ?? panic(\"Could not get machine account info for the specified node ID\")\n\n        // Remove the NodeStaker from the authorizers StakingCollection.\n        let nodeStaker <- self.fromStakingCollectionRef.removeNode(nodeID: nodeID)\n\n        // Deposit the NodeStaker to the receivers StakingCollection.\n        self.toStakingCollectionCap.addNodeObject(<- nodeStaker!, machineAccountInfo: machineAccountInfo)\n    }\n}",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "0xe467b9dd11fa00df",
          "type": "Address"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n// Transfers a NodeStaker object from an authorizers accoount\n// and adds the NodeStaker to another accounts Staking Collection\n// identified by the to Address.\n\ntransaction(nodeID: String, to: Address) {\n    let fromStakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n    let toStakingCollectionCap: &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        // The account to transfer the NodeStaker object to must have a valid Staking Collection in order to receive the NodeStaker.\n        if (!FlowStakingCollection.doesAccountHaveStakingCollection(address: to)) {\n            panic(\"Destination account must have a Staking Collection set up.\")\n        }\n\n        // Get a reference to the authorizers StakingCollection\n        self.fromStakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n\n        // Get the PublicAccount of the account to transfer the NodeStaker to. \n        let toAccount = getAccount(to)\n\n        // Borrow a capability to the public methods available on the receivers StakingCollection.\n        self.toStakingCollectionCap = toAccount.capabilities\n            .borrow<&FlowStakingCollection.StakingCollection>(FlowStakingCollection.StakingCollectionPublicPath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the receiver's account\")\n\n        let machineAccountInfo = self.fromStakingCollectionRef.getMachineAccounts()[nodeID]\n            ?? panic(\"Could not get machine account info for the specified node ID\")\n\n        // Remove the NodeStaker from the authorizers StakingCollection.\n        let nodeStaker <- self.fromStakingCollectionRef.removeNode(nodeID: nodeID)\n\n        // Deposit the NodeStaker to the receivers StakingCollection.\n        self.toStakingCollectionCap.addNodeObject(<- nodeStaker!, machineAccountInfo: machineAccountInfo)\n    }\n}",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "0xe467b9dd11fa00df",
          "type": "Address"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9096eb9089b696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f205472616e73666572732061204e6f64655374616b6572206f626a6563742066726f6d20616e20617574686f72697a657273206163636f6f756e740a2f2f20616e64206164647320746865204e6f64655374616b657220746f20616e6f74686572206163636f756e7473205374616b696e6720436f6c6c656374696f6e0a2f2f206964656e7469666965642062792074686520746f20416464726573732e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c20746f3a204164647265737329207b0a202020206c65742066726f6d5374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a202020206c657420746f5374616b696e67436f6c6c656374696f6e4361703a2026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a20202020202020202f2f20546865206163636f756e7420746f207472616e7366657220746865204e6f64655374616b6572206f626a65637420746f206d757374206861766520612076616c6964205374616b696e6720436f6c6c656374696f6e20696e206f7264657220746f207265636569766520746865204e6f64655374616b65722e0a20202020202020206966202821466c6f775374616b696e67436f6c6c656374696f6e2e646f65734163636f756e74486176655374616b696e67436f6c6c656374696f6e28616464726573733a20746f2929207b0a20202020202020202020202070616e6963282244657374696e6174696f6e206163636f756e74206d75737420686176652061205374616b696e6720436f6c6c656374696f6e207365742075702e22290a20202020202020207d0a0a20202020202020202f2f204765742061207265666572656e636520746f2074686520617574686f72697a657273205374616b696e67436f6c6c656374696f6e0a202020202020202073656c662e66726f6d5374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a0a20202020202020202f2f2047657420746865205075626c69634163636f756e74206f6620746865206163636f756e7420746f207472616e7366657220746865204e6f64655374616b657220746f2e200a20202020202020206c657420746f4163636f756e74203d206765744163636f756e7428746f290a0a20202020202020202f2f20426f72726f772061206361706162696c69747920746f20746865207075626c6963206d6574686f647320617661696c61626c65206f6e2074686520726563656976657273205374616b696e67436f6c6c656374696f6e2e0a202020202020202073656c662e746f5374616b696e67436f6c6c656374696f6e436170203d20746f4163636f756e742e6361706162696c69746965730a2020202020202020202020202e626f72726f773c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e28466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e5075626c696350617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e207468652072656365697665722773206163636f756e7422290a0a20202020202020206c6574206d616368696e654163636f756e74496e666f203d2073656c662e66726f6d5374616b696e67436f6c6c656374696f6e5265662e6765744d616368696e654163636f756e747328295b6e6f646549445d0a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420676574206d616368696e65206163636f756e7420696e666f20666f722074686520737065636966696564206e6f646520494422290a0a20202020202020202f2f2052656d6f766520746865204e6f64655374616b65722066726f6d2074686520617574686f72697a657273205374616b696e67436f6c6c656374696f6e2e0a20202020202020206c6574206e6f64655374616b6572203c2d2073656c662e66726f6d5374616b696e67436f6c6c656374696f6e5265662e72656d6f76654e6f6465286e6f646549443a206e6f64654944290a0a20202020202020202f2f204465706f73697420746865204e6f64655374616b657220746f2074686520726563656976657273205374616b696e67436f6c6c656374696f6e2e0a202020202020202073656c662e746f5374616b696e67436f6c6c656374696f6e4361702e6164644e6f64654f626a656374283c2d206e6f64655374616b6572212c206d616368696e654163636f756e74496e666f3a206d616368696e654163636f756e74496e666f290a202020207d0a7df88eb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227daf7b2276616c7565223a22307865343637623964643131666130306466222c2274797065223a2241646472657373227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90972f9096eb9089b696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f205472616e73666572732061204e6f64655374616b6572206f626a6563742066726f6d20616e20617574686f72697a657273206163636f6f756e740a2f2f20616e64206164647320746865204e6f64655374616b657220746f20616e6f74686572206163636f756e7473205374616b696e6720436f6c6c656374696f6e0a2f2f206964656e7469666965642062792074686520746f20416464726573732e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c20746f3a204164647265737329207b0a202020206c65742066726f6d5374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a202020206c657420746f5374616b696e67436f6c6c656374696f6e4361703a2026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a20202020202020202f2f20546865206163636f756e7420746f207472616e7366657220746865204e6f64655374616b6572206f626a65637420746f206d757374206861766520612076616c6964205374616b696e6720436f6c6c656374696f6e20696e206f7264657220746f207265636569766520746865204e6f64655374616b65722e0a20202020202020206966202821466c6f775374616b696e67436f6c6c656374696f6e2e646f65734163636f756e74486176655374616b696e67436f6c6c656374696f6e28616464726573733a20746f2929207b0a20202020202020202020202070616e6963282244657374696e6174696f6e206163636f756e74206d75737420686176652061205374616b696e6720436f6c6c656374696f6e207365742075702e22290a20202020202020207d0a0a20202020202020202f2f204765742061207265666572656e636520746f2074686520617574686f72697a657273205374616b696e67436f6c6c656374696f6e0a202020202020202073656c662e66726f6d5374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a0a20202020202020202f2f2047657420746865205075626c69634163636f756e74206f6620746865206163636f756e7420746f207472616e7366657220746865204e6f64655374616b657220746f2e200a20202020202020206c657420746f4163636f756e74203d206765744163636f756e7428746f290a0a20202020202020202f2f20426f72726f772061206361706162696c69747920746f20746865207075626c6963206d6574686f647320617661696c61626c65206f6e2074686520726563656976657273205374616b696e67436f6c6c656374696f6e2e0a202020202020202073656c662e746f5374616b696e67436f6c6c656374696f6e436170203d20746f4163636f756e742e6361706162696c69746965730a2020202020202020202020202e626f72726f773c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e28466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e5075626c696350617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e207468652072656365697665722773206163636f756e7422290a0a20202020202020206c6574206d616368696e654163636f756e74496e666f203d2073656c662e66726f6d5374616b696e67436f6c6c656374696f6e5265662e6765744d616368696e654163636f756e747328295b6e6f646549445d0a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420676574206d616368696e65206163636f756e7420696e666f20666f722074686520737065636966696564206e6f646520494422290a0a20202020202020202f2f2052656d6f766520746865204e6f64655374616b65722066726f6d2074686520617574686f72697a657273205374616b696e67436f6c6c656374696f6e2e0a20202020202020206c6574206e6f64655374616b6572203c2d2073656c662e66726f6d5374616b696e67436f6c6c656374696f6e5265662e72656d6f76654e6f6465286e6f646549443a206e6f64654944290a0a20202020202020202f2f204465706f73697420746865204e6f64655374616b657220746f2074686520726563656976657273205374616b696e67436f6c6c656374696f6e2e0a202020202020202073656c662e746f5374616b696e67436f6c6c656374696f6e4361702e6164644e6f64654f626a656374283c2d206e6f64655374616b6572212c206d616368696e654163636f756e74496e666f3a206d616368696e654163636f756e74496e666f290a202020207d0a7df88eb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227daf7b2276616c7565223a22307865343637623964643131666130306466222c2274797065223a2241646472657373227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02311f4071dda8b17ac6cbc6f0a27e98bd426026825d3c68308903fead884e616e38bfd23b200ecef4d13fa3c2ea998b51e6a24f3a8ceb260d2affab7c918a97d05472616e73666572204e6f64650002044e6f6465204944000001416464726573730001416464726573730003",
    "hash": "38bfd23b200ecef4d13fa3c2ea998b51e6a24f3a8ceb260d2affab7c918a97d0"
  },
  {
    "title": "SCO.14 - Transfer Delegator",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n// Transfers a NodeDelegator object from an authorizers accoount\n// and adds the NodeDelegator to another accounts Staking Collection\n// identified by the to Address.\n\ntransaction(nodeID: String, delegatorID: UInt32, to: Address) {\n    let fromStakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n    let toStakingCollectionCap: &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        // The account to transfer the NodeDelegator object to must have a valid Staking Collection in order to receive the NodeDelegator.\n        if (!FlowStakingCollection.doesAccountHaveStakingCollection(address: to)) {\n            panic(\"Destination account must have a Staking Collection set up.\")\n        }\n\n        // Get a reference to the authorizers StakingCollection\n        self.fromStakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n\n        // Get the PublicAccount of the account to transfer the NodeDelegator to. \n        let toAccount = getAccount(to)\n\n        // Borrow a capability to the public methods available on the receivers StakingCollection.\n        self.toStakingCollectionCap = toAccount.capabilities\n            .borrow<&FlowStakingCollection.StakingCollection>(FlowStakingCollection.StakingCollectionPublicPath)\n            ?? panic(\"Could not borrow a referamce to a StakingCollection in the receiver's account\")\n    }\n\n    execute {\n        // Remove the NodeDelegator from the authorizers StakingCollection.\n        let nodeDelegator <- self.fromStakingCollectionRef.removeDelegator(nodeID: nodeID, delegatorID: delegatorID)\n\n        // Deposit the NodeDelegator to the receivers StakingCollection.\n        self.toStakingCollectionCap.addDelegatorObject(<- nodeDelegator!)\n    }\n}",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "42",
          "type": "UInt32"
        },
        {
          "value": "0xe467b9dd11fa00df",
          "type": "Address"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n// Transfers a NodeDelegator object from an authorizers accoount\n// and adds the NodeDelegator to another accounts Staking Collection\n// identified by the to Address.\n\ntransaction(nodeID: String, delegatorID: UInt32, to: Address) {\n    let fromStakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n    let toStakingCollectionCap: &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        // The account to transfer the NodeDelegator object to must have a valid Staking Collection in order to receive the NodeDelegator.\n        if (!FlowStakingCollection.doesAccountHaveStakingCollection(address: to)) {\n            panic(\"Destination account must have a Staking Collection set up.\")\n        }\n\n        // Get a reference to the authorizers StakingCollection\n        self.fromStakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n\n        // Get the PublicAccount of the account to transfer the NodeDelegator to. \n        let toAccount = getAccount(to)\n\n        // Borrow a capability to the public methods available on the receivers StakingCollection.\n        self.toStakingCollectionCap = toAccount.capabilities\n            .borrow<&FlowStakingCollection.StakingCollection>(FlowStakingCollection.StakingCollectionPublicPath)\n            ?? panic(\"Could not borrow a referamce to a StakingCollection in the receiver's account\")\n    }\n\n    execute {\n        // Remove the NodeDelegator from the authorizers StakingCollection.\n        let nodeDelegator <- self.fromStakingCollectionRef.removeDelegator(nodeID: nodeID, delegatorID: delegatorID)\n\n        // Deposit the NodeDelegator to the receivers StakingCollection.\n        self.toStakingCollectionCap.addDelegatorObject(<- nodeDelegator!)\n    }\n}",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "42",
          "type": "UInt32"
        },
        {
          "value": "0xe467b9dd11fa00df",
          "type": "Address"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9091bb90829696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f205472616e73666572732061204e6f646544656c656761746f72206f626a6563742066726f6d20616e20617574686f72697a657273206163636f6f756e740a2f2f20616e64206164647320746865204e6f646544656c656761746f7220746f20616e6f74686572206163636f756e7473205374616b696e6720436f6c6c656374696f6e0a2f2f206964656e7469666965642062792074686520746f20416464726573732e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433322c20746f3a204164647265737329207b0a202020206c65742066726f6d5374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a202020206c657420746f5374616b696e67436f6c6c656374696f6e4361703a2026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a20202020202020202f2f20546865206163636f756e7420746f207472616e7366657220746865204e6f646544656c656761746f72206f626a65637420746f206d757374206861766520612076616c6964205374616b696e6720436f6c6c656374696f6e20696e206f7264657220746f207265636569766520746865204e6f646544656c656761746f722e0a20202020202020206966202821466c6f775374616b696e67436f6c6c656374696f6e2e646f65734163636f756e74486176655374616b696e67436f6c6c656374696f6e28616464726573733a20746f2929207b0a20202020202020202020202070616e6963282244657374696e6174696f6e206163636f756e74206d75737420686176652061205374616b696e6720436f6c6c656374696f6e207365742075702e22290a20202020202020207d0a0a20202020202020202f2f204765742061207265666572656e636520746f2074686520617574686f72697a657273205374616b696e67436f6c6c656374696f6e0a202020202020202073656c662e66726f6d5374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a0a20202020202020202f2f2047657420746865205075626c69634163636f756e74206f6620746865206163636f756e7420746f207472616e7366657220746865204e6f646544656c656761746f7220746f2e200a20202020202020206c657420746f4163636f756e74203d206765744163636f756e7428746f290a0a20202020202020202f2f20426f72726f772061206361706162696c69747920746f20746865207075626c6963206d6574686f647320617661696c61626c65206f6e2074686520726563656976657273205374616b696e67436f6c6c656374696f6e2e0a202020202020202073656c662e746f5374616b696e67436f6c6c656374696f6e436170203d20746f4163636f756e742e6361706162696c69746965730a2020202020202020202020202e626f72726f773c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e28466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e5075626c696350617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572616d636520746f2061205374616b696e67436f6c6c656374696f6e20696e207468652072656365697665722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a20202020202020202f2f2052656d6f766520746865204e6f646544656c656761746f722066726f6d2074686520617574686f72697a657273205374616b696e67436f6c6c656374696f6e2e0a20202020202020206c6574206e6f646544656c656761746f72203c2d2073656c662e66726f6d5374616b696e67436f6c6c656374696f6e5265662e72656d6f766544656c656761746f72286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f724944290a0a20202020202020202f2f204465706f73697420746865204e6f646544656c656761746f7220746f2074686520726563656976657273205374616b696e67436f6c6c656374696f6e2e0a202020202020202073656c662e746f5374616b696e67436f6c6c656374696f6e4361702e61646444656c656761746f724f626a656374283c2d206e6f646544656c656761746f7221290a202020207d0a7df8adb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227d9e7b2276616c7565223a223432222c2274797065223a2255496e743332227daf7b2276616c7565223a22307865343637623964643131666130306466222c2274797065223a2241646472657373227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f9091ff9091bb90829696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f205472616e73666572732061204e6f646544656c656761746f72206f626a6563742066726f6d20616e20617574686f72697a657273206163636f6f756e740a2f2f20616e64206164647320746865204e6f646544656c656761746f7220746f20616e6f74686572206163636f756e7473205374616b696e6720436f6c6c656374696f6e0a2f2f206964656e7469666965642062792074686520746f20416464726573732e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433322c20746f3a204164647265737329207b0a202020206c65742066726f6d5374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a202020206c657420746f5374616b696e67436f6c6c656374696f6e4361703a2026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a20202020202020202f2f20546865206163636f756e7420746f207472616e7366657220746865204e6f646544656c656761746f72206f626a65637420746f206d757374206861766520612076616c6964205374616b696e6720436f6c6c656374696f6e20696e206f7264657220746f207265636569766520746865204e6f646544656c656761746f722e0a20202020202020206966202821466c6f775374616b696e67436f6c6c656374696f6e2e646f65734163636f756e74486176655374616b696e67436f6c6c656374696f6e28616464726573733a20746f2929207b0a20202020202020202020202070616e6963282244657374696e6174696f6e206163636f756e74206d75737420686176652061205374616b696e6720436f6c6c656374696f6e207365742075702e22290a20202020202020207d0a0a20202020202020202f2f204765742061207265666572656e636520746f2074686520617574686f72697a657273205374616b696e67436f6c6c656374696f6e0a202020202020202073656c662e66726f6d5374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a0a20202020202020202f2f2047657420746865205075626c69634163636f756e74206f6620746865206163636f756e7420746f207472616e7366657220746865204e6f646544656c656761746f7220746f2e200a20202020202020206c657420746f4163636f756e74203d206765744163636f756e7428746f290a0a20202020202020202f2f20426f72726f772061206361706162696c69747920746f20746865207075626c6963206d6574686f647320617661696c61626c65206f6e2074686520726563656976657273205374616b696e67436f6c6c656374696f6e2e0a202020202020202073656c662e746f5374616b696e67436f6c6c656374696f6e436170203d20746f4163636f756e742e6361706162696c69746965730a2020202020202020202020202e626f72726f773c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e28466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e5075626c696350617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572616d636520746f2061205374616b696e67436f6c6c656374696f6e20696e207468652072656365697665722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a20202020202020202f2f2052656d6f766520746865204e6f646544656c656761746f722066726f6d2074686520617574686f72697a657273205374616b696e67436f6c6c656374696f6e2e0a20202020202020206c6574206e6f646544656c656761746f72203c2d2073656c662e66726f6d5374616b696e67436f6c6c656374696f6e5265662e72656d6f766544656c656761746f72286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f724944290a0a20202020202020202f2f204465706f73697420746865204e6f646544656c656761746f7220746f2074686520726563656976657273205374616b696e67436f6c6c656374696f6e2e0a202020202020202073656c662e746f5374616b696e67436f6c6c656374696f6e4361702e61646444656c656761746f724f626a656374283c2d206e6f646544656c656761746f7221290a202020207d0a7df8adb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227d9e7b2276616c7565223a223432222c2274797065223a2255496e743332227daf7b2276616c7565223a22307865343637623964643131666130306466222c2274797065223a2241646472657373227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02f9fa239cb78b3e07b8f8d56e173e2673b4b53aeb07d507a769c8d96eaf400b8d11e2107d2ccd96cb6b3fa3a704491dcd9e1736215137304e0494243c21befc765472616e736665722044656c656761746f720003044e6f646520494400000144656c656761746f72204944000155496e743332000301416464726573730002416464726573730003",
    "hash": "11e2107d2ccd96cb6b3fa3a704491dcd9e1736215137304e0494243c21befc76"
  },
  {
    "title": "SCO.15 - Withdraw From Machine Account",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Request to withdraw tokens from the machine account\n/// The tokens are automatically deposited to the unlocked account vault\n\ntransaction(nodeID: String, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawFromMachineAccount(nodeID: nodeID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Request to withdraw tokens from the machine account\n/// The tokens are automatically deposited to the unlocked account vault\n\ntransaction(nodeID: String, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawFromMachineAccount(nodeID: nodeID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90415b90341696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f205265717565737420746f20776974686472617720746f6b656e732066726f6d20746865206d616368696e65206163636f756e740a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e776974686472617746726f6d4d616368696e654163636f756e74286e6f646549443a206e6f646549442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af88fb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90419f90415b90341696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f205265717565737420746f20776974686472617720746f6b656e732066726f6d20746865206d616368696e65206163636f756e740a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e776974686472617746726f6d4d616368696e654163636f756e74286e6f646549443a206e6f646549442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af88fb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02fdd40862af04dc36dd0e9e727966c6f81dd6be8246b9c70afd18297aac9e86a8e12b16ef4218b8ce52189ae5814b381272bf473436978fae94d01c10c036903457697468647261772046726f6d204d616368696e65204163636f756e740002044e6f6465204944000001416d6f756e7400015546697836340003",
    "hash": "e12b16ef4218b8ce52189ae5814b381272bf473436978fae94d01c10c0369034"
  },
  {
    "title": "SCO.16 - Update Networking Address",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Changes the networking address for the specified node\n\ntransaction(nodeID: String, newAddress: String) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.updateNetworkingAddress(nodeID: nodeID, newAddress: newAddress)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "flow-node.test:3569",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Changes the networking address for the specified node\n\ntransaction(nodeID: String, newAddress: String) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow a reference to a StakingCollection in the primary user's account\")\n    }\n\n    execute {\n        self.stakingCollectionRef.updateNetworkingAddress(nodeID: nodeID, newAddress: newAddress)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "flow-node.test:3569",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f903d6b90303696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f204368616e67657320746865206e6574776f726b696e67206164647265737320666f722074686520737065636966696564206e6f64650a0a7472616e73616374696f6e286e6f646549443a20537472696e672c206e6577416464726573733a20537472696e6729207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7570646174654e6574776f726b696e6741646472657373286e6f646549443a206e6f646549442c206e6577416464726573733a206e657741646472657373290a202020207d0a7d0af88eb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227daf7b2276616c7565223a22666c6f772d6e6f64652e746573743a33353639222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f903daf903d6b90303696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f204368616e67657320746865206e6574776f726b696e67206164647265737320666f722074686520737065636966696564206e6f64650a0a7472616e73616374696f6e286e6f646549443a20537472696e672c206e6577416464726573733a20537472696e6729207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061207265666572656e636520746f2061205374616b696e67436f6c6c656374696f6e20696e20746865207072696d61727920757365722773206163636f756e7422290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7570646174654e6574776f726b696e6741646472657373286e6f646549443a206e6f646549442c206e6577416464726573733a206e657741646472657373290a202020207d0a7d0af88eb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227daf7b2276616c7565223a22666c6f772d6e6f64652e746573743a33353639222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "023a68789d8cd56e6c7b064057045a56340746aac710db57700de2c33eb6610e5f68d24560d9e49318dca82ab0975f526a8663d934225f0cb715cd1ff188def16d557064617465204e6574776f726b696e6720416464726573730002044e6f6465204944000004416464726573730001",
    "hash": "68d24560d9e49318dca82ab0975f526a8663d934225f0cb715cd1ff188def16d"
  }
]