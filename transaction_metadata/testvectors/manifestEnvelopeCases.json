[
  {
    "title": "FA.01 - Create Account",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import Crypto\n\ntransaction(key: String, signatureAlgorithm: UInt8, hashAlgorithm: UInt8) {\n\tprepare(signer: auth(BorrowValue, Storage) &Account) {\n\t\tpre {\n\t\t\tsignatureAlgorithm == 1 || signatureAlgorithm == 2:\n                \"Cannot add Key: Must provide a signature algorithm raw value that corresponds to \"\n                .concat(\"one of the available signature algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(signatureAlgorithm.toString())\n                .concat(\" but the options are either 1 (ECDSA_P256) or 2 (ECDSA_secp256k1).\")\n\t\t\thashAlgorithm == 1 || hashAlgorithm == 3:\n                \"Cannot add Key: Must provide a hash algorithm raw value that corresponds to \"\n                .concat(\"one of of the available hash algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(hashAlgorithm.toString())\n                .concat(\" but the options are either 1 (SHA2_256) or 3 (SHA3_256).\")\n\t\t}\n\n\t\tlet publicKey = PublicKey(\n\t\t\tpublicKey: key.decodeHex(),\n\t\t\tsignatureAlgorithm: SignatureAlgorithm(rawValue: signatureAlgorithm)!\n\t\t)\n\n\t\tlet account = Account(payer: signer)\n\n\t\taccount.keys.add(publicKey: publicKey, hashAlgorithm: HashAlgorithm(rawValue: hashAlgorithm)!, weight: 1000.0)\n\t}\n}",
      "arguments": [
        {
          "type": "String",
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import Crypto\n\ntransaction(key: String, signatureAlgorithm: UInt8, hashAlgorithm: UInt8) {\n\tprepare(signer: auth(BorrowValue, Storage) &Account) {\n\t\tpre {\n\t\t\tsignatureAlgorithm == 1 || signatureAlgorithm == 2:\n                \"Cannot add Key: Must provide a signature algorithm raw value that corresponds to \"\n                .concat(\"one of the available signature algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(signatureAlgorithm.toString())\n                .concat(\" but the options are either 1 (ECDSA_P256) or 2 (ECDSA_secp256k1).\")\n\t\t\thashAlgorithm == 1 || hashAlgorithm == 3:\n                \"Cannot add Key: Must provide a hash algorithm raw value that corresponds to \"\n                .concat(\"one of of the available hash algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(hashAlgorithm.toString())\n                .concat(\" but the options are either 1 (SHA2_256) or 3 (SHA3_256).\")\n\t\t}\n\n\t\tlet publicKey = PublicKey(\n\t\t\tpublicKey: key.decodeHex(),\n\t\t\tsignatureAlgorithm: SignatureAlgorithm(rawValue: signatureAlgorithm)!\n\t\t)\n\n\t\tlet account = Account(payer: signer)\n\n\t\taccount.keys.add(publicKey: publicKey, hashAlgorithm: HashAlgorithm(rawValue: hashAlgorithm)!, weight: 1000.0)\n\t}\n}",
      "arguments": [
        {
          "type": "String",
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9060bb904e0696d706f72742043727970746f0a0a7472616e73616374696f6e286b65793a20537472696e672c207369676e6174757265416c676f726974686d3a2055496e74382c2068617368416c676f726974686d3a2055496e743829207b0a0970726570617265287369676e65723a206175746828426f72726f7756616c75652c2053746f726167652920264163636f756e7429207b0a0909707265207b0a0909097369676e6174757265416c676f726974686d203d3d2031207c7c207369676e6174757265416c676f726974686d203d3d20323a0a202020202020202020202020202020202243616e6e6f7420616464204b65793a204d7573742070726f766964652061207369676e617475726520616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f662074686520617661696c61626c65207369676e617475726520616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e636174287369676e6174757265416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e7320617265206569746865722031202845434453415f5032353629206f722032202845434453415f736563703235366b31292e22290a09090968617368416c676f726974686d203d3d2031207c7c2068617368416c676f726974686d203d3d20333a0a202020202020202020202020202020202243616e6e6f7420616464204b65793a204d7573742070726f766964652061206861736820616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f66206f662074686520617661696c61626c65206861736820616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e6361742868617368416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e73206172652065697468657220312028534841325f32353629206f7220332028534841335f323536292e22290a09097d0a0a09096c6574207075626c69634b6579203d205075626c69634b6579280a0909097075626c69634b65793a206b65792e6465636f646548657828292c0a0909097369676e6174757265416c676f726974686d3a205369676e6174757265416c676f726974686d2872617756616c75653a207369676e6174757265416c676f726974686d29210a0909290a0a09096c6574206163636f756e74203d204163636f756e742870617965723a207369676e6572290a0a09096163636f756e742e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2048617368416c676f726974686d2872617756616c75653a2068617368416c676f726974686d29212c207765696768743a20313030302e30290a097d0a7df8e6b8aa7b2274797065223a22537472696e67222c2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f9060ff9060bb904e0696d706f72742043727970746f0a0a7472616e73616374696f6e286b65793a20537472696e672c207369676e6174757265416c676f726974686d3a2055496e74382c2068617368416c676f726974686d3a2055496e743829207b0a0970726570617265287369676e65723a206175746828426f72726f7756616c75652c2053746f726167652920264163636f756e7429207b0a0909707265207b0a0909097369676e6174757265416c676f726974686d203d3d2031207c7c207369676e6174757265416c676f726974686d203d3d20323a0a202020202020202020202020202020202243616e6e6f7420616464204b65793a204d7573742070726f766964652061207369676e617475726520616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f662074686520617661696c61626c65207369676e617475726520616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e636174287369676e6174757265416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e7320617265206569746865722031202845434453415f5032353629206f722032202845434453415f736563703235366b31292e22290a09090968617368416c676f726974686d203d3d2031207c7c2068617368416c676f726974686d203d3d20333a0a202020202020202020202020202020202243616e6e6f7420616464204b65793a204d7573742070726f766964652061206861736820616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f66206f662074686520617661696c61626c65206861736820616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e6361742868617368416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e73206172652065697468657220312028534841325f32353629206f7220332028534841335f323536292e22290a09097d0a0a09096c6574207075626c69634b6579203d205075626c69634b6579280a0909097075626c69634b65793a206b65792e6465636f646548657828292c0a0909097369676e6174757265416c676f726974686d3a205369676e6174757265416c676f726974686d2872617756616c75653a207369676e6174757265416c676f726974686d29210a0909290a0a09096c6574206163636f756e74203d204163636f756e742870617965723a207369676e6572290a0a09096163636f756e742e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2048617368416c676f726974686d2872617756616c75653a2068617368416c676f726974686d29212c207765696768743a20313030302e30290a097d0a7df8e6b8aa7b2274797065223a22537472696e67222c2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "029e46752d27947cc85e5fb62f4deecb12bd7b2a721211ef944acf528bd648dcd79e46752d27947cc85e5fb62f4deecb12bd7b2a721211ef944acf528bd648dcd7437265617465204163636f756e740003045075626c6963204b65790000065369676e617475726520416c672e0001054861736820416c672e0002",
    "hash": "9e46752d27947cc85e5fb62f4deecb12bd7b2a721211ef944acf528bd648dcd7"
  },
  {
    "title": "FA.02 - Add Key",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import Crypto\n\ntransaction(key: String, signatureAlgorithm: UInt8, hashAlgorithm: UInt8, weight: UFix64) {\n\n\tprepare(signer: auth(AddKey) &Account) {\n\t\tpre {\n\t\t\tsignatureAlgorithm == 1 || signatureAlgorithm == 2:\n                \"Cannot add Key: Must provide a signature algorithm raw value that corresponds to \"\n                .concat(\"one of the available signature algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(signatureAlgorithm.toString())\n                .concat(\" but the options are either 1 (ECDSA_P256) or 2 (ECDSA_secp256k1).\")\n\t\t\thashAlgorithm == 1 || hashAlgorithm == 3:\n                \"Cannot add Key: Must provide a hash algorithm raw value that corresponds to \"\n                .concat(\"one of of the available hash algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(hashAlgorithm.toString())\n                .concat(\" but the options are either 1 (SHA2_256) or 3 (SHA3_256).\")\n\t\t\tweight <= 1000.0:\n                \"Cannot add Key: The key weight must be between 0 and 1000.\"\n                .concat(\" You provided \").concat(weight.toString()).concat(\" which is invalid.\")\n\t\t}\n\t\t\n\t\tlet publicKey = PublicKey(\n\t\t\tpublicKey: key.decodeHex(),\n\t\t\tsignatureAlgorithm: SignatureAlgorithm(rawValue: signatureAlgorithm)!\n\t\t)\n\n\t\tsigner.keys.add(publicKey: publicKey, hashAlgorithm: HashAlgorithm(rawValue: hashAlgorithm)!, weight: weight)\n\t}\n}",
      "arguments": [
        {
          "type": "String",
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1000.00000000",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import Crypto\n\ntransaction(key: String, signatureAlgorithm: UInt8, hashAlgorithm: UInt8, weight: UFix64) {\n\n\tprepare(signer: auth(AddKey) &Account) {\n\t\tpre {\n\t\t\tsignatureAlgorithm == 1 || signatureAlgorithm == 2:\n                \"Cannot add Key: Must provide a signature algorithm raw value that corresponds to \"\n                .concat(\"one of the available signature algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(signatureAlgorithm.toString())\n                .concat(\" but the options are either 1 (ECDSA_P256) or 2 (ECDSA_secp256k1).\")\n\t\t\thashAlgorithm == 1 || hashAlgorithm == 3:\n                \"Cannot add Key: Must provide a hash algorithm raw value that corresponds to \"\n                .concat(\"one of of the available hash algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(hashAlgorithm.toString())\n                .concat(\" but the options are either 1 (SHA2_256) or 3 (SHA3_256).\")\n\t\t\tweight <= 1000.0:\n                \"Cannot add Key: The key weight must be between 0 and 1000.\"\n                .concat(\" You provided \").concat(weight.toString()).concat(\" which is invalid.\")\n\t\t}\n\t\t\n\t\tlet publicKey = PublicKey(\n\t\t\tpublicKey: key.decodeHex(),\n\t\t\tsignatureAlgorithm: SignatureAlgorithm(rawValue: signatureAlgorithm)!\n\t\t)\n\n\t\tsigner.keys.add(publicKey: publicKey, hashAlgorithm: HashAlgorithm(rawValue: hashAlgorithm)!, weight: weight)\n\t}\n}",
      "arguments": [
        {
          "type": "String",
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1000.00000000",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f906d5b9057f696d706f72742043727970746f0a0a7472616e73616374696f6e286b65793a20537472696e672c207369676e6174757265416c676f726974686d3a2055496e74382c2068617368416c676f726974686d3a2055496e74382c207765696768743a2055466978363429207b0a0a0970726570617265287369676e65723a2061757468284164644b65792920264163636f756e7429207b0a0909707265207b0a0909097369676e6174757265416c676f726974686d203d3d2031207c7c207369676e6174757265416c676f726974686d203d3d20323a0a202020202020202020202020202020202243616e6e6f7420616464204b65793a204d7573742070726f766964652061207369676e617475726520616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f662074686520617661696c61626c65207369676e617475726520616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e636174287369676e6174757265416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e7320617265206569746865722031202845434453415f5032353629206f722032202845434453415f736563703235366b31292e22290a09090968617368416c676f726974686d203d3d2031207c7c2068617368416c676f726974686d203d3d20333a0a202020202020202020202020202020202243616e6e6f7420616464204b65793a204d7573742070726f766964652061206861736820616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f66206f662074686520617661696c61626c65206861736820616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e6361742868617368416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e73206172652065697468657220312028534841325f32353629206f7220332028534841335f323536292e22290a090909776569676874203c3d20313030302e303a0a202020202020202020202020202020202243616e6e6f7420616464204b65793a20546865206b657920776569676874206d757374206265206265747765656e203020616e6420313030302e220a202020202020202020202020202020202e636f6e636174282220596f752070726f76696465642022292e636f6e636174287765696768742e746f537472696e672829292e636f6e636174282220776869636820697320696e76616c69642e22290a09097d0a09090a09096c6574207075626c69634b6579203d205075626c69634b6579280a0909097075626c69634b65793a206b65792e6465636f646548657828292c0a0909097369676e6174757265416c676f726974686d3a205369676e6174757265416c676f726974686d2872617756616c75653a207369676e6174757265416c676f726974686d29210a0909290a0a09097369676e65722e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2048617368416c676f726974686d2872617756616c75653a2068617368416c676f726974686d29212c207765696768743a20776569676874290a097d0a7df90110b8aa7b2274797065223a22537472696e67222c2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da97b2276616c7565223a22313030302e3030303030303030222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f906d9f906d5b9057f696d706f72742043727970746f0a0a7472616e73616374696f6e286b65793a20537472696e672c207369676e6174757265416c676f726974686d3a2055496e74382c2068617368416c676f726974686d3a2055496e74382c207765696768743a2055466978363429207b0a0a0970726570617265287369676e65723a2061757468284164644b65792920264163636f756e7429207b0a0909707265207b0a0909097369676e6174757265416c676f726974686d203d3d2031207c7c207369676e6174757265416c676f726974686d203d3d20323a0a202020202020202020202020202020202243616e6e6f7420616464204b65793a204d7573742070726f766964652061207369676e617475726520616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f662074686520617661696c61626c65207369676e617475726520616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e636174287369676e6174757265416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e7320617265206569746865722031202845434453415f5032353629206f722032202845434453415f736563703235366b31292e22290a09090968617368416c676f726974686d203d3d2031207c7c2068617368416c676f726974686d203d3d20333a0a202020202020202020202020202020202243616e6e6f7420616464204b65793a204d7573742070726f766964652061206861736820616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f66206f662074686520617661696c61626c65206861736820616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e6361742868617368416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e73206172652065697468657220312028534841325f32353629206f7220332028534841335f323536292e22290a090909776569676874203c3d20313030302e303a0a202020202020202020202020202020202243616e6e6f7420616464204b65793a20546865206b657920776569676874206d757374206265206265747765656e203020616e6420313030302e220a202020202020202020202020202020202e636f6e636174282220596f752070726f76696465642022292e636f6e636174287765696768742e746f537472696e672829292e636f6e636174282220776869636820697320696e76616c69642e22290a09097d0a09090a09096c6574207075626c69634b6579203d205075626c69634b6579280a0909097075626c69634b65793a206b65792e6465636f646548657828292c0a0909097369676e6174757265416c676f726974686d3a205369676e6174757265416c676f726974686d2872617756616c75653a207369676e6174757265416c676f726974686d29210a0909290a0a09097369676e65722e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2048617368416c676f726974686d2872617756616c75653a2068617368416c676f726974686d29212c207765696768743a20776569676874290a097d0a7df90110b8aa7b2274797065223a22537472696e67222c2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da97b2276616c7565223a22313030302e3030303030303030222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "025b26465efc98fbc2a41c2c3c170eb5d74886745b34571d6041611d268a3f90285b26465efc98fbc2a41c2c3c170eb5d74886745b34571d6041611d268a3f9028416464204b65790004045075626c6963204b65790000065369676e617475726520416c672e0001054861736820416c672e0002014b65792057656967687400035546697836340003",
    "hash": "5b26465efc98fbc2a41c2c3c170eb5d74886745b34571d6041611d268a3f9028"
  },
  {
    "title": "FA.03 - Remove Key",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "transaction(keyIndex: Int) {\n\tprepare(signer: auth(RevokeKey) &Account) {\n\t\tif let key = signer.keys.get(keyIndex: keyIndex) {\n\t\t\tsigner.keys.revoke(keyIndex: keyIndex)\n\t\t} else {\n            panic(\"Cannot revoke key: No key with the index \"\n                  .concat(keyIndex.toString())\n                  .concat(\" exists on the authorizer's account.\"))\n\t\t}\n\t}\n}",
      "arguments": [
        {
          "type": "Int",
          "value": "1"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "transaction(keyIndex: Int) {\n\tprepare(signer: auth(RevokeKey) &Account) {\n\t\tif let key = signer.keys.get(keyIndex: keyIndex) {\n\t\t\tsigner.keys.revoke(keyIndex: keyIndex)\n\t\t} else {\n            panic(\"Cannot revoke key: No key with the index \"\n                  .concat(keyIndex.toString())\n                  .concat(\" exists on the authorizer's account.\"))\n\t\t}\n\t}\n}",
      "arguments": [
        {
          "type": "Int",
          "value": "1"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f901cbb9016c7472616e73616374696f6e286b6579496e6465783a20496e7429207b0a0970726570617265287369676e65723a2061757468285265766f6b654b65792920264163636f756e7429207b0a09096966206c6574206b6579203d207369676e65722e6b6579732e676574286b6579496e6465783a206b6579496e64657829207b0a0909097369676e65722e6b6579732e7265766f6b65286b6579496e6465783a206b6579496e646578290a09097d20656c7365207b0a20202020202020202020202070616e6963282243616e6e6f74207265766f6b65206b65793a204e6f206b657920776974682074686520696e64657820220a2020202020202020202020202020202020202e636f6e636174286b6579496e6465782e746f537472696e672829290a2020202020202020202020202020202020202e636f6e636174282220657869737473206f6e2074686520617574686f72697a65722773206163636f756e742e2229290a09097d0a097d0a7ddb9a7b2274797065223a22496e74222c2276616c7565223a2231227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f901cff901cbb9016c7472616e73616374696f6e286b6579496e6465783a20496e7429207b0a0970726570617265287369676e65723a2061757468285265766f6b654b65792920264163636f756e7429207b0a09096966206c6574206b6579203d207369676e65722e6b6579732e676574286b6579496e6465783a206b6579496e64657829207b0a0909097369676e65722e6b6579732e7265766f6b65286b6579496e6465783a206b6579496e646578290a09097d20656c7365207b0a20202020202020202020202070616e6963282243616e6e6f74207265766f6b65206b65793a204e6f206b657920776974682074686520696e64657820220a2020202020202020202020202020202020202e636f6e636174286b6579496e6465782e746f537472696e672829290a2020202020202020202020202020202020202e636f6e636174282220657869737473206f6e2074686520617574686f72697a65722773206163636f756e742e2229290a09097d0a097d0a7ddb9a7b2274797065223a22496e74222c2276616c7565223a2231227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "0269409133294a24bc167375f47043604676b7fdf1dde9396540c13ff540aa928869409133294a24bc167375f47043604676b7fdf1dde9396540c13ff540aa928852656d6f7665204b65790001014b657920496e6465780000496e740003",
    "hash": "69409133294a24bc167375f47043604676b7fdf1dde9396540c13ff540aa9288"
  },
  {
    "title": "FT.01 - Setup Fungible Token Vault",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FungibleToken from 0x9a0766d93b6608b7\nimport FungibleTokenMetadataViews from 0x9a0766d93b6608b7\n\n#interaction (\n  version: \"1.0.0\",\n\ttitle: \"Generic FT Transfer with Contract Address and Name\",\n\tdescription: \"Transfer any Fungible Token by providing the contract address and name\",\n\tlanguage: \"en-US\",\n)\n\n/// This transaction is what an account would run\n/// to set itself up to manage fungible tokens. This function\n/// uses views to know where to set up the vault\n/// in storage and to create the empty vault.\n///\n/// @param contractAddress: The address of the contract\n///        that defines the tokens to initialize\n/// @param contractName: The name of the contract\n///        that defines the tokens to initialize. Ex: \"FlowToken\"\n\ntransaction(contractAddress: Address, contractName: String) {\n\n    prepare(signer: auth(SaveValue, Capabilities) &Account) {\n        // Borrow a reference to the vault stored on the passed account at the passed publicPath\n        let resolverRef = getAccount(contractAddress)\n            .contracts.borrow<&{FungibleToken}>(name: contractName)\n                ?? panic(\"Could not borrow FungibleToken reference to the contract. Make sure the provided contract name (\"\n                          .concat(contractName).concat(\") and address (\").concat(contractAddress.toString()).concat(\") are correct!\"))\n\n        // Use that reference to retrieve the FTView \n        let ftVaultData = resolverRef.resolveContractView(resourceType: nil, viewType: Type<FungibleTokenMetadataViews.FTVaultData>()) as! FungibleTokenMetadataViews.FTVaultData?\n            ?? panic(\"Could not resolve FTVaultData view. The \".concat(contractName)\n                .concat(\" contract needs to implement the FTVaultData Metadata view in order to execute this transaction.\"))\n\n        // Create a new empty vault using the createEmptyVault function inside the FTVaultData\n        let emptyVault <-ftVaultData.createEmptyVault()\n\n        // Save it to the account\n        signer.storage.save(<-emptyVault, to: ftVaultData.storagePath)\n        \n        // Create a public capability for the vault which includes the .Resolver interface\n        let vaultCap = signer.capabilities.storage.issue<&{FungibleToken.Vault}>(ftVaultData.storagePath)\n        signer.capabilities.publish(vaultCap, at: ftVaultData.metadataPath)\n\n        // Create a public capability for the vault exposing the receiver interface\n        let receiverCap = signer.capabilities.storage.issue<&{FungibleToken.Receiver}>(ftVaultData.storagePath)\n        signer.capabilities.publish(receiverCap, at: ftVaultData.receiverPath)\n\n    }\n}\n ",
      "arguments": [
        {
          "type": "Address",
          "value": "0x8c5303eaa26202d6"
        },
        {
          "value": "FiatToken",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FungibleToken from 0x9a0766d93b6608b7\nimport FungibleTokenMetadataViews from 0x9a0766d93b6608b7\n\n#interaction (\n  version: \"1.0.0\",\n\ttitle: \"Generic FT Transfer with Contract Address and Name\",\n\tdescription: \"Transfer any Fungible Token by providing the contract address and name\",\n\tlanguage: \"en-US\",\n)\n\n/// This transaction is what an account would run\n/// to set itself up to manage fungible tokens. This function\n/// uses views to know where to set up the vault\n/// in storage and to create the empty vault.\n///\n/// @param contractAddress: The address of the contract\n///        that defines the tokens to initialize\n/// @param contractName: The name of the contract\n///        that defines the tokens to initialize. Ex: \"FlowToken\"\n\ntransaction(contractAddress: Address, contractName: String) {\n\n    prepare(signer: auth(SaveValue, Capabilities) &Account) {\n        // Borrow a reference to the vault stored on the passed account at the passed publicPath\n        let resolverRef = getAccount(contractAddress)\n            .contracts.borrow<&{FungibleToken}>(name: contractName)\n                ?? panic(\"Could not borrow FungibleToken reference to the contract. Make sure the provided contract name (\"\n                          .concat(contractName).concat(\") and address (\").concat(contractAddress.toString()).concat(\") are correct!\"))\n\n        // Use that reference to retrieve the FTView \n        let ftVaultData = resolverRef.resolveContractView(resourceType: nil, viewType: Type<FungibleTokenMetadataViews.FTVaultData>()) as! FungibleTokenMetadataViews.FTVaultData?\n            ?? panic(\"Could not resolve FTVaultData view. The \".concat(contractName)\n                .concat(\" contract needs to implement the FTVaultData Metadata view in order to execute this transaction.\"))\n\n        // Create a new empty vault using the createEmptyVault function inside the FTVaultData\n        let emptyVault <-ftVaultData.createEmptyVault()\n\n        // Save it to the account\n        signer.storage.save(<-emptyVault, to: ftVaultData.storagePath)\n        \n        // Create a public capability for the vault which includes the .Resolver interface\n        let vaultCap = signer.capabilities.storage.issue<&{FungibleToken.Vault}>(ftVaultData.storagePath)\n        signer.capabilities.publish(vaultCap, at: ftVaultData.metadataPath)\n\n        // Create a public capability for the vault exposing the receiver interface\n        let receiverCap = signer.capabilities.storage.issue<&{FungibleToken.Receiver}>(ftVaultData.storagePath)\n        signer.capabilities.publish(receiverCap, at: ftVaultData.receiverPath)\n\n    }\n}\n ",
      "arguments": [
        {
          "type": "Address",
          "value": "0x8c5303eaa26202d6"
        },
        {
          "value": "FiatToken",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90ad5b90a3a696d706f72742046756e6769626c65546f6b656e2066726f6d203078396130373636643933623636303862370a696d706f72742046756e6769626c65546f6b656e4d6574616461746156696577732066726f6d203078396130373636643933623636303862370a0a23696e746572616374696f6e20280a202076657273696f6e3a2022312e302e30222c0a097469746c653a202247656e65726963204654205472616e73666572207769746820436f6e7472616374204164647265737320616e64204e616d65222c0a096465736372697074696f6e3a20225472616e7366657220616e792046756e6769626c6520546f6b656e2062792070726f766964696e672074686520636f6e7472616374206164647265737320616e64206e616d65222c0a096c616e67756167653a2022656e2d5553222c0a290a0a2f2f2f2054686973207472616e73616374696f6e206973207768617420616e206163636f756e7420776f756c642072756e0a2f2f2f20746f2073657420697473656c6620757020746f206d616e6167652066756e6769626c6520746f6b656e732e20546869732066756e6374696f6e0a2f2f2f207573657320766965777320746f206b6e6f7720776865726520746f2073657420757020746865207661756c740a2f2f2f20696e2073746f7261676520616e6420746f206372656174652074686520656d707479207661756c742e0a2f2f2f0a2f2f2f2040706172616d20636f6e7472616374416464726573733a205468652061646472657373206f662074686520636f6e74726163740a2f2f2f20202020202020207468617420646566696e65732074686520746f6b656e7320746f20696e697469616c697a650a2f2f2f2040706172616d20636f6e74726163744e616d653a20546865206e616d65206f662074686520636f6e74726163740a2f2f2f20202020202020207468617420646566696e65732074686520746f6b656e7320746f20696e697469616c697a652e2045783a2022466c6f77546f6b656e220a0a7472616e73616374696f6e28636f6e7472616374416464726573733a20416464726573732c20636f6e74726163744e616d653a20537472696e6729207b0a0a2020202070726570617265287369676e65723a2061757468285361766556616c75652c204361706162696c69746965732920264163636f756e7429207b0a20202020202020202f2f20426f72726f772061207265666572656e636520746f20746865207661756c742073746f726564206f6e2074686520706173736564206163636f756e742061742074686520706173736564207075626c6963506174680a20202020202020206c6574207265736f6c766572526566203d206765744163636f756e7428636f6e747261637441646472657373290a2020202020202020202020202e636f6e7472616374732e626f72726f773c267b46756e6769626c65546f6b656e7d3e286e616d653a20636f6e74726163744e616d65290a202020202020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772046756e6769626c65546f6b656e207265666572656e636520746f2074686520636f6e74726163742e204d616b652073757265207468652070726f766964656420636f6e7472616374206e616d652028220a20202020202020202020202020202020202020202020202020202e636f6e63617428636f6e74726163744e616d65292e636f6e63617428222920616e642061646472657373202822292e636f6e63617428636f6e7472616374416464726573732e746f537472696e672829292e636f6e6361742822292061726520636f7272656374212229290a0a20202020202020202f2f205573652074686174207265666572656e636520746f2072657472696576652074686520465456696577200a20202020202020206c65742066745661756c7444617461203d207265736f6c7665725265662e7265736f6c7665436f6e747261637456696577287265736f75726365547970653a206e696c2c2076696577547970653a20547970653c46756e6769626c65546f6b656e4d6574616461746156696577732e46545661756c74446174613e282929206173212046756e6769626c65546f6b656e4d6574616461746156696577732e46545661756c74446174613f0a2020202020202020202020203f3f2070616e69632822436f756c64206e6f74207265736f6c76652046545661756c744461746120766965772e2054686520222e636f6e63617428636f6e74726163744e616d65290a202020202020202020202020202020202e636f6e636174282220636f6e7472616374206e6565647320746f20696d706c656d656e74207468652046545661756c7444617461204d65746164617461207669657720696e206f7264657220746f20657865637574652074686973207472616e73616374696f6e2e2229290a0a20202020202020202f2f204372656174652061206e657720656d707479207661756c74207573696e672074686520637265617465456d7074795661756c742066756e6374696f6e20696e73696465207468652046545661756c74446174610a20202020202020206c657420656d7074795661756c74203c2d66745661756c74446174612e637265617465456d7074795661756c7428290a0a20202020202020202f2f205361766520697420746f20746865206163636f756e740a20202020202020207369676e65722e73746f726167652e73617665283c2d656d7074795661756c742c20746f3a2066745661756c74446174612e73746f7261676550617468290a20202020202020200a20202020202020202f2f204372656174652061207075626c6963206361706162696c69747920666f7220746865207661756c7420776869636820696e636c7564657320746865202e5265736f6c76657220696e746572666163650a20202020202020206c6574207661756c74436170203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c267b46756e6769626c65546f6b656e2e5661756c747d3e2866745661756c74446174612e73746f7261676550617468290a20202020202020207369676e65722e6361706162696c69746965732e7075626c697368287661756c744361702c2061743a2066745661756c74446174612e6d6574616461746150617468290a0a20202020202020202f2f204372656174652061207075626c6963206361706162696c69747920666f7220746865207661756c74206578706f73696e672074686520726563656976657220696e746572666163650a20202020202020206c6574207265636569766572436170203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c267b46756e6769626c65546f6b656e2e52656365697665727d3e2866745661756c74446174612e73746f7261676550617468290a20202020202020207369676e65722e6361706162696c69746965732e7075626c6973682872656365697665724361702c2061743a2066745661756c74446174612e726563656976657250617468290a0a202020207d0a7d0a20f856af7b2274797065223a2241646472657373222c2276616c7565223a22307838633533303365616132363230326436227da57b2276616c7565223a2246696174546f6b656e222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90ad9f90ad5b90a3a696d706f72742046756e6769626c65546f6b656e2066726f6d203078396130373636643933623636303862370a696d706f72742046756e6769626c65546f6b656e4d6574616461746156696577732066726f6d203078396130373636643933623636303862370a0a23696e746572616374696f6e20280a202076657273696f6e3a2022312e302e30222c0a097469746c653a202247656e65726963204654205472616e73666572207769746820436f6e7472616374204164647265737320616e64204e616d65222c0a096465736372697074696f6e3a20225472616e7366657220616e792046756e6769626c6520546f6b656e2062792070726f766964696e672074686520636f6e7472616374206164647265737320616e64206e616d65222c0a096c616e67756167653a2022656e2d5553222c0a290a0a2f2f2f2054686973207472616e73616374696f6e206973207768617420616e206163636f756e7420776f756c642072756e0a2f2f2f20746f2073657420697473656c6620757020746f206d616e6167652066756e6769626c6520746f6b656e732e20546869732066756e6374696f6e0a2f2f2f207573657320766965777320746f206b6e6f7720776865726520746f2073657420757020746865207661756c740a2f2f2f20696e2073746f7261676520616e6420746f206372656174652074686520656d707479207661756c742e0a2f2f2f0a2f2f2f2040706172616d20636f6e7472616374416464726573733a205468652061646472657373206f662074686520636f6e74726163740a2f2f2f20202020202020207468617420646566696e65732074686520746f6b656e7320746f20696e697469616c697a650a2f2f2f2040706172616d20636f6e74726163744e616d653a20546865206e616d65206f662074686520636f6e74726163740a2f2f2f20202020202020207468617420646566696e65732074686520746f6b656e7320746f20696e697469616c697a652e2045783a2022466c6f77546f6b656e220a0a7472616e73616374696f6e28636f6e7472616374416464726573733a20416464726573732c20636f6e74726163744e616d653a20537472696e6729207b0a0a2020202070726570617265287369676e65723a2061757468285361766556616c75652c204361706162696c69746965732920264163636f756e7429207b0a20202020202020202f2f20426f72726f772061207265666572656e636520746f20746865207661756c742073746f726564206f6e2074686520706173736564206163636f756e742061742074686520706173736564207075626c6963506174680a20202020202020206c6574207265736f6c766572526566203d206765744163636f756e7428636f6e747261637441646472657373290a2020202020202020202020202e636f6e7472616374732e626f72726f773c267b46756e6769626c65546f6b656e7d3e286e616d653a20636f6e74726163744e616d65290a202020202020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772046756e6769626c65546f6b656e207265666572656e636520746f2074686520636f6e74726163742e204d616b652073757265207468652070726f766964656420636f6e7472616374206e616d652028220a20202020202020202020202020202020202020202020202020202e636f6e63617428636f6e74726163744e616d65292e636f6e63617428222920616e642061646472657373202822292e636f6e63617428636f6e7472616374416464726573732e746f537472696e672829292e636f6e6361742822292061726520636f7272656374212229290a0a20202020202020202f2f205573652074686174207265666572656e636520746f2072657472696576652074686520465456696577200a20202020202020206c65742066745661756c7444617461203d207265736f6c7665725265662e7265736f6c7665436f6e747261637456696577287265736f75726365547970653a206e696c2c2076696577547970653a20547970653c46756e6769626c65546f6b656e4d6574616461746156696577732e46545661756c74446174613e282929206173212046756e6769626c65546f6b656e4d6574616461746156696577732e46545661756c74446174613f0a2020202020202020202020203f3f2070616e69632822436f756c64206e6f74207265736f6c76652046545661756c744461746120766965772e2054686520222e636f6e63617428636f6e74726163744e616d65290a202020202020202020202020202020202e636f6e636174282220636f6e7472616374206e6565647320746f20696d706c656d656e74207468652046545661756c7444617461204d65746164617461207669657720696e206f7264657220746f20657865637574652074686973207472616e73616374696f6e2e2229290a0a20202020202020202f2f204372656174652061206e657720656d707479207661756c74207573696e672074686520637265617465456d7074795661756c742066756e6374696f6e20696e73696465207468652046545661756c74446174610a20202020202020206c657420656d7074795661756c74203c2d66745661756c74446174612e637265617465456d7074795661756c7428290a0a20202020202020202f2f205361766520697420746f20746865206163636f756e740a20202020202020207369676e65722e73746f726167652e73617665283c2d656d7074795661756c742c20746f3a2066745661756c74446174612e73746f7261676550617468290a20202020202020200a20202020202020202f2f204372656174652061207075626c6963206361706162696c69747920666f7220746865207661756c7420776869636820696e636c7564657320746865202e5265736f6c76657220696e746572666163650a20202020202020206c6574207661756c74436170203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c267b46756e6769626c65546f6b656e2e5661756c747d3e2866745661756c74446174612e73746f7261676550617468290a20202020202020207369676e65722e6361706162696c69746965732e7075626c697368287661756c744361702c2061743a2066745661756c74446174612e6d6574616461746150617468290a0a20202020202020202f2f204372656174652061207075626c6963206361706162696c69747920666f7220746865207661756c74206578706f73696e672074686520726563656976657220696e746572666163650a20202020202020206c6574207265636569766572436170203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c267b46756e6769626c65546f6b656e2e52656365697665727d3e2866745661756c74446174612e73746f7261676550617468290a20202020202020207369676e65722e6361706162696c69746965732e7075626c6973682872656365697665724361702c2061743a2066745661756c74446174612e726563656976657250617468290a0a202020207d0a7d0a20f856af7b2274797065223a2241646472657373222c2276616c7565223a22307838633533303365616132363230326436227da57b2276616c7565223a2246696174546f6b656e222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02ad3358af3d0c8cb5b065c867424c5e685ea19ddd2328e9a4c6bcd407d02f143766a0b8f3c7da3cc8a3e5176d5b6d208f2cf9492d5c79db1c64ce0add436fcbbc53657475702046756e6769626c6520546f6b656e205661756c74000201465420436f6e747261637420416464722e000041646472657373000304465420436f6e7472616374204e616d650001",
    "hash": "ad3358af3d0c8cb5b065c867424c5e685ea19ddd2328e9a4c6bcd407d02f1437"
  },
  {
    "title": "FT.02 - Transfer Fungible Token with Paths",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FungibleToken from 0x9a0766d93b6608b7\n\n#interaction (\n  version: \"1.0.0\",\n\ttitle: \"Generic FT Transfer with Paths\",\n\tdescription: \"Transfer any Fungible Token by providing the paths for the source Vault and destination Vault\",\n\tlanguage: \"en-US\",\n)\n\n/// Can pass in any storage path and receiver path identifier instead of just the default.\n/// This lets you choose the token you want to send as well the capability you want to send it to.\n///\n/// Any token path can be passed as an argument here, so wallets should\n/// should check argument values to make sure the intended token path is passed in\n///\n/// @param amount: The amount of tokens to transfer\n/// @param to: The address to transfer the tokens to\n/// @param senderPathIdentifier: The string identifier of the storage path\n///        where the tokens should be withdrawn from\n/// @param receiverPathIdentifier: The string identifier of the public path\n///        where the tokens should be deposited to\n///\ntransaction(amount: UFix64, to: Address, senderPathIdentifier: String, receiverPathIdentifier: String) {\n\n    // The Vault resource that holds the tokens that are being transferred\n    let tempVault: @{FungibleToken.Vault}\n\n    prepare(signer: auth(BorrowValue) &Account) {\n\n        let storagePath = StoragePath(identifier: senderPathIdentifier)\n            ?? panic(\"Could not construct a storage path from the provided path identifier string.\")\n\n        // Get a reference to the signer's stored vault\n        let vaultRef = signer.storage.borrow<auth(FungibleToken.Withdraw) &{FungibleToken.Provider}>(from: storagePath)\n\t\t\t?? panic(\"The signer does not store a FungibleToken.Provider object at the path \"\n                .concat(storagePath.toString())\n                .concat(\". The signer must initialize their account with this object first!\"))\n\n        self.tempVault <- vaultRef.withdraw(amount: amount)\n\n        assert(\n            self.tempVault.balance == amount,\n            message: \"Error: The Vault to transfer does not have the balance that was requested!\"\n        )\n    }\n\n    execute {\n        let publicPath = PublicPath(identifier: receiverPathIdentifier)\n            ?? panic(\"Could not construct a public path from the provided path identifier string\")\n\n        let recipient = getAccount(to)\n        let receiverRef = recipient.capabilities.borrow<&{FungibleToken.Receiver}>(publicPath)\n            ?? panic(\"Could not borrow a Receiver reference to the FungibleToken Vault in account \"\n                .concat(to.toString()).concat(\" at path \").concat(publicPath.toString())\n                .concat(\". Make sure you are sending to an address that has \")\n                .concat(\"a FungibleToken Vault set up properly at the specified path.\"))\n\n        // Transfer tokens from the signer's stored vault to the receiver capability\n        receiverRef.deposit(from: <-self.tempVault)\n    }\n}",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        },
        {
          "value": "0x8c5303eaa26202d6",
          "type": "Address"
        },
        {
          "value": "flowTokenVault",
          "type": "String"
        },
        {
          "value": "flowTokenReceiver",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FungibleToken from 0x9a0766d93b6608b7\n\n#interaction (\n  version: \"1.0.0\",\n\ttitle: \"Generic FT Transfer with Paths\",\n\tdescription: \"Transfer any Fungible Token by providing the paths for the source Vault and destination Vault\",\n\tlanguage: \"en-US\",\n)\n\n/// Can pass in any storage path and receiver path identifier instead of just the default.\n/// This lets you choose the token you want to send as well the capability you want to send it to.\n///\n/// Any token path can be passed as an argument here, so wallets should\n/// should check argument values to make sure the intended token path is passed in\n///\n/// @param amount: The amount of tokens to transfer\n/// @param to: The address to transfer the tokens to\n/// @param senderPathIdentifier: The string identifier of the storage path\n///        where the tokens should be withdrawn from\n/// @param receiverPathIdentifier: The string identifier of the public path\n///        where the tokens should be deposited to\n///\ntransaction(amount: UFix64, to: Address, senderPathIdentifier: String, receiverPathIdentifier: String) {\n\n    // The Vault resource that holds the tokens that are being transferred\n    let tempVault: @{FungibleToken.Vault}\n\n    prepare(signer: auth(BorrowValue) &Account) {\n\n        let storagePath = StoragePath(identifier: senderPathIdentifier)\n            ?? panic(\"Could not construct a storage path from the provided path identifier string.\")\n\n        // Get a reference to the signer's stored vault\n        let vaultRef = signer.storage.borrow<auth(FungibleToken.Withdraw) &{FungibleToken.Provider}>(from: storagePath)\n\t\t\t?? panic(\"The signer does not store a FungibleToken.Provider object at the path \"\n                .concat(storagePath.toString())\n                .concat(\". The signer must initialize their account with this object first!\"))\n\n        self.tempVault <- vaultRef.withdraw(amount: amount)\n\n        assert(\n            self.tempVault.balance == amount,\n            message: \"Error: The Vault to transfer does not have the balance that was requested!\"\n        )\n    }\n\n    execute {\n        let publicPath = PublicPath(identifier: receiverPathIdentifier)\n            ?? panic(\"Could not construct a public path from the provided path identifier string\")\n\n        let recipient = getAccount(to)\n        let receiverRef = recipient.capabilities.borrow<&{FungibleToken.Receiver}>(publicPath)\n            ?? panic(\"Could not borrow a Receiver reference to the FungibleToken Vault in account \"\n                .concat(to.toString()).concat(\" at path \").concat(publicPath.toString())\n                .concat(\". Make sure you are sending to an address that has \")\n                .concat(\"a FungibleToken Vault set up properly at the specified path.\"))\n\n        // Transfer tokens from the signer's stored vault to the receiver capability\n        receiverRef.deposit(from: <-self.tempVault)\n    }\n}",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        },
        {
          "value": "0x8c5303eaa26202d6",
          "type": "Address"
        },
        {
          "value": "flowTokenVault",
          "type": "String"
        },
        {
          "value": "flowTokenReceiver",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90c47b90b48696d706f72742046756e6769626c65546f6b656e2066726f6d203078396130373636643933623636303862370a0a23696e746572616374696f6e20280a202076657273696f6e3a2022312e302e30222c0a097469746c653a202247656e65726963204654205472616e736665722077697468205061746873222c0a096465736372697074696f6e3a20225472616e7366657220616e792046756e6769626c6520546f6b656e2062792070726f766964696e672074686520706174687320666f722074686520736f75726365205661756c7420616e642064657374696e6174696f6e205661756c74222c0a096c616e67756167653a2022656e2d5553222c0a290a0a2f2f2f2043616e207061737320696e20616e792073746f72616765207061746820616e642072656365697665722070617468206964656e74696669657220696e7374656164206f66206a757374207468652064656661756c742e0a2f2f2f2054686973206c65747320796f752063686f6f73652074686520746f6b656e20796f752077616e7420746f2073656e642061732077656c6c20746865206361706162696c69747920796f752077616e7420746f2073656e6420697420746f2e0a2f2f2f0a2f2f2f20416e7920746f6b656e20706174682063616e2062652070617373656420617320616e20617267756d656e7420686572652c20736f2077616c6c6574732073686f756c640a2f2f2f2073686f756c6420636865636b20617267756d656e742076616c75657320746f206d616b6520737572652074686520696e74656e64656420746f6b656e20706174682069732070617373656420696e0a2f2f2f0a2f2f2f2040706172616d20616d6f756e743a2054686520616d6f756e74206f6620746f6b656e7320746f207472616e736665720a2f2f2f2040706172616d20746f3a20546865206164647265737320746f207472616e736665722074686520746f6b656e7320746f0a2f2f2f2040706172616d2073656e646572506174684964656e7469666965723a2054686520737472696e67206964656e746966696572206f66207468652073746f7261676520706174680a2f2f2f202020202020202077686572652074686520746f6b656e732073686f756c642062652077697468647261776e2066726f6d0a2f2f2f2040706172616d207265636569766572506174684964656e7469666965723a2054686520737472696e67206964656e746966696572206f6620746865207075626c696320706174680a2f2f2f202020202020202077686572652074686520746f6b656e732073686f756c64206265206465706f736974656420746f0a2f2f2f0a7472616e73616374696f6e28616d6f756e743a205546697836342c20746f3a20416464726573732c2073656e646572506174684964656e7469666965723a20537472696e672c207265636569766572506174684964656e7469666965723a20537472696e6729207b0a0a202020202f2f20546865205661756c74207265736f75726365207468617420686f6c64732074686520746f6b656e73207468617420617265206265696e67207472616e736665727265640a202020206c65742074656d705661756c743a20407b46756e6769626c65546f6b656e2e5661756c747d0a0a2020202070726570617265287369676e65723a206175746828426f72726f7756616c75652920264163636f756e7429207b0a0a20202020202020206c65742073746f7261676550617468203d2053746f7261676550617468286964656e7469666965723a2073656e646572506174684964656e746966696572290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420636f6e73747275637420612073746f7261676520706174682066726f6d207468652070726f76696465642070617468206964656e74696669657220737472696e672e22290a0a20202020202020202f2f204765742061207265666572656e636520746f20746865207369676e657227732073746f726564207661756c740a20202020202020206c6574207661756c74526566203d207369676e65722e73746f726167652e626f72726f773c617574682846756e6769626c65546f6b656e2e57697468647261772920267b46756e6769626c65546f6b656e2e50726f76696465727d3e2866726f6d3a2073746f7261676550617468290a0909093f3f2070616e69632822546865207369676e657220646f6573206e6f742073746f726520612046756e6769626c65546f6b656e2e50726f7669646572206f626a65637420617420746865207061746820220a202020202020202020202020202020202e636f6e6361742873746f72616765506174682e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222e20546865207369676e6572206d75737420696e697469616c697a65207468656972206163636f756e7420776974682074686973206f626a656374206669727374212229290a0a202020202020202073656c662e74656d705661756c74203c2d207661756c745265662e776974686472617728616d6f756e743a20616d6f756e74290a0a2020202020202020617373657274280a20202020202020202020202073656c662e74656d705661756c742e62616c616e6365203d3d20616d6f756e742c0a2020202020202020202020206d6573736167653a20224572726f723a20546865205661756c7420746f207472616e7366657220646f6573206e6f742068617665207468652062616c616e63652074686174207761732072657175657374656421220a2020202020202020290a202020207d0a0a2020202065786563757465207b0a20202020202020206c6574207075626c696350617468203d205075626c696350617468286964656e7469666965723a207265636569766572506174684964656e746966696572290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420636f6e7374727563742061207075626c696320706174682066726f6d207468652070726f76696465642070617468206964656e74696669657220737472696e6722290a0a20202020202020206c657420726563697069656e74203d206765744163636f756e7428746f290a20202020202020206c6574207265636569766572526566203d20726563697069656e742e6361706162696c69746965732e626f72726f773c267b46756e6769626c65546f6b656e2e52656365697665727d3e287075626c696350617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061205265636569766572207265666572656e636520746f207468652046756e6769626c65546f6b656e205661756c7420696e206163636f756e7420220a202020202020202020202020202020202e636f6e63617428746f2e746f537472696e672829292e636f6e636174282220617420706174682022292e636f6e636174287075626c6963506174682e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222e204d616b65207375726520796f75206172652073656e64696e6720746f20616e20616464726573732074686174206861732022290a202020202020202020202020202020202e636f6e6361742822612046756e6769626c65546f6b656e205661756c74207365742075702070726f7065726c79206174207468652073706563696669656420706174682e2229290a0a20202020202020202f2f205472616e7366657220746f6b656e732066726f6d20746865207369676e657227732073746f726564207661756c7420746f20746865207265636569766572206361706162696c6974790a202020202020202072656365697665725265662e6465706f7369742866726f6d3a203c2d73656c662e74656d705661756c74290a202020207d0a7df8bab07b2274797065223a22554669783634222c2276616c7565223a2239323233333732303336382e3534373735383038227daf7b2276616c7565223a22307838633533303365616132363230326436222c2274797065223a2241646472657373227daa7b2276616c7565223a22666c6f77546f6b656e5661756c74222c2274797065223a22537472696e67227dad7b2276616c7565223a22666c6f77546f6b656e5265636569766572222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90c4bf90c47b90b48696d706f72742046756e6769626c65546f6b656e2066726f6d203078396130373636643933623636303862370a0a23696e746572616374696f6e20280a202076657273696f6e3a2022312e302e30222c0a097469746c653a202247656e65726963204654205472616e736665722077697468205061746873222c0a096465736372697074696f6e3a20225472616e7366657220616e792046756e6769626c6520546f6b656e2062792070726f766964696e672074686520706174687320666f722074686520736f75726365205661756c7420616e642064657374696e6174696f6e205661756c74222c0a096c616e67756167653a2022656e2d5553222c0a290a0a2f2f2f2043616e207061737320696e20616e792073746f72616765207061746820616e642072656365697665722070617468206964656e74696669657220696e7374656164206f66206a757374207468652064656661756c742e0a2f2f2f2054686973206c65747320796f752063686f6f73652074686520746f6b656e20796f752077616e7420746f2073656e642061732077656c6c20746865206361706162696c69747920796f752077616e7420746f2073656e6420697420746f2e0a2f2f2f0a2f2f2f20416e7920746f6b656e20706174682063616e2062652070617373656420617320616e20617267756d656e7420686572652c20736f2077616c6c6574732073686f756c640a2f2f2f2073686f756c6420636865636b20617267756d656e742076616c75657320746f206d616b6520737572652074686520696e74656e64656420746f6b656e20706174682069732070617373656420696e0a2f2f2f0a2f2f2f2040706172616d20616d6f756e743a2054686520616d6f756e74206f6620746f6b656e7320746f207472616e736665720a2f2f2f2040706172616d20746f3a20546865206164647265737320746f207472616e736665722074686520746f6b656e7320746f0a2f2f2f2040706172616d2073656e646572506174684964656e7469666965723a2054686520737472696e67206964656e746966696572206f66207468652073746f7261676520706174680a2f2f2f202020202020202077686572652074686520746f6b656e732073686f756c642062652077697468647261776e2066726f6d0a2f2f2f2040706172616d207265636569766572506174684964656e7469666965723a2054686520737472696e67206964656e746966696572206f6620746865207075626c696320706174680a2f2f2f202020202020202077686572652074686520746f6b656e732073686f756c64206265206465706f736974656420746f0a2f2f2f0a7472616e73616374696f6e28616d6f756e743a205546697836342c20746f3a20416464726573732c2073656e646572506174684964656e7469666965723a20537472696e672c207265636569766572506174684964656e7469666965723a20537472696e6729207b0a0a202020202f2f20546865205661756c74207265736f75726365207468617420686f6c64732074686520746f6b656e73207468617420617265206265696e67207472616e736665727265640a202020206c65742074656d705661756c743a20407b46756e6769626c65546f6b656e2e5661756c747d0a0a2020202070726570617265287369676e65723a206175746828426f72726f7756616c75652920264163636f756e7429207b0a0a20202020202020206c65742073746f7261676550617468203d2053746f7261676550617468286964656e7469666965723a2073656e646572506174684964656e746966696572290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420636f6e73747275637420612073746f7261676520706174682066726f6d207468652070726f76696465642070617468206964656e74696669657220737472696e672e22290a0a20202020202020202f2f204765742061207265666572656e636520746f20746865207369676e657227732073746f726564207661756c740a20202020202020206c6574207661756c74526566203d207369676e65722e73746f726167652e626f72726f773c617574682846756e6769626c65546f6b656e2e57697468647261772920267b46756e6769626c65546f6b656e2e50726f76696465727d3e2866726f6d3a2073746f7261676550617468290a0909093f3f2070616e69632822546865207369676e657220646f6573206e6f742073746f726520612046756e6769626c65546f6b656e2e50726f7669646572206f626a65637420617420746865207061746820220a202020202020202020202020202020202e636f6e6361742873746f72616765506174682e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222e20546865207369676e6572206d75737420696e697469616c697a65207468656972206163636f756e7420776974682074686973206f626a656374206669727374212229290a0a202020202020202073656c662e74656d705661756c74203c2d207661756c745265662e776974686472617728616d6f756e743a20616d6f756e74290a0a2020202020202020617373657274280a20202020202020202020202073656c662e74656d705661756c742e62616c616e6365203d3d20616d6f756e742c0a2020202020202020202020206d6573736167653a20224572726f723a20546865205661756c7420746f207472616e7366657220646f6573206e6f742068617665207468652062616c616e63652074686174207761732072657175657374656421220a2020202020202020290a202020207d0a0a2020202065786563757465207b0a20202020202020206c6574207075626c696350617468203d205075626c696350617468286964656e7469666965723a207265636569766572506174684964656e746966696572290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420636f6e7374727563742061207075626c696320706174682066726f6d207468652070726f76696465642070617468206964656e74696669657220737472696e6722290a0a20202020202020206c657420726563697069656e74203d206765744163636f756e7428746f290a20202020202020206c6574207265636569766572526566203d20726563697069656e742e6361706162696c69746965732e626f72726f773c267b46756e6769626c65546f6b656e2e52656365697665727d3e287075626c696350617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061205265636569766572207265666572656e636520746f207468652046756e6769626c65546f6b656e205661756c7420696e206163636f756e7420220a202020202020202020202020202020202e636f6e63617428746f2e746f537472696e672829292e636f6e636174282220617420706174682022292e636f6e636174287075626c6963506174682e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222e204d616b65207375726520796f75206172652073656e64696e6720746f20616e20616464726573732074686174206861732022290a202020202020202020202020202020202e636f6e6361742822612046756e6769626c65546f6b656e205661756c74207365742075702070726f7065726c79206174207468652073706563696669656420706174682e2229290a0a20202020202020202f2f205472616e7366657220746f6b656e732066726f6d20746865207369676e657227732073746f726564207661756c7420746f20746865207265636569766572206361706162696c6974790a202020202020202072656365697665725265662e6465706f7369742866726f6d3a203c2d73656c662e74656d705661756c74290a202020207d0a7df8bab07b2274797065223a22554669783634222c2276616c7565223a2239323233333732303336382e3534373735383038227daf7b2276616c7565223a22307838633533303365616132363230326436222c2274797065223a2241646472657373227daa7b2276616c7565223a22666c6f77546f6b656e5661756c74222c2274797065223a22537472696e67227dad7b2276616c7565223a22666c6f77546f6b656e5265636569766572222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02da19323afcfcbb95f38c66d4c11ce024cddf037dbb6889929fa998fc95b5f8b44c5f45fb6b2c2fbd3279d9dd56e044cb95be908b2dedbe30c2b444d50575df7f5472616e736665722046756e6769626c6520546f6b656e2077697468205061746873000401416d6f756e740000554669783634000301526563697069656e7400014164647265737300030453656e2e20436f6c6c20506174682049640002045265632e20436f6c6c20506174682049640003",
    "hash": "da19323afcfcbb95f38c66d4c11ce024cddf037dbb6889929fa998fc95b5f8b4"
  },
  {
    "title": "FT.03 - Transfer Fungible Token with Address",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FungibleToken from 0x9a0766d93b6608b7\nimport FungibleTokenMetadataViews from 0x9a0766d93b6608b7\n\n#interaction (\n  version: \"1.0.0\",\n\ttitle: \"Generic FT Transfer with Contract Address and Name\",\n\tdescription: \"Transfer any Fungible Token by providing the contract address and name\",\n\tlanguage: \"en-US\",\n)\n\n/// Can pass in any contract address and name to transfer a token from that contract\n/// This lets you choose the token you want to send\n///\n/// Any contract can be chosen here, so wallets should check argument values\n/// to make sure the intended token contract name and address is passed in\n/// Contracts that are used must implement the FTVaultData Metadata View\n///\n/// Note: This transaction only will work for Fungible Tokens that\n///       have their token's resource name set as \"Vault\".\n///       Tokens with other names will need to use a different transaction\n///       that additionally specifies the identifier\n///\n/// @param amount: The amount of tokens to transfer\n/// @param to: The address to transfer the tokens to\n/// @param contractAddress: The address of the contract that defines the tokens being transferred\n/// @param contractName: The name of the contract that defines the tokens being transferred. Ex: \"FlowToken\"\n///\ntransaction(amount: UFix64, to: Address, contractAddress: Address, contractName: String) {\n\n    // The Vault resource that holds the tokens that are being transferred\n    let tempVault: @{FungibleToken.Vault}\n\n    // FTVaultData struct to get paths from\n    let vaultData: FungibleTokenMetadataViews.FTVaultData\n\n    prepare(signer: auth(BorrowValue) &Account) {\n\n        // Borrow a reference to the vault stored on the passed account at the passed publicPath\n        let resolverRef = getAccount(contractAddress)\n            .contracts.borrow<&{FungibleToken}>(name: contractName)\n                ?? panic(\"Could not borrow FungibleToken reference to the contract. Make sure the provided contract name (\"\n                          .concat(contractName).concat(\") and address (\").concat(contractAddress.toString()).concat(\") are correct!\"))\n\n        // Use that reference to retrieve the FTView \n        self.vaultData = resolverRef.resolveContractView(resourceType: nil, viewType: Type<FungibleTokenMetadataViews.FTVaultData>()) as! FungibleTokenMetadataViews.FTVaultData?\n            ?? panic(\"Could not resolve FTVaultData view. The \".concat(contractName)\n                .concat(\" contract needs to implement the FTVaultData Metadata view in order to execute this transaction.\"))\n\n        // Get a reference to the signer's stored vault\n        let vaultRef = signer.storage.borrow<auth(FungibleToken.Withdraw) &{FungibleToken.Provider}>(from: self.vaultData.storagePath)\n\t\t\t?? panic(\"The signer does not store a FungibleToken.Provider object at the path \"\n                .concat(self.vaultData.storagePath.toString()).concat(\"For the \").concat(contractName)\n                .concat(\" contract at address \").concat(contractAddress.toString())\n                .concat(\". The signer must initialize their account with this object first!\"))\n\n        self.tempVault <- vaultRef.withdraw(amount: amount)\n\n        // Get the string representation of the address without the 0x\n        var addressString = contractAddress.toString()\n        if addressString.length == 18 {\n            addressString = addressString.slice(from: 2, upTo: 18)\n        }\n        let typeString: String = \"A.\".concat(addressString).concat(\".\").concat(contractName).concat(\".Vault\")\n        let type = CompositeType(typeString)\n        assert(\n            type != nil,\n            message: \"Could not create a type out of the contract name and address!\"\n        )\n\n        assert(\n            self.tempVault.getType() == type!,\n            message: \"The Vault that was withdrawn to transfer is not the type that was requested!\"\n        )\n    }\n\n    execute {\n        let recipient = getAccount(to)\n        let receiverRef = recipient.capabilities.borrow<&{FungibleToken.Receiver}>(self.vaultData.receiverPath)\n            ?? panic(\"Could not borrow a Receiver reference to the FungibleToken Vault in account \"\n                .concat(to.toString()).concat(\" at path \").concat(self.vaultData.receiverPath.toString())\n                .concat(\". Make sure you are sending to an address that has \")\n                .concat(\"a FungibleToken Vault set up properly at the specified path.\"))\n\n        // Transfer tokens from the signer's stored vault to the receiver capability\n        receiverRef.deposit(from: <-self.tempVault)\n    }\n}",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        },
        {
          "value": "0x8c5303eaa26202d6",
          "type": "Address"
        },
        {
          "value": "0x8c5303eaa26202d6",
          "type": "Address"
        },
        {
          "value": "FiatToken",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FungibleToken from 0x9a0766d93b6608b7\nimport FungibleTokenMetadataViews from 0x9a0766d93b6608b7\n\n#interaction (\n  version: \"1.0.0\",\n\ttitle: \"Generic FT Transfer with Contract Address and Name\",\n\tdescription: \"Transfer any Fungible Token by providing the contract address and name\",\n\tlanguage: \"en-US\",\n)\n\n/// Can pass in any contract address and name to transfer a token from that contract\n/// This lets you choose the token you want to send\n///\n/// Any contract can be chosen here, so wallets should check argument values\n/// to make sure the intended token contract name and address is passed in\n/// Contracts that are used must implement the FTVaultData Metadata View\n///\n/// Note: This transaction only will work for Fungible Tokens that\n///       have their token's resource name set as \"Vault\".\n///       Tokens with other names will need to use a different transaction\n///       that additionally specifies the identifier\n///\n/// @param amount: The amount of tokens to transfer\n/// @param to: The address to transfer the tokens to\n/// @param contractAddress: The address of the contract that defines the tokens being transferred\n/// @param contractName: The name of the contract that defines the tokens being transferred. Ex: \"FlowToken\"\n///\ntransaction(amount: UFix64, to: Address, contractAddress: Address, contractName: String) {\n\n    // The Vault resource that holds the tokens that are being transferred\n    let tempVault: @{FungibleToken.Vault}\n\n    // FTVaultData struct to get paths from\n    let vaultData: FungibleTokenMetadataViews.FTVaultData\n\n    prepare(signer: auth(BorrowValue) &Account) {\n\n        // Borrow a reference to the vault stored on the passed account at the passed publicPath\n        let resolverRef = getAccount(contractAddress)\n            .contracts.borrow<&{FungibleToken}>(name: contractName)\n                ?? panic(\"Could not borrow FungibleToken reference to the contract. Make sure the provided contract name (\"\n                          .concat(contractName).concat(\") and address (\").concat(contractAddress.toString()).concat(\") are correct!\"))\n\n        // Use that reference to retrieve the FTView \n        self.vaultData = resolverRef.resolveContractView(resourceType: nil, viewType: Type<FungibleTokenMetadataViews.FTVaultData>()) as! FungibleTokenMetadataViews.FTVaultData?\n            ?? panic(\"Could not resolve FTVaultData view. The \".concat(contractName)\n                .concat(\" contract needs to implement the FTVaultData Metadata view in order to execute this transaction.\"))\n\n        // Get a reference to the signer's stored vault\n        let vaultRef = signer.storage.borrow<auth(FungibleToken.Withdraw) &{FungibleToken.Provider}>(from: self.vaultData.storagePath)\n\t\t\t?? panic(\"The signer does not store a FungibleToken.Provider object at the path \"\n                .concat(self.vaultData.storagePath.toString()).concat(\"For the \").concat(contractName)\n                .concat(\" contract at address \").concat(contractAddress.toString())\n                .concat(\". The signer must initialize their account with this object first!\"))\n\n        self.tempVault <- vaultRef.withdraw(amount: amount)\n\n        // Get the string representation of the address without the 0x\n        var addressString = contractAddress.toString()\n        if addressString.length == 18 {\n            addressString = addressString.slice(from: 2, upTo: 18)\n        }\n        let typeString: String = \"A.\".concat(addressString).concat(\".\").concat(contractName).concat(\".Vault\")\n        let type = CompositeType(typeString)\n        assert(\n            type != nil,\n            message: \"Could not create a type out of the contract name and address!\"\n        )\n\n        assert(\n            self.tempVault.getType() == type!,\n            message: \"The Vault that was withdrawn to transfer is not the type that was requested!\"\n        )\n    }\n\n    execute {\n        let recipient = getAccount(to)\n        let receiverRef = recipient.capabilities.borrow<&{FungibleToken.Receiver}>(self.vaultData.receiverPath)\n            ?? panic(\"Could not borrow a Receiver reference to the FungibleToken Vault in account \"\n                .concat(to.toString()).concat(\" at path \").concat(self.vaultData.receiverPath.toString())\n                .concat(\". Make sure you are sending to an address that has \")\n                .concat(\"a FungibleToken Vault set up properly at the specified path.\"))\n\n        // Transfer tokens from the signer's stored vault to the receiver capability\n        receiverRef.deposit(from: <-self.tempVault)\n    }\n}",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        },
        {
          "value": "0x8c5303eaa26202d6",
          "type": "Address"
        },
        {
          "value": "0x8c5303eaa26202d6",
          "type": "Address"
        },
        {
          "value": "FiatToken",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "",
    "encodedTransactionEnvelopeHex": "",
    "metadata": "02a4719694e328bba797b67da2d984427a5f2050145fa0f2ad8afb4f8e6150721991672738d5ea84c59c78096da25179186288ae2de2116b7f8928d594695bebf65472616e736665722046756e6769626c6520546f6b656e20776974682041646472000401416d6f756e740000554669783634000301526563697069656e74000141646472657373000301465420436f6e747261637420416464722e000241646472657373000304465420436f6e7472616374204e616d650003",
    "hash": "a4719694e328bba797b67da2d984427a5f2050145fa0f2ad8afb4f8e61507219"
  },
  {
    "title": "NFT.01 - Setup NFT Collection",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import NonFungibleToken from 0x631e88ae7f1d7c20\nimport MetadataViews from 0x631e88ae7f1d7c20\n\n#interaction (\n  version: \"1.0.0\",\n\ttitle: \"Generic FT Transfer with Contract Address and Name\",\n\tdescription: \"Transfer any Fungible Token by providing the contract address and name\",\n\tlanguage: \"en-US\",\n)\n\n/// This transaction is what an account would run\n/// to set itself up to receive NFTs. This function\n/// uses views to know where to set up the collection\n/// in storage and to create the empty collection.\n///\n/// @param contractAddress: The address of the contract that defines the token being initialized\n/// @param contractName: The name of the contract that defines the token being initialized. Ex: \"ExampleNFT\"\n\ntransaction(contractAddress: Address, contractName: String) {\n\n    prepare(signer: auth(IssueStorageCapabilityController, PublishCapability, SaveValue) &Account) {\n        // Borrow a reference to the nft contract deployed to the passed account\n        let resolverRef = getAccount(contractAddress)\n            .contracts.borrow<&{NonFungibleToken}>(name: contractName)\n                ?? panic(\"Could not borrow NonFungibleToken reference to the contract. Make sure the provided contract name (\"\n                         .concat(contractName).concat(\") and address (\").concat(contractAddress.toString()).concat(\") are correct!\"))\n\n        // Use that reference to retrieve the NFTCollectionData view \n        let collectionData = resolverRef.resolveContractView(resourceType: nil, viewType: Type<MetadataViews.NFTCollectionData>()) as! MetadataViews.NFTCollectionData?\n            ?? panic(\"Could not resolve NFTCollectionData view. The \".concat(contractName).concat(\" contract needs to implement the NFTCollectionData Metadata view in order to execute this transaction\"))\n\n        // Create a new empty collections\n        let emptyCollection <- collectionData.createEmptyCollection()\n\n        // save it to the account\n        signer.storage.save(<-emptyCollection, to: collectionData.storagePath)\n\n        // create a public capability for the collection\n        let collectionCap = signer.capabilities.storage.issue<&{NonFungibleToken.Collection}>(\n                collectionData.storagePath\n            )\n        signer.capabilities.publish(collectionCap, at: collectionData.publicPath)\n    }\n}\n",
      "arguments": [
        {
          "type": "Address",
          "value": "0x8c5303eaa26202d6"
        },
        {
          "value": "TopShot",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import NonFungibleToken from 0x631e88ae7f1d7c20\nimport MetadataViews from 0x631e88ae7f1d7c20\n\n#interaction (\n  version: \"1.0.0\",\n\ttitle: \"Generic FT Transfer with Contract Address and Name\",\n\tdescription: \"Transfer any Fungible Token by providing the contract address and name\",\n\tlanguage: \"en-US\",\n)\n\n/// This transaction is what an account would run\n/// to set itself up to receive NFTs. This function\n/// uses views to know where to set up the collection\n/// in storage and to create the empty collection.\n///\n/// @param contractAddress: The address of the contract that defines the token being initialized\n/// @param contractName: The name of the contract that defines the token being initialized. Ex: \"ExampleNFT\"\n\ntransaction(contractAddress: Address, contractName: String) {\n\n    prepare(signer: auth(IssueStorageCapabilityController, PublishCapability, SaveValue) &Account) {\n        // Borrow a reference to the nft contract deployed to the passed account\n        let resolverRef = getAccount(contractAddress)\n            .contracts.borrow<&{NonFungibleToken}>(name: contractName)\n                ?? panic(\"Could not borrow NonFungibleToken reference to the contract. Make sure the provided contract name (\"\n                         .concat(contractName).concat(\") and address (\").concat(contractAddress.toString()).concat(\") are correct!\"))\n\n        // Use that reference to retrieve the NFTCollectionData view \n        let collectionData = resolverRef.resolveContractView(resourceType: nil, viewType: Type<MetadataViews.NFTCollectionData>()) as! MetadataViews.NFTCollectionData?\n            ?? panic(\"Could not resolve NFTCollectionData view. The \".concat(contractName).concat(\" contract needs to implement the NFTCollectionData Metadata view in order to execute this transaction\"))\n\n        // Create a new empty collections\n        let emptyCollection <- collectionData.createEmptyCollection()\n\n        // save it to the account\n        signer.storage.save(<-emptyCollection, to: collectionData.storagePath)\n\n        // create a public capability for the collection\n        let collectionCap = signer.capabilities.storage.issue<&{NonFungibleToken.Collection}>(\n                collectionData.storagePath\n            )\n        signer.capabilities.publish(collectionCap, at: collectionData.publicPath)\n    }\n}\n",
      "arguments": [
        {
          "type": "Address",
          "value": "0x8c5303eaa26202d6"
        },
        {
          "value": "TopShot",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f909aab90911696d706f7274204e6f6e46756e6769626c65546f6b656e2066726f6d203078363331653838616537663164376332300a696d706f7274204d6574616461746156696577732066726f6d203078363331653838616537663164376332300a0a23696e746572616374696f6e20280a202076657273696f6e3a2022312e302e30222c0a097469746c653a202247656e65726963204654205472616e73666572207769746820436f6e7472616374204164647265737320616e64204e616d65222c0a096465736372697074696f6e3a20225472616e7366657220616e792046756e6769626c6520546f6b656e2062792070726f766964696e672074686520636f6e7472616374206164647265737320616e64206e616d65222c0a096c616e67756167653a2022656e2d5553222c0a290a0a2f2f2f2054686973207472616e73616374696f6e206973207768617420616e206163636f756e7420776f756c642072756e0a2f2f2f20746f2073657420697473656c6620757020746f2072656365697665204e4654732e20546869732066756e6374696f6e0a2f2f2f207573657320766965777320746f206b6e6f7720776865726520746f207365742075702074686520636f6c6c656374696f6e0a2f2f2f20696e2073746f7261676520616e6420746f206372656174652074686520656d70747920636f6c6c656374696f6e2e0a2f2f2f0a2f2f2f2040706172616d20636f6e7472616374416464726573733a205468652061646472657373206f662074686520636f6e7472616374207468617420646566696e65732074686520746f6b656e206265696e6720696e697469616c697a65640a2f2f2f2040706172616d20636f6e74726163744e616d653a20546865206e616d65206f662074686520636f6e7472616374207468617420646566696e65732074686520746f6b656e206265696e6720696e697469616c697a65642e2045783a20224578616d706c654e4654220a0a7472616e73616374696f6e28636f6e7472616374416464726573733a20416464726573732c20636f6e74726163744e616d653a20537472696e6729207b0a0a2020202070726570617265287369676e65723a206175746828497373756553746f726167654361706162696c697479436f6e74726f6c6c65722c205075626c6973684361706162696c6974792c205361766556616c75652920264163636f756e7429207b0a20202020202020202f2f20426f72726f772061207265666572656e636520746f20746865206e667420636f6e7472616374206465706c6f79656420746f2074686520706173736564206163636f756e740a20202020202020206c6574207265736f6c766572526566203d206765744163636f756e7428636f6e747261637441646472657373290a2020202020202020202020202e636f6e7472616374732e626f72726f773c267b4e6f6e46756e6769626c65546f6b656e7d3e286e616d653a20636f6e74726163744e616d65290a202020202020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f77204e6f6e46756e6769626c65546f6b656e207265666572656e636520746f2074686520636f6e74726163742e204d616b652073757265207468652070726f766964656420636f6e7472616374206e616d652028220a202020202020202020202020202020202020202020202020202e636f6e63617428636f6e74726163744e616d65292e636f6e63617428222920616e642061646472657373202822292e636f6e63617428636f6e7472616374416464726573732e746f537472696e672829292e636f6e6361742822292061726520636f7272656374212229290a0a20202020202020202f2f205573652074686174207265666572656e636520746f20726574726965766520746865204e4654436f6c6c656374696f6e446174612076696577200a20202020202020206c657420636f6c6c656374696f6e44617461203d207265736f6c7665725265662e7265736f6c7665436f6e747261637456696577287265736f75726365547970653a206e696c2c2076696577547970653a20547970653c4d6574616461746156696577732e4e4654436f6c6c656374696f6e446174613e28292920617321204d6574616461746156696577732e4e4654436f6c6c656374696f6e446174613f0a2020202020202020202020203f3f2070616e69632822436f756c64206e6f74207265736f6c7665204e4654436f6c6c656374696f6e4461746120766965772e2054686520222e636f6e63617428636f6e74726163744e616d65292e636f6e636174282220636f6e7472616374206e6565647320746f20696d706c656d656e7420746865204e4654436f6c6c656374696f6e44617461204d65746164617461207669657720696e206f7264657220746f20657865637574652074686973207472616e73616374696f6e2229290a0a20202020202020202f2f204372656174652061206e657720656d70747920636f6c6c656374696f6e730a20202020202020206c657420656d707479436f6c6c656374696f6e203c2d20636f6c6c656374696f6e446174612e637265617465456d707479436f6c6c656374696f6e28290a0a20202020202020202f2f207361766520697420746f20746865206163636f756e740a20202020202020207369676e65722e73746f726167652e73617665283c2d656d707479436f6c6c656374696f6e2c20746f3a20636f6c6c656374696f6e446174612e73746f7261676550617468290a0a20202020202020202f2f206372656174652061207075626c6963206361706162696c69747920666f722074686520636f6c6c656374696f6e0a20202020202020206c657420636f6c6c656374696f6e436170203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c267b4e6f6e46756e6769626c65546f6b656e2e436f6c6c656374696f6e7d3e280a20202020202020202020202020202020636f6c6c656374696f6e446174612e73746f72616765506174680a202020202020202020202020290a20202020202020207369676e65722e6361706162696c69746965732e7075626c69736828636f6c6c656374696f6e4361702c2061743a20636f6c6c656374696f6e446174612e7075626c696350617468290a202020207d0a7d0af854af7b2274797065223a2241646472657373222c2276616c7565223a22307838633533303365616132363230326436227da37b2276616c7565223a22546f7053686f74222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f909aef909aab90911696d706f7274204e6f6e46756e6769626c65546f6b656e2066726f6d203078363331653838616537663164376332300a696d706f7274204d6574616461746156696577732066726f6d203078363331653838616537663164376332300a0a23696e746572616374696f6e20280a202076657273696f6e3a2022312e302e30222c0a097469746c653a202247656e65726963204654205472616e73666572207769746820436f6e7472616374204164647265737320616e64204e616d65222c0a096465736372697074696f6e3a20225472616e7366657220616e792046756e6769626c6520546f6b656e2062792070726f766964696e672074686520636f6e7472616374206164647265737320616e64206e616d65222c0a096c616e67756167653a2022656e2d5553222c0a290a0a2f2f2f2054686973207472616e73616374696f6e206973207768617420616e206163636f756e7420776f756c642072756e0a2f2f2f20746f2073657420697473656c6620757020746f2072656365697665204e4654732e20546869732066756e6374696f6e0a2f2f2f207573657320766965777320746f206b6e6f7720776865726520746f207365742075702074686520636f6c6c656374696f6e0a2f2f2f20696e2073746f7261676520616e6420746f206372656174652074686520656d70747920636f6c6c656374696f6e2e0a2f2f2f0a2f2f2f2040706172616d20636f6e7472616374416464726573733a205468652061646472657373206f662074686520636f6e7472616374207468617420646566696e65732074686520746f6b656e206265696e6720696e697469616c697a65640a2f2f2f2040706172616d20636f6e74726163744e616d653a20546865206e616d65206f662074686520636f6e7472616374207468617420646566696e65732074686520746f6b656e206265696e6720696e697469616c697a65642e2045783a20224578616d706c654e4654220a0a7472616e73616374696f6e28636f6e7472616374416464726573733a20416464726573732c20636f6e74726163744e616d653a20537472696e6729207b0a0a2020202070726570617265287369676e65723a206175746828497373756553746f726167654361706162696c697479436f6e74726f6c6c65722c205075626c6973684361706162696c6974792c205361766556616c75652920264163636f756e7429207b0a20202020202020202f2f20426f72726f772061207265666572656e636520746f20746865206e667420636f6e7472616374206465706c6f79656420746f2074686520706173736564206163636f756e740a20202020202020206c6574207265736f6c766572526566203d206765744163636f756e7428636f6e747261637441646472657373290a2020202020202020202020202e636f6e7472616374732e626f72726f773c267b4e6f6e46756e6769626c65546f6b656e7d3e286e616d653a20636f6e74726163744e616d65290a202020202020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f77204e6f6e46756e6769626c65546f6b656e207265666572656e636520746f2074686520636f6e74726163742e204d616b652073757265207468652070726f766964656420636f6e7472616374206e616d652028220a202020202020202020202020202020202020202020202020202e636f6e63617428636f6e74726163744e616d65292e636f6e63617428222920616e642061646472657373202822292e636f6e63617428636f6e7472616374416464726573732e746f537472696e672829292e636f6e6361742822292061726520636f7272656374212229290a0a20202020202020202f2f205573652074686174207265666572656e636520746f20726574726965766520746865204e4654436f6c6c656374696f6e446174612076696577200a20202020202020206c657420636f6c6c656374696f6e44617461203d207265736f6c7665725265662e7265736f6c7665436f6e747261637456696577287265736f75726365547970653a206e696c2c2076696577547970653a20547970653c4d6574616461746156696577732e4e4654436f6c6c656374696f6e446174613e28292920617321204d6574616461746156696577732e4e4654436f6c6c656374696f6e446174613f0a2020202020202020202020203f3f2070616e69632822436f756c64206e6f74207265736f6c7665204e4654436f6c6c656374696f6e4461746120766965772e2054686520222e636f6e63617428636f6e74726163744e616d65292e636f6e636174282220636f6e7472616374206e6565647320746f20696d706c656d656e7420746865204e4654436f6c6c656374696f6e44617461204d65746164617461207669657720696e206f7264657220746f20657865637574652074686973207472616e73616374696f6e2229290a0a20202020202020202f2f204372656174652061206e657720656d70747920636f6c6c656374696f6e730a20202020202020206c657420656d707479436f6c6c656374696f6e203c2d20636f6c6c656374696f6e446174612e637265617465456d707479436f6c6c656374696f6e28290a0a20202020202020202f2f207361766520697420746f20746865206163636f756e740a20202020202020207369676e65722e73746f726167652e73617665283c2d656d707479436f6c6c656374696f6e2c20746f3a20636f6c6c656374696f6e446174612e73746f7261676550617468290a0a20202020202020202f2f206372656174652061207075626c6963206361706162696c69747920666f722074686520636f6c6c656374696f6e0a20202020202020206c657420636f6c6c656374696f6e436170203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c267b4e6f6e46756e6769626c65546f6b656e2e436f6c6c656374696f6e7d3e280a20202020202020202020202020202020636f6c6c656374696f6e446174612e73746f72616765506174680a202020202020202020202020290a20202020202020207369676e65722e6361706162696c69746965732e7075626c69736828636f6c6c656374696f6e4361702c2061743a20636f6c6c656374696f6e446174612e7075626c696350617468290a202020207d0a7d0af854af7b2274797065223a2241646472657373222c2276616c7565223a22307838633533303365616132363230326436227da37b2276616c7565223a22546f7053686f74222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "0298f482a6054540581e39e8bac9c8b16c4b0b52370408f95ba155eebb9e16848979f5eda23f53e9b58472907c5dedaf536e3f9b777aa302a079a7a4763982d6185365747570204e465420436f6c6c656374696f6e0002014e465420436f6e747261637420416464720000416464726573730003044e465420436f6e7472616374204e616d650001",
    "hash": "98f482a6054540581e39e8bac9c8b16c4b0b52370408f95ba155eebb9e168489"
  },
  {
    "title": "NFT.02 - Transfer NFT with Paths",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import NonFungibleToken from 0x631e88ae7f1d7c20\n\n#interaction (\n  version: \"1.0.0\",\n\ttitle: \"Generic NFT Transfer with Paths\",\n\tdescription: \"Transfer any Non-Fungible Token by providing the paths for the source Collection and destination Collection\",\n\tlanguage: \"en-US\",\n)\n\n/// Can pass in any storage path and receiver path instead of just the default.\n/// This lets you choose the token you want to send as well the capability you want to send it to.\n///\n/// Any token path can be passed as an argument here, so wallets should\n/// should check argument values to make sure the intended token path is passed in\n///\n/// @param to: The address to transfer the token to\n/// @param id: The id of the token to transfer\n/// @param senderPathIdentifier: The string identifier of the storage path\n///        where the token should be withdrawn from\n/// @param receiverPathIdentifier: The string identifier of the public path\n///        where the token should be deposited to\n///\ntransaction(to: Address, id: UInt64, senderPathIdentifier: String, receiverPathIdentifier: String) {\n\n    // The NFT resource to be transferred\n    let tempNFT: @{NonFungibleToken.NFT}\n\n    prepare(signer: auth(BorrowValue) &Account) {\n\n        let storagePath = StoragePath(identifier: senderPathIdentifier)\n            ?? panic(\"Could not construct a storage path from the provided path identifier string\")\n\n        // borrow a reference to the signer's NFT collection\n        let withdrawRef = signer.storage.borrow<auth(NonFungibleToken.Withdraw) &{NonFungibleToken.Collection}>(\n                from: storagePath\n            ) ?? panic(\"The signer does not store a NonFungibleToken Collection object at the path \"\n                        .concat(storagePath.toString())\n                        .concat(\"The signer must initialize their account with this collection first!\"))\n\n        self.tempNFT <- withdrawRef.withdraw(withdrawID: id)\n    }\n\n    execute {\n        let publicPath = PublicPath(identifier: receiverPathIdentifier)\n            ?? panic(\"Could not construct a public path from the provided path identifier string \\\"\"\n                      .concat(receiverPathIdentifier)\n                      .concat(\"\\\".\"))\n\n        // get the recipients public account object\n        let recipient = getAccount(to)\n\n        // borrow a public reference to the receivers collection\n        let receiverRef = recipient.capabilities.borrow<&{NonFungibleToken.Receiver}>(publicPath)\n            ?? panic(\"The recipient does not have a NonFungibleToken Receiver at \"\n                        .concat(publicPath.toString())\n                        .concat(\" that is capable of receiving a NFT.\")\n                        .concat(\"The recipient must initialize their account with this collection and receiver first!\"))\n\n        // Deposit the NFT to the receiver\n        receiverRef.deposit(token: <-self.tempNFT)\n    }\n}",
      "arguments": [
        {
          "type": "Address",
          "value": "0x8c5303eaa26202d6"
        },
        {
          "value": "10",
          "type": "UInt64"
        },
        {
          "value": "flowTokenVault",
          "type": "String"
        },
        {
          "value": "flowTokenReceiver",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import NonFungibleToken from 0x631e88ae7f1d7c20\n\n#interaction (\n  version: \"1.0.0\",\n\ttitle: \"Generic NFT Transfer with Paths\",\n\tdescription: \"Transfer any Non-Fungible Token by providing the paths for the source Collection and destination Collection\",\n\tlanguage: \"en-US\",\n)\n\n/// Can pass in any storage path and receiver path instead of just the default.\n/// This lets you choose the token you want to send as well the capability you want to send it to.\n///\n/// Any token path can be passed as an argument here, so wallets should\n/// should check argument values to make sure the intended token path is passed in\n///\n/// @param to: The address to transfer the token to\n/// @param id: The id of the token to transfer\n/// @param senderPathIdentifier: The string identifier of the storage path\n///        where the token should be withdrawn from\n/// @param receiverPathIdentifier: The string identifier of the public path\n///        where the token should be deposited to\n///\ntransaction(to: Address, id: UInt64, senderPathIdentifier: String, receiverPathIdentifier: String) {\n\n    // The NFT resource to be transferred\n    let tempNFT: @{NonFungibleToken.NFT}\n\n    prepare(signer: auth(BorrowValue) &Account) {\n\n        let storagePath = StoragePath(identifier: senderPathIdentifier)\n            ?? panic(\"Could not construct a storage path from the provided path identifier string\")\n\n        // borrow a reference to the signer's NFT collection\n        let withdrawRef = signer.storage.borrow<auth(NonFungibleToken.Withdraw) &{NonFungibleToken.Collection}>(\n                from: storagePath\n            ) ?? panic(\"The signer does not store a NonFungibleToken Collection object at the path \"\n                        .concat(storagePath.toString())\n                        .concat(\"The signer must initialize their account with this collection first!\"))\n\n        self.tempNFT <- withdrawRef.withdraw(withdrawID: id)\n    }\n\n    execute {\n        let publicPath = PublicPath(identifier: receiverPathIdentifier)\n            ?? panic(\"Could not construct a public path from the provided path identifier string \\\"\"\n                      .concat(receiverPathIdentifier)\n                      .concat(\"\\\".\"))\n\n        // get the recipients public account object\n        let recipient = getAccount(to)\n\n        // borrow a public reference to the receivers collection\n        let receiverRef = recipient.capabilities.borrow<&{NonFungibleToken.Receiver}>(publicPath)\n            ?? panic(\"The recipient does not have a NonFungibleToken Receiver at \"\n                        .concat(publicPath.toString())\n                        .concat(\" that is capable of receiving a NFT.\")\n                        .concat(\"The recipient must initialize their account with this collection and receiver first!\"))\n\n        // Deposit the NFT to the receiver\n        receiverRef.deposit(token: <-self.tempNFT)\n    }\n}",
      "arguments": [
        {
          "type": "Address",
          "value": "0x8c5303eaa26202d6"
        },
        {
          "value": "10",
          "type": "UInt64"
        },
        {
          "value": "flowTokenVault",
          "type": "String"
        },
        {
          "value": "flowTokenReceiver",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90c37b90b4a696d706f7274204e6f6e46756e6769626c65546f6b656e2066726f6d203078363331653838616537663164376332300a0a23696e746572616374696f6e20280a202076657273696f6e3a2022312e302e30222c0a097469746c653a202247656e65726963204e4654205472616e736665722077697468205061746873222c0a096465736372697074696f6e3a20225472616e7366657220616e79204e6f6e2d46756e6769626c6520546f6b656e2062792070726f766964696e672074686520706174687320666f722074686520736f7572636520436f6c6c656374696f6e20616e642064657374696e6174696f6e20436f6c6c656374696f6e222c0a096c616e67756167653a2022656e2d5553222c0a290a0a2f2f2f2043616e207061737320696e20616e792073746f72616765207061746820616e64207265636569766572207061746820696e7374656164206f66206a757374207468652064656661756c742e0a2f2f2f2054686973206c65747320796f752063686f6f73652074686520746f6b656e20796f752077616e7420746f2073656e642061732077656c6c20746865206361706162696c69747920796f752077616e7420746f2073656e6420697420746f2e0a2f2f2f0a2f2f2f20416e7920746f6b656e20706174682063616e2062652070617373656420617320616e20617267756d656e7420686572652c20736f2077616c6c6574732073686f756c640a2f2f2f2073686f756c6420636865636b20617267756d656e742076616c75657320746f206d616b6520737572652074686520696e74656e64656420746f6b656e20706174682069732070617373656420696e0a2f2f2f0a2f2f2f2040706172616d20746f3a20546865206164647265737320746f207472616e736665722074686520746f6b656e20746f0a2f2f2f2040706172616d2069643a20546865206964206f662074686520746f6b656e20746f207472616e736665720a2f2f2f2040706172616d2073656e646572506174684964656e7469666965723a2054686520737472696e67206964656e746966696572206f66207468652073746f7261676520706174680a2f2f2f202020202020202077686572652074686520746f6b656e2073686f756c642062652077697468647261776e2066726f6d0a2f2f2f2040706172616d207265636569766572506174684964656e7469666965723a2054686520737472696e67206964656e746966696572206f6620746865207075626c696320706174680a2f2f2f202020202020202077686572652074686520746f6b656e2073686f756c64206265206465706f736974656420746f0a2f2f2f0a7472616e73616374696f6e28746f3a20416464726573732c2069643a2055496e7436342c2073656e646572506174684964656e7469666965723a20537472696e672c207265636569766572506174684964656e7469666965723a20537472696e6729207b0a0a202020202f2f20546865204e4654207265736f7572636520746f206265207472616e736665727265640a202020206c65742074656d704e46543a20407b4e6f6e46756e6769626c65546f6b656e2e4e46547d0a0a2020202070726570617265287369676e65723a206175746828426f72726f7756616c75652920264163636f756e7429207b0a0a20202020202020206c65742073746f7261676550617468203d2053746f7261676550617468286964656e7469666965723a2073656e646572506174684964656e746966696572290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420636f6e73747275637420612073746f7261676520706174682066726f6d207468652070726f76696465642070617468206964656e74696669657220737472696e6722290a0a20202020202020202f2f20626f72726f772061207265666572656e636520746f20746865207369676e65722773204e465420636f6c6c656374696f6e0a20202020202020206c6574207769746864726177526566203d207369676e65722e73746f726167652e626f72726f773c61757468284e6f6e46756e6769626c65546f6b656e2e57697468647261772920267b4e6f6e46756e6769626c65546f6b656e2e436f6c6c656374696f6e7d3e280a2020202020202020202020202020202066726f6d3a2073746f72616765506174680a20202020202020202020202029203f3f2070616e69632822546865207369676e657220646f6573206e6f742073746f72652061204e6f6e46756e6769626c65546f6b656e20436f6c6c656374696f6e206f626a65637420617420746865207061746820220a2020202020202020202020202020202020202020202020202e636f6e6361742873746f72616765506174682e746f537472696e672829290a2020202020202020202020202020202020202020202020202e636f6e6361742822546865207369676e6572206d75737420696e697469616c697a65207468656972206163636f756e742077697468207468697320636f6c6c656374696f6e206669727374212229290a0a202020202020202073656c662e74656d704e4654203c2d2077697468647261775265662e776974686472617728776974686472617749443a206964290a202020207d0a0a2020202065786563757465207b0a20202020202020206c6574207075626c696350617468203d205075626c696350617468286964656e7469666965723a207265636569766572506174684964656e746966696572290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420636f6e7374727563742061207075626c696320706174682066726f6d207468652070726f76696465642070617468206964656e74696669657220737472696e67205c22220a202020202020202020202020202020202020202020202e636f6e636174287265636569766572506174684964656e746966696572290a202020202020202020202020202020202020202020202e636f6e63617428225c222e2229290a0a20202020202020202f2f206765742074686520726563697069656e7473207075626c6963206163636f756e74206f626a6563740a20202020202020206c657420726563697069656e74203d206765744163636f756e7428746f290a0a20202020202020202f2f20626f72726f772061207075626c6963207265666572656e636520746f207468652072656365697665727320636f6c6c656374696f6e0a20202020202020206c6574207265636569766572526566203d20726563697069656e742e6361706162696c69746965732e626f72726f773c267b4e6f6e46756e6769626c65546f6b656e2e52656365697665727d3e287075626c696350617468290a2020202020202020202020203f3f2070616e6963282254686520726563697069656e7420646f6573206e6f7420686176652061204e6f6e46756e6769626c65546f6b656e20526563656976657220617420220a2020202020202020202020202020202020202020202020202e636f6e636174287075626c6963506174682e746f537472696e672829290a2020202020202020202020202020202020202020202020202e636f6e636174282220746861742069732063617061626c65206f6620726563656976696e672061204e46542e22290a2020202020202020202020202020202020202020202020202e636f6e636174282254686520726563697069656e74206d75737420696e697469616c697a65207468656972206163636f756e742077697468207468697320636f6c6c656374696f6e20616e64207265636569766572206669727374212229290a0a20202020202020202f2f204465706f73697420746865204e465420746f207468652072656365697665720a202020202020202072656365697665725265662e6465706f73697428746f6b656e3a203c2d73656c662e74656d704e4654290a202020207d0a7df8a8af7b2274797065223a2241646472657373222c2276616c7565223a22307838633533303365616132363230326436227d9e7b2276616c7565223a223130222c2274797065223a2255496e743634227daa7b2276616c7565223a22666c6f77546f6b656e5661756c74222c2274797065223a22537472696e67227dad7b2276616c7565223a22666c6f77546f6b656e5265636569766572222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90c3bf90c37b90b4a696d706f7274204e6f6e46756e6769626c65546f6b656e2066726f6d203078363331653838616537663164376332300a0a23696e746572616374696f6e20280a202076657273696f6e3a2022312e302e30222c0a097469746c653a202247656e65726963204e4654205472616e736665722077697468205061746873222c0a096465736372697074696f6e3a20225472616e7366657220616e79204e6f6e2d46756e6769626c6520546f6b656e2062792070726f766964696e672074686520706174687320666f722074686520736f7572636520436f6c6c656374696f6e20616e642064657374696e6174696f6e20436f6c6c656374696f6e222c0a096c616e67756167653a2022656e2d5553222c0a290a0a2f2f2f2043616e207061737320696e20616e792073746f72616765207061746820616e64207265636569766572207061746820696e7374656164206f66206a757374207468652064656661756c742e0a2f2f2f2054686973206c65747320796f752063686f6f73652074686520746f6b656e20796f752077616e7420746f2073656e642061732077656c6c20746865206361706162696c69747920796f752077616e7420746f2073656e6420697420746f2e0a2f2f2f0a2f2f2f20416e7920746f6b656e20706174682063616e2062652070617373656420617320616e20617267756d656e7420686572652c20736f2077616c6c6574732073686f756c640a2f2f2f2073686f756c6420636865636b20617267756d656e742076616c75657320746f206d616b6520737572652074686520696e74656e64656420746f6b656e20706174682069732070617373656420696e0a2f2f2f0a2f2f2f2040706172616d20746f3a20546865206164647265737320746f207472616e736665722074686520746f6b656e20746f0a2f2f2f2040706172616d2069643a20546865206964206f662074686520746f6b656e20746f207472616e736665720a2f2f2f2040706172616d2073656e646572506174684964656e7469666965723a2054686520737472696e67206964656e746966696572206f66207468652073746f7261676520706174680a2f2f2f202020202020202077686572652074686520746f6b656e2073686f756c642062652077697468647261776e2066726f6d0a2f2f2f2040706172616d207265636569766572506174684964656e7469666965723a2054686520737472696e67206964656e746966696572206f6620746865207075626c696320706174680a2f2f2f202020202020202077686572652074686520746f6b656e2073686f756c64206265206465706f736974656420746f0a2f2f2f0a7472616e73616374696f6e28746f3a20416464726573732c2069643a2055496e7436342c2073656e646572506174684964656e7469666965723a20537472696e672c207265636569766572506174684964656e7469666965723a20537472696e6729207b0a0a202020202f2f20546865204e4654207265736f7572636520746f206265207472616e736665727265640a202020206c65742074656d704e46543a20407b4e6f6e46756e6769626c65546f6b656e2e4e46547d0a0a2020202070726570617265287369676e65723a206175746828426f72726f7756616c75652920264163636f756e7429207b0a0a20202020202020206c65742073746f7261676550617468203d2053746f7261676550617468286964656e7469666965723a2073656e646572506174684964656e746966696572290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420636f6e73747275637420612073746f7261676520706174682066726f6d207468652070726f76696465642070617468206964656e74696669657220737472696e6722290a0a20202020202020202f2f20626f72726f772061207265666572656e636520746f20746865207369676e65722773204e465420636f6c6c656374696f6e0a20202020202020206c6574207769746864726177526566203d207369676e65722e73746f726167652e626f72726f773c61757468284e6f6e46756e6769626c65546f6b656e2e57697468647261772920267b4e6f6e46756e6769626c65546f6b656e2e436f6c6c656374696f6e7d3e280a2020202020202020202020202020202066726f6d3a2073746f72616765506174680a20202020202020202020202029203f3f2070616e69632822546865207369676e657220646f6573206e6f742073746f72652061204e6f6e46756e6769626c65546f6b656e20436f6c6c656374696f6e206f626a65637420617420746865207061746820220a2020202020202020202020202020202020202020202020202e636f6e6361742873746f72616765506174682e746f537472696e672829290a2020202020202020202020202020202020202020202020202e636f6e6361742822546865207369676e6572206d75737420696e697469616c697a65207468656972206163636f756e742077697468207468697320636f6c6c656374696f6e206669727374212229290a0a202020202020202073656c662e74656d704e4654203c2d2077697468647261775265662e776974686472617728776974686472617749443a206964290a202020207d0a0a2020202065786563757465207b0a20202020202020206c6574207075626c696350617468203d205075626c696350617468286964656e7469666965723a207265636569766572506174684964656e746966696572290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420636f6e7374727563742061207075626c696320706174682066726f6d207468652070726f76696465642070617468206964656e74696669657220737472696e67205c22220a202020202020202020202020202020202020202020202e636f6e636174287265636569766572506174684964656e746966696572290a202020202020202020202020202020202020202020202e636f6e63617428225c222e2229290a0a20202020202020202f2f206765742074686520726563697069656e7473207075626c6963206163636f756e74206f626a6563740a20202020202020206c657420726563697069656e74203d206765744163636f756e7428746f290a0a20202020202020202f2f20626f72726f772061207075626c6963207265666572656e636520746f207468652072656365697665727320636f6c6c656374696f6e0a20202020202020206c6574207265636569766572526566203d20726563697069656e742e6361706162696c69746965732e626f72726f773c267b4e6f6e46756e6769626c65546f6b656e2e52656365697665727d3e287075626c696350617468290a2020202020202020202020203f3f2070616e6963282254686520726563697069656e7420646f6573206e6f7420686176652061204e6f6e46756e6769626c65546f6b656e20526563656976657220617420220a2020202020202020202020202020202020202020202020202e636f6e636174287075626c6963506174682e746f537472696e672829290a2020202020202020202020202020202020202020202020202e636f6e636174282220746861742069732063617061626c65206f6620726563656976696e672061204e46542e22290a2020202020202020202020202020202020202020202020202e636f6e636174282254686520726563697069656e74206d75737420696e697469616c697a65207468656972206163636f756e742077697468207468697320636f6c6c656374696f6e20616e64207265636569766572206669727374212229290a0a20202020202020202f2f204465706f73697420746865204e465420746f207468652072656365697665720a202020202020202072656365697665725265662e6465706f73697428746f6b656e3a203c2d73656c662e74656d704e4654290a202020207d0a7df8a8af7b2274797065223a2241646472657373222c2276616c7565223a22307838633533303365616132363230326436227d9e7b2276616c7565223a223130222c2274797065223a2255496e743634227daa7b2276616c7565223a22666c6f77546f6b656e5661756c74222c2274797065223a22537472696e67227dad7b2276616c7565223a22666c6f77546f6b656e5265636569766572222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02a56ee3fe496f3d4dbdb255843ae1a51ea858ef02728d3ae2ede732b5880ad8b75f050afb9d275119e22546f860aef0168f1057823bb4777c2024aef7c6ac1cc75472616e73666572204e46542077697468205061746873000401526563697069656e740000416464726573730003014e465420494420746f205472616e7366000155496e74363400030453656e2e20436f6c6c20506174682049640002045265632e20436f6c6c20506174682049640003",
    "hash": "a56ee3fe496f3d4dbdb255843ae1a51ea858ef02728d3ae2ede732b5880ad8b7"
  },
  {
    "title": "NFT.03 - Transfer NFT with Address",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import NonFungibleToken from 0x631e88ae7f1d7c20\nimport MetadataViews from 0x631e88ae7f1d7c20\n\n#interaction (\n  version: \"1.0.0\",\n\ttitle: \"Generic NFT Transfer with Contract Address and Name\",\n\tdescription: \"Transfer any Non-Fungible Token by providing the contract address and name\",\n\tlanguage: \"en-US\",\n)\n\n/// Can pass in any contract address and name\n/// This lets you choose the token you want to send because\n/// the transaction gets the metadata from the provided contract.\n///\n/// @param to: The address to transfer the token to\n/// @param id: The id of token to transfer\n/// @param contractAddress: The address of the contract that defines the token being transferred\n/// @param contractName: The name of the contract that defines the token being transferred. Ex: \"ExampleNFT\"\n///\n/// This transaction only works with NFTs that have the type name \"NFT\"\n/// A different transaction is required for NFTs with a different type name\n///\ntransaction(to: Address, id: UInt64, contractAddress: Address, contractName: String) {\n\n    // The NFT resource to be transferred\n    let tempNFT: @{NonFungibleToken.NFT}\n\n    // NFTCollectionData struct to get paths from\n    let collectionData: MetadataViews.NFTCollectionData\n\n    prepare(signer: auth(BorrowValue) &Account) {\n\n        // Borrow a reference to the nft contract deployed to the passed account\n        let resolverRef = getAccount(contractAddress)\n            .contracts.borrow<&{NonFungibleToken}>(name: contractName)\n                ?? panic(\"Could not borrow NonFungibleToken reference to the contract. Make sure the provided contract name (\"\n                          .concat(contractName).concat(\") and address (\").concat(contractAddress.toString()).concat(\") are correct!\"))\n\n        // Use that reference to retrieve the NFTCollectionData view \n        self.collectionData = resolverRef.resolveContractView(resourceType: nil, viewType: Type<MetadataViews.NFTCollectionData>()) as! MetadataViews.NFTCollectionData?\n            ?? panic(\"Could not resolve NFTCollectionData view. The \".concat(contractName).concat(\" contract needs to implement the NFTCollectionData Metadata view in order to execute this transaction\"))\n\n\n        // borrow a reference to the signer's NFT collection\n        let withdrawRef = signer.storage.borrow<auth(NonFungibleToken.Withdraw) &{NonFungibleToken.Collection}>(\n                from: self.collectionData.storagePath\n            ) ?? panic(\"The signer does not store a \"\n                        .concat(contractName)\n                        .concat(\" Collection object at the path \")\n                        .concat(self.collectionData.storagePath.toString())\n                        .concat(\". The signer must initialize their account with this collection first!\"))\n\n        self.tempNFT <- withdrawRef.withdraw(withdrawID: id)\n\n        // Get the string representation of the address without the 0x\n        var addressString = contractAddress.toString()\n        if addressString.length == 18 {\n            addressString = addressString.slice(from: 2, upTo: 18)\n        }\n        let typeString: String = \"A.\".concat(addressString).concat(\".\").concat(contractName).concat(\".NFT\")\n        let type = CompositeType(typeString)\n        assert(\n            type != nil,\n            message: \"Could not create a type out of the contract name \"\n                      .concat(contractName)\n                      .concat(\" and address \")\n                      .concat(addressString)\n                      .concat(\"!\")\n        )\n\n        assert(\n            self.tempNFT.getType() == type!,\n            message: \"The NFT that was withdrawn to transfer is not the type that was requested <\"\n                     .concat(typeString).concat(\">.\")\n        )\n    }\n\n    execute {\n        // get the recipients public account object\n        let recipient = getAccount(to)\n\n        // borrow a public reference to the receivers collection\n        let receiverRef = recipient.capabilities.borrow<&{NonFungibleToken.Receiver}>(self.collectionData.publicPath)\n            ?? panic(\"The recipient does not have a NonFungibleToken Receiver at \"\n                        .concat(self.collectionData.publicPath.toString())\n                        .concat(\" that is capable of receiving a \")\n                        .concat(contractName)\n                        .concat(\" NFT.\")\n                        .concat(\"The recipient must initialize their account with this collection and receiver first!\"))\n\n        // Deposit the NFT to the receiver\n        receiverRef.deposit(token: <-self.tempNFT)\n    }\n}",
      "arguments": [
        {
          "type": "Address",
          "value": "0x8c5303eaa26202d6"
        },
        {
          "value": "10",
          "type": "UInt64"
        },
        {
          "value": "0x8c5303eaa26202d6",
          "type": "Address"
        },
        {
          "value": "TopShot",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import NonFungibleToken from 0x631e88ae7f1d7c20\nimport MetadataViews from 0x631e88ae7f1d7c20\n\n#interaction (\n  version: \"1.0.0\",\n\ttitle: \"Generic NFT Transfer with Contract Address and Name\",\n\tdescription: \"Transfer any Non-Fungible Token by providing the contract address and name\",\n\tlanguage: \"en-US\",\n)\n\n/// Can pass in any contract address and name\n/// This lets you choose the token you want to send because\n/// the transaction gets the metadata from the provided contract.\n///\n/// @param to: The address to transfer the token to\n/// @param id: The id of token to transfer\n/// @param contractAddress: The address of the contract that defines the token being transferred\n/// @param contractName: The name of the contract that defines the token being transferred. Ex: \"ExampleNFT\"\n///\n/// This transaction only works with NFTs that have the type name \"NFT\"\n/// A different transaction is required for NFTs with a different type name\n///\ntransaction(to: Address, id: UInt64, contractAddress: Address, contractName: String) {\n\n    // The NFT resource to be transferred\n    let tempNFT: @{NonFungibleToken.NFT}\n\n    // NFTCollectionData struct to get paths from\n    let collectionData: MetadataViews.NFTCollectionData\n\n    prepare(signer: auth(BorrowValue) &Account) {\n\n        // Borrow a reference to the nft contract deployed to the passed account\n        let resolverRef = getAccount(contractAddress)\n            .contracts.borrow<&{NonFungibleToken}>(name: contractName)\n                ?? panic(\"Could not borrow NonFungibleToken reference to the contract. Make sure the provided contract name (\"\n                          .concat(contractName).concat(\") and address (\").concat(contractAddress.toString()).concat(\") are correct!\"))\n\n        // Use that reference to retrieve the NFTCollectionData view \n        self.collectionData = resolverRef.resolveContractView(resourceType: nil, viewType: Type<MetadataViews.NFTCollectionData>()) as! MetadataViews.NFTCollectionData?\n            ?? panic(\"Could not resolve NFTCollectionData view. The \".concat(contractName).concat(\" contract needs to implement the NFTCollectionData Metadata view in order to execute this transaction\"))\n\n\n        // borrow a reference to the signer's NFT collection\n        let withdrawRef = signer.storage.borrow<auth(NonFungibleToken.Withdraw) &{NonFungibleToken.Collection}>(\n                from: self.collectionData.storagePath\n            ) ?? panic(\"The signer does not store a \"\n                        .concat(contractName)\n                        .concat(\" Collection object at the path \")\n                        .concat(self.collectionData.storagePath.toString())\n                        .concat(\". The signer must initialize their account with this collection first!\"))\n\n        self.tempNFT <- withdrawRef.withdraw(withdrawID: id)\n\n        // Get the string representation of the address without the 0x\n        var addressString = contractAddress.toString()\n        if addressString.length == 18 {\n            addressString = addressString.slice(from: 2, upTo: 18)\n        }\n        let typeString: String = \"A.\".concat(addressString).concat(\".\").concat(contractName).concat(\".NFT\")\n        let type = CompositeType(typeString)\n        assert(\n            type != nil,\n            message: \"Could not create a type out of the contract name \"\n                      .concat(contractName)\n                      .concat(\" and address \")\n                      .concat(addressString)\n                      .concat(\"!\")\n        )\n\n        assert(\n            self.tempNFT.getType() == type!,\n            message: \"The NFT that was withdrawn to transfer is not the type that was requested <\"\n                     .concat(typeString).concat(\">.\")\n        )\n    }\n\n    execute {\n        // get the recipients public account object\n        let recipient = getAccount(to)\n\n        // borrow a public reference to the receivers collection\n        let receiverRef = recipient.capabilities.borrow<&{NonFungibleToken.Receiver}>(self.collectionData.publicPath)\n            ?? panic(\"The recipient does not have a NonFungibleToken Receiver at \"\n                        .concat(self.collectionData.publicPath.toString())\n                        .concat(\" that is capable of receiving a \")\n                        .concat(contractName)\n                        .concat(\" NFT.\")\n                        .concat(\"The recipient must initialize their account with this collection and receiver first!\"))\n\n        // Deposit the NFT to the receiver\n        receiverRef.deposit(token: <-self.tempNFT)\n    }\n}",
      "arguments": [
        {
          "type": "Address",
          "value": "0x8c5303eaa26202d6"
        },
        {
          "value": "10",
          "type": "UInt64"
        },
        {
          "value": "0x8c5303eaa26202d6",
          "type": "Address"
        },
        {
          "value": "TopShot",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "",
    "encodedTransactionEnvelopeHex": "",
    "metadata": "025dae1c91010a8238e1b469b6bea505320bde169af7d3547c8455da467c1cede1e214e8ba77ee79a8acfbea11a2255378e2123a60d1bc4981277aec1c9b41b41b5472616e73666572204e465420776974682041646472657373000401526563697069656e740000416464726573730003014e465420494420746f205472616e7366000155496e7436340003014e465420436f6e747261637420416464720002416464726573730003044e465420436f6e7472616374204e616d650003",
    "hash": "5dae1c91010a8238e1b469b6bea505320bde169af7d3547c8455da467c1cede1"
  },
  {
    "title": "TH.01 - Withdraw Unlocked FLOW",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FungibleToken from 0x9a0766d93b6608b7\nimport FlowToken from 0x7e60df042a9c0868\nimport LockedTokens from 0x95e019a17d0e23d7\n\ntransaction(amount: UFix64) {\n\n    let holderRef: auth(LockedTokens.TokenOperations, FungibleToken.Withdraw) &LockedTokens.TokenHolder\n    let vaultRef: auth(FungibleToken.Withdraw) &FlowToken.Vault\n\n    prepare(acct: auth(BorrowValue) &Account) {\n        self.holderRef = acct.storage.borrow<auth(LockedTokens.TokenOperations, FungibleToken.Withdraw) &LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"Cannot withdraw locked tokens! The signer of the transaction \"\n                    .concat(\"does not have an associated locked account, \")\n                    .concat(\"so there are no locked tokens to withdraw.\"))\n\n        self.vaultRef = acct.storage.borrow<auth(FungibleToken.Withdraw) &FlowToken.Vault>(from: /storage/flowTokenVault)\n            ?? panic(\"The signer does not store a FlowToken Vault object at the path \"\n                    .concat(\"/storage/flowTokenVault. \")\n                    .concat(\"The signer must initialize their account with this vault first!\"))\n    }\n\n    execute {\n        self.vaultRef.deposit(from: <-self.holderRef.withdraw(amount: amount))\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FungibleToken from 0x9a0766d93b6608b7\nimport FlowToken from 0x7e60df042a9c0868\nimport LockedTokens from 0x95e019a17d0e23d7\n\ntransaction(amount: UFix64) {\n\n    let holderRef: auth(LockedTokens.TokenOperations, FungibleToken.Withdraw) &LockedTokens.TokenHolder\n    let vaultRef: auth(FungibleToken.Withdraw) &FlowToken.Vault\n\n    prepare(acct: auth(BorrowValue) &Account) {\n        self.holderRef = acct.storage.borrow<auth(LockedTokens.TokenOperations, FungibleToken.Withdraw) &LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"Cannot withdraw locked tokens! The signer of the transaction \"\n                    .concat(\"does not have an associated locked account, \")\n                    .concat(\"so there are no locked tokens to withdraw.\"))\n\n        self.vaultRef = acct.storage.borrow<auth(FungibleToken.Withdraw) &FlowToken.Vault>(from: /storage/flowTokenVault)\n            ?? panic(\"The signer does not store a FlowToken Vault object at the path \"\n                    .concat(\"/storage/flowTokenVault. \")\n                    .concat(\"The signer must initialize their account with this vault first!\"))\n    }\n\n    execute {\n        self.vaultRef.deposit(from: <-self.holderRef.withdraw(amount: amount))\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90561b904ec696d706f72742046756e6769626c65546f6b656e2066726f6d203078396130373636643933623636303862370a696d706f727420466c6f77546f6b656e2066726f6d203078376536306466303432613963303836380a696d706f7274204c6f636b6564546f6b656e732066726f6d203078393565303139613137643065323364370a0a7472616e73616374696f6e28616d6f756e743a2055466978363429207b0a0a202020206c657420686f6c6465725265663a2061757468284c6f636b6564546f6b656e732e546f6b656e4f7065726174696f6e732c2046756e6769626c65546f6b656e2e57697468647261772920264c6f636b6564546f6b656e732e546f6b656e486f6c6465720a202020206c6574207661756c745265663a20617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c740a0a202020207072657061726528616363743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e686f6c646572526566203d20616363742e73746f726167652e626f72726f773c61757468284c6f636b6564546f6b656e732e546f6b656e4f7065726174696f6e732c2046756e6769626c65546f6b656e2e57697468647261772920264c6f636b6564546f6b656e732e546f6b656e486f6c6465723e2866726f6d3a204c6f636b6564546f6b656e732e546f6b656e486f6c64657253746f7261676550617468290a2020202020202020202020203f3f2070616e6963282243616e6e6f74207769746864726177206c6f636b656420746f6b656e732120546865207369676e6572206f6620746865207472616e73616374696f6e20220a20202020202020202020202020202020202020202e636f6e6361742822646f6573206e6f74206861766520616e206173736f636961746564206c6f636b6564206163636f756e742c2022290a20202020202020202020202020202020202020202e636f6e6361742822736f20746865726520617265206e6f206c6f636b656420746f6b656e7320746f2077697468647261772e2229290a0a202020202020202073656c662e7661756c74526566203d20616363742e73746f726167652e626f72726f773c617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c743e2866726f6d3a202f73746f726167652f666c6f77546f6b656e5661756c74290a2020202020202020202020203f3f2070616e69632822546865207369676e657220646f6573206e6f742073746f7265206120466c6f77546f6b656e205661756c74206f626a65637420617420746865207061746820220a20202020202020202020202020202020202020202e636f6e63617428222f73746f726167652f666c6f77546f6b656e5661756c742e2022290a20202020202020202020202020202020202020202e636f6e6361742822546865207369676e6572206d75737420696e697469616c697a65207468656972206163636f756e7420776974682074686973207661756c74206669727374212229290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7661756c745265662e6465706f7369742866726f6d3a203c2d73656c662e686f6c6465725265662e776974686472617728616d6f756e743a20616d6f756e7429290a202020207d0a7d0af1b07b2274797065223a22554669783634222c2276616c7565223a2239323233333732303336382e3534373735383038227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90565f90561b904ec696d706f72742046756e6769626c65546f6b656e2066726f6d203078396130373636643933623636303862370a696d706f727420466c6f77546f6b656e2066726f6d203078376536306466303432613963303836380a696d706f7274204c6f636b6564546f6b656e732066726f6d203078393565303139613137643065323364370a0a7472616e73616374696f6e28616d6f756e743a2055466978363429207b0a0a202020206c657420686f6c6465725265663a2061757468284c6f636b6564546f6b656e732e546f6b656e4f7065726174696f6e732c2046756e6769626c65546f6b656e2e57697468647261772920264c6f636b6564546f6b656e732e546f6b656e486f6c6465720a202020206c6574207661756c745265663a20617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c740a0a202020207072657061726528616363743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e686f6c646572526566203d20616363742e73746f726167652e626f72726f773c61757468284c6f636b6564546f6b656e732e546f6b656e4f7065726174696f6e732c2046756e6769626c65546f6b656e2e57697468647261772920264c6f636b6564546f6b656e732e546f6b656e486f6c6465723e2866726f6d3a204c6f636b6564546f6b656e732e546f6b656e486f6c64657253746f7261676550617468290a2020202020202020202020203f3f2070616e6963282243616e6e6f74207769746864726177206c6f636b656420746f6b656e732120546865207369676e6572206f6620746865207472616e73616374696f6e20220a20202020202020202020202020202020202020202e636f6e6361742822646f6573206e6f74206861766520616e206173736f636961746564206c6f636b6564206163636f756e742c2022290a20202020202020202020202020202020202020202e636f6e6361742822736f20746865726520617265206e6f206c6f636b656420746f6b656e7320746f2077697468647261772e2229290a0a202020202020202073656c662e7661756c74526566203d20616363742e73746f726167652e626f72726f773c617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c743e2866726f6d3a202f73746f726167652f666c6f77546f6b656e5661756c74290a2020202020202020202020203f3f2070616e69632822546865207369676e657220646f6573206e6f742073746f7265206120466c6f77546f6b656e205661756c74206f626a65637420617420746865207061746820220a20202020202020202020202020202020202020202e636f6e63617428222f73746f726167652f666c6f77546f6b656e5661756c742e2022290a20202020202020202020202020202020202020202e636f6e6361742822546865207369676e6572206d75737420696e697469616c697a65207468656972206163636f756e7420776974682074686973207661756c74206669727374212229290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7661756c745265662e6465706f7369742866726f6d3a203c2d73656c662e686f6c6465725265662e776974686472617728616d6f756e743a20616d6f756e7429290a202020207d0a7d0af1b07b2274797065223a22554669783634222c2276616c7565223a2239323233333732303336382e3534373735383038227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02d47cbe3e9d3cb2a9cefec7239fb91c176e9c7979fe345e3ada4ad7c79adb9efbdb6fc54bee86ff8933fd39d53bda1bd713c8a3c8d6d57be9cb415152d1d4c6f4576974686472617720556e6c6f636b656420464c4f57000101416d6f756e7400005546697836340003",
    "hash": "d47cbe3e9d3cb2a9cefec7239fb91c176e9c7979fe345e3ada4ad7c79adb9efb"
  },
  {
    "title": "TH.02 - Deposit Unlocked FLOW",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FungibleToken from 0x9a0766d93b6608b7\nimport FlowToken from 0x7e60df042a9c0868\nimport LockedTokens from 0x95e019a17d0e23d7\n\ntransaction(amount: UFix64) {\n\n    let holderRef: &LockedTokens.TokenHolder\n    let vaultRef: auth(FungibleToken.Withdraw) &FlowToken.Vault\n\n    prepare(acct: auth(BorrowValue) &Account) {\n        self.holderRef = acct.storage.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"Cannot deposit tokens to a locked account! The signer of the transaction \"\n                    .concat(\"does not have an associated locked account, \")\n                    .concat(\"so there is nowhere to deposit the tokens.\"))\n\n        self.vaultRef = acct.storage.borrow<auth(FungibleToken.Withdraw) &FlowToken.Vault>(from: /storage/flowTokenVault)\n            ?? panic(\"The signer does not store a FlowToken Vault object at the path \"\n                    .concat(\"/storage/flowTokenVault. \")\n                    .concat(\"The signer must initialize their account with this vault first!\"))\n    }\n\n    execute {\n        self.holderRef.deposit(from: <-self.vaultRef.withdraw(amount: amount))\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FungibleToken from 0x9a0766d93b6608b7\nimport FlowToken from 0x7e60df042a9c0868\nimport LockedTokens from 0x95e019a17d0e23d7\n\ntransaction(amount: UFix64) {\n\n    let holderRef: &LockedTokens.TokenHolder\n    let vaultRef: auth(FungibleToken.Withdraw) &FlowToken.Vault\n\n    prepare(acct: auth(BorrowValue) &Account) {\n        self.holderRef = acct.storage.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"Cannot deposit tokens to a locked account! The signer of the transaction \"\n                    .concat(\"does not have an associated locked account, \")\n                    .concat(\"so there is nowhere to deposit the tokens.\"))\n\n        self.vaultRef = acct.storage.borrow<auth(FungibleToken.Withdraw) &FlowToken.Vault>(from: /storage/flowTokenVault)\n            ?? panic(\"The signer does not store a FlowToken Vault object at the path \"\n                    .concat(\"/storage/flowTokenVault. \")\n                    .concat(\"The signer must initialize their account with this vault first!\"))\n    }\n\n    execute {\n        self.holderRef.deposit(from: <-self.vaultRef.withdraw(amount: amount))\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f904f7b90482696d706f72742046756e6769626c65546f6b656e2066726f6d203078396130373636643933623636303862370a696d706f727420466c6f77546f6b656e2066726f6d203078376536306466303432613963303836380a696d706f7274204c6f636b6564546f6b656e732066726f6d203078393565303139613137643065323364370a0a7472616e73616374696f6e28616d6f756e743a2055466978363429207b0a0a202020206c657420686f6c6465725265663a20264c6f636b6564546f6b656e732e546f6b656e486f6c6465720a202020206c6574207661756c745265663a20617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c740a0a202020207072657061726528616363743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e686f6c646572526566203d20616363742e73746f726167652e626f72726f773c264c6f636b6564546f6b656e732e546f6b656e486f6c6465723e2866726f6d3a204c6f636b6564546f6b656e732e546f6b656e486f6c64657253746f7261676550617468290a2020202020202020202020203f3f2070616e6963282243616e6e6f74206465706f73697420746f6b656e7320746f2061206c6f636b6564206163636f756e742120546865207369676e6572206f6620746865207472616e73616374696f6e20220a20202020202020202020202020202020202020202e636f6e6361742822646f6573206e6f74206861766520616e206173736f636961746564206c6f636b6564206163636f756e742c2022290a20202020202020202020202020202020202020202e636f6e6361742822736f207468657265206973206e6f776865726520746f206465706f7369742074686520746f6b656e732e2229290a0a202020202020202073656c662e7661756c74526566203d20616363742e73746f726167652e626f72726f773c617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c743e2866726f6d3a202f73746f726167652f666c6f77546f6b656e5661756c74290a2020202020202020202020203f3f2070616e69632822546865207369676e657220646f6573206e6f742073746f7265206120466c6f77546f6b656e205661756c74206f626a65637420617420746865207061746820220a20202020202020202020202020202020202020202e636f6e63617428222f73746f726167652f666c6f77546f6b656e5661756c742e2022290a20202020202020202020202020202020202020202e636f6e6361742822546865207369676e6572206d75737420696e697469616c697a65207468656972206163636f756e7420776974682074686973207661756c74206669727374212229290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e686f6c6465725265662e6465706f7369742866726f6d3a203c2d73656c662e7661756c745265662e776974686472617728616d6f756e743a20616d6f756e7429290a202020207d0a7d0af1b07b2274797065223a22554669783634222c2276616c7565223a2239323233333732303336382e3534373735383038227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f904fbf904f7b90482696d706f72742046756e6769626c65546f6b656e2066726f6d203078396130373636643933623636303862370a696d706f727420466c6f77546f6b656e2066726f6d203078376536306466303432613963303836380a696d706f7274204c6f636b6564546f6b656e732066726f6d203078393565303139613137643065323364370a0a7472616e73616374696f6e28616d6f756e743a2055466978363429207b0a0a202020206c657420686f6c6465725265663a20264c6f636b6564546f6b656e732e546f6b656e486f6c6465720a202020206c6574207661756c745265663a20617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c740a0a202020207072657061726528616363743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e686f6c646572526566203d20616363742e73746f726167652e626f72726f773c264c6f636b6564546f6b656e732e546f6b656e486f6c6465723e2866726f6d3a204c6f636b6564546f6b656e732e546f6b656e486f6c64657253746f7261676550617468290a2020202020202020202020203f3f2070616e6963282243616e6e6f74206465706f73697420746f6b656e7320746f2061206c6f636b6564206163636f756e742120546865207369676e6572206f6620746865207472616e73616374696f6e20220a20202020202020202020202020202020202020202e636f6e6361742822646f6573206e6f74206861766520616e206173736f636961746564206c6f636b6564206163636f756e742c2022290a20202020202020202020202020202020202020202e636f6e6361742822736f207468657265206973206e6f776865726520746f206465706f7369742074686520746f6b656e732e2229290a0a202020202020202073656c662e7661756c74526566203d20616363742e73746f726167652e626f72726f773c617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c743e2866726f6d3a202f73746f726167652f666c6f77546f6b656e5661756c74290a2020202020202020202020203f3f2070616e69632822546865207369676e657220646f6573206e6f742073746f7265206120466c6f77546f6b656e205661756c74206f626a65637420617420746865207061746820220a20202020202020202020202020202020202020202e636f6e63617428222f73746f726167652f666c6f77546f6b656e5661756c742e2022290a20202020202020202020202020202020202020202e636f6e6361742822546865207369676e6572206d75737420696e697469616c697a65207468656972206163636f756e7420776974682074686973207661756c74206669727374212229290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e686f6c6465725265662e6465706f7369742866726f6d3a203c2d73656c662e7661756c745265662e776974686472617728616d6f756e743a20616d6f756e7429290a202020207d0a7d0af1b07b2274797065223a22554669783634222c2276616c7565223a2239323233333732303336382e3534373735383038227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02fb6e05f6d90c949de3044ae81ac3189c3fa797fe67e56604a6b3a6d88940158673e043f0c811e990d4f6f125c3f80ff015f5e0a972a75c02ddb61501d83a367f4465706f73697420556e6c6f636b656420464c4f57000101416d6f756e7400005546697836340003",
    "hash": "fb6e05f6d90c949de3044ae81ac3189c3fa797fe67e56604a6b3a6d889401586"
  },
  {
    "title": "SCO.01 - Setup Staking Collection",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FungibleToken from 0x9a0766d93b6608b7\nimport FlowToken from 0x7e60df042a9c0868\nimport FlowIDTableStaking from 0x9eca2b38b18b5dfe\nimport LockedTokens from 0x95e019a17d0e23d7\nimport FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// This transaction sets up an account to use a staking collection\n/// It will work regardless of whether they have a regular account, a two-account locked tokens setup,\n/// or staking objects stored in the unlocked account\n\ntransaction {\n    prepare(signer: auth(BorrowValue, Storage, Capabilities) &Account) {\n\n        // If there isn't already a staking collection\n        if signer.storage.borrow<&FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath) == nil {\n\n            // Create private capabilities for the token holder and unlocked vault\n            let lockedHolder = signer.capabilities.storage.issue<auth(FungibleToken.Withdraw, LockedTokens.TokenOperations) &LockedTokens.TokenHolder>(LockedTokens.TokenHolderStoragePath)!\n            let flowToken = signer.capabilities.storage.issue<auth(FungibleToken.Withdraw) &FlowToken.Vault>(/storage/flowTokenVault)!\n\n            // Create a new Staking Collection and put it in storage\n            if lockedHolder.check() {\n                signer.storage.save(\n                    <- FlowStakingCollection.createStakingCollection(\n                        unlockedVault: flowToken,\n                        tokenHolder: lockedHolder\n                    ),\n                    to: FlowStakingCollection.StakingCollectionStoragePath\n                )\n            } else {\n                signer.storage.save(\n                    <- FlowStakingCollection.createStakingCollection(\n                        unlockedVault: flowToken,\n                        tokenHolder: nil\n                    ),\n                    to: FlowStakingCollection.StakingCollectionStoragePath\n                )\n            }\n\n            // Publish a capability to the created staking collection.\n            let stakingCollectionCap = signer.capabilities.storage.issue<&FlowStakingCollection.StakingCollection>(\n                FlowStakingCollection.StakingCollectionStoragePath\n            )\n\n            signer.capabilities.publish(\n                stakingCollectionCap,\n                at: FlowStakingCollection.StakingCollectionPublicPath\n            )\n        }\n\n        // borrow a reference to the staking collection\n        let collectionRef = signer.storage.borrow<&FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow staking collection reference\")\n\n        // If there is a node staker object in the account, put it in the staking collection\n        if signer.storage.borrow<&FlowIDTableStaking.NodeStaker>(from: FlowIDTableStaking.NodeStakerStoragePath) != nil {\n            let node <- signer.storage.load<@FlowIDTableStaking.NodeStaker>(from: FlowIDTableStaking.NodeStakerStoragePath)!\n            collectionRef.addNodeObject(<-node, machineAccountInfo: nil)\n        }\n\n        // If there is a delegator object in the account, put it in the staking collection\n        if signer.storage.borrow<&FlowIDTableStaking.NodeDelegator>(from: FlowIDTableStaking.DelegatorStoragePath) != nil {\n            let delegator <- signer.storage.load<@FlowIDTableStaking.NodeDelegator>(from: FlowIDTableStaking.DelegatorStoragePath)!\n            collectionRef.addDelegatorObject(<-delegator)\n        }\n    }\n}\n",
      "arguments": [],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FungibleToken from 0x9a0766d93b6608b7\nimport FlowToken from 0x7e60df042a9c0868\nimport FlowIDTableStaking from 0x9eca2b38b18b5dfe\nimport LockedTokens from 0x95e019a17d0e23d7\nimport FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// This transaction sets up an account to use a staking collection\n/// It will work regardless of whether they have a regular account, a two-account locked tokens setup,\n/// or staking objects stored in the unlocked account\n\ntransaction {\n    prepare(signer: auth(BorrowValue, Storage, Capabilities) &Account) {\n\n        // If there isn't already a staking collection\n        if signer.storage.borrow<&FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath) == nil {\n\n            // Create private capabilities for the token holder and unlocked vault\n            let lockedHolder = signer.capabilities.storage.issue<auth(FungibleToken.Withdraw, LockedTokens.TokenOperations) &LockedTokens.TokenHolder>(LockedTokens.TokenHolderStoragePath)!\n            let flowToken = signer.capabilities.storage.issue<auth(FungibleToken.Withdraw) &FlowToken.Vault>(/storage/flowTokenVault)!\n\n            // Create a new Staking Collection and put it in storage\n            if lockedHolder.check() {\n                signer.storage.save(\n                    <- FlowStakingCollection.createStakingCollection(\n                        unlockedVault: flowToken,\n                        tokenHolder: lockedHolder\n                    ),\n                    to: FlowStakingCollection.StakingCollectionStoragePath\n                )\n            } else {\n                signer.storage.save(\n                    <- FlowStakingCollection.createStakingCollection(\n                        unlockedVault: flowToken,\n                        tokenHolder: nil\n                    ),\n                    to: FlowStakingCollection.StakingCollectionStoragePath\n                )\n            }\n\n            // Publish a capability to the created staking collection.\n            let stakingCollectionCap = signer.capabilities.storage.issue<&FlowStakingCollection.StakingCollection>(\n                FlowStakingCollection.StakingCollectionStoragePath\n            )\n\n            signer.capabilities.publish(\n                stakingCollectionCap,\n                at: FlowStakingCollection.StakingCollectionPublicPath\n            )\n        }\n\n        // borrow a reference to the staking collection\n        let collectionRef = signer.storage.borrow<&FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow staking collection reference\")\n\n        // If there is a node staker object in the account, put it in the staking collection\n        if signer.storage.borrow<&FlowIDTableStaking.NodeStaker>(from: FlowIDTableStaking.NodeStakerStoragePath) != nil {\n            let node <- signer.storage.load<@FlowIDTableStaking.NodeStaker>(from: FlowIDTableStaking.NodeStakerStoragePath)!\n            collectionRef.addNodeObject(<-node, machineAccountInfo: nil)\n        }\n\n        // If there is a delegator object in the account, put it in the staking collection\n        if signer.storage.borrow<&FlowIDTableStaking.NodeDelegator>(from: FlowIDTableStaking.DelegatorStoragePath) != nil {\n            let delegator <- signer.storage.load<@FlowIDTableStaking.NodeDelegator>(from: FlowIDTableStaking.DelegatorStoragePath)!\n            collectionRef.addDelegatorObject(<-delegator)\n        }\n    }\n}\n",
      "arguments": [],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90df1b90dad696d706f72742046756e6769626c65546f6b656e2066726f6d203078396130373636643933623636303862370a696d706f727420466c6f77546f6b656e2066726f6d203078376536306466303432613963303836380a696d706f727420466c6f7749445461626c655374616b696e672066726f6d203078396563613262333862313862356466650a696d706f7274204c6f636b6564546f6b656e732066726f6d203078393565303139613137643065323364370a696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f2054686973207472616e73616374696f6e207365747320757020616e206163636f756e7420746f207573652061207374616b696e6720636f6c6c656374696f6e0a2f2f2f2049742077696c6c20776f726b207265676172646c657373206f66207768657468657220746865792068617665206120726567756c6172206163636f756e742c20612074776f2d6163636f756e74206c6f636b656420746f6b656e732073657475702c0a2f2f2f206f72207374616b696e67206f626a656374732073746f72656420696e2074686520756e6c6f636b6564206163636f756e740a0a7472616e73616374696f6e207b0a2020202070726570617265287369676e65723a206175746828426f72726f7756616c75652c2053746f726167652c204361706162696c69746965732920264163636f756e7429207b0a0a20202020202020202f2f2049662074686572652069736e277420616c72656164792061207374616b696e6720636f6c6c656374696f6e0a20202020202020206966207369676e65722e73746f726167652e626f72726f773c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f726167655061746829203d3d206e696c207b0a0a2020202020202020202020202f2f204372656174652070726976617465206361706162696c697469657320666f722074686520746f6b656e20686f6c64657220616e6420756e6c6f636b6564207661756c740a2020202020202020202020206c6574206c6f636b6564486f6c646572203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c617574682846756e6769626c65546f6b656e2e57697468647261772c204c6f636b6564546f6b656e732e546f6b656e4f7065726174696f6e732920264c6f636b6564546f6b656e732e546f6b656e486f6c6465723e284c6f636b6564546f6b656e732e546f6b656e486f6c64657253746f726167655061746829210a2020202020202020202020206c657420666c6f77546f6b656e203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c743e282f73746f726167652f666c6f77546f6b656e5661756c7429210a0a2020202020202020202020202f2f204372656174652061206e6577205374616b696e6720436f6c6c656374696f6e20616e642070757420697420696e2073746f726167650a2020202020202020202020206966206c6f636b6564486f6c6465722e636865636b2829207b0a202020202020202020202020202020207369676e65722e73746f726167652e73617665280a20202020202020202020202020202020202020203c2d20466c6f775374616b696e67436f6c6c656374696f6e2e6372656174655374616b696e67436f6c6c656374696f6e280a202020202020202020202020202020202020202020202020756e6c6f636b65645661756c743a20666c6f77546f6b656e2c0a202020202020202020202020202020202020202020202020746f6b656e486f6c6465723a206c6f636b6564486f6c6465720a2020202020202020202020202020202020202020292c0a2020202020202020202020202020202020202020746f3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f72616765506174680a20202020202020202020202020202020290a2020202020202020202020207d20656c7365207b0a202020202020202020202020202020207369676e65722e73746f726167652e73617665280a20202020202020202020202020202020202020203c2d20466c6f775374616b696e67436f6c6c656374696f6e2e6372656174655374616b696e67436f6c6c656374696f6e280a202020202020202020202020202020202020202020202020756e6c6f636b65645661756c743a20666c6f77546f6b656e2c0a202020202020202020202020202020202020202020202020746f6b656e486f6c6465723a206e696c0a2020202020202020202020202020202020202020292c0a2020202020202020202020202020202020202020746f3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f72616765506174680a20202020202020202020202020202020290a2020202020202020202020207d0a0a2020202020202020202020202f2f205075626c6973682061206361706162696c69747920746f207468652063726561746564207374616b696e6720636f6c6c656374696f6e2e0a2020202020202020202020206c6574207374616b696e67436f6c6c656374696f6e436170203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e280a20202020202020202020202020202020466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f72616765506174680a202020202020202020202020290a0a2020202020202020202020207369676e65722e6361706162696c69746965732e7075626c697368280a202020202020202020202020202020207374616b696e67436f6c6c656374696f6e4361702c0a2020202020202020202020202020202061743a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e5075626c6963506174680a202020202020202020202020290a20202020202020207d0a0a20202020202020202f2f20626f72726f772061207265666572656e636520746f20746865207374616b696e6720636f6c6c656374696f6e0a20202020202020206c657420636f6c6c656374696f6e526566203d207369676e65722e73746f726167652e626f72726f773c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f77207374616b696e6720636f6c6c656374696f6e207265666572656e636522290a0a20202020202020202f2f2049662074686572652069732061206e6f6465207374616b6572206f626a65637420696e20746865206163636f756e742c2070757420697420696e20746865207374616b696e6720636f6c6c656374696f6e0a20202020202020206966207369676e65722e73746f726167652e626f72726f773c26466c6f7749445461626c655374616b696e672e4e6f64655374616b65723e2866726f6d3a20466c6f7749445461626c655374616b696e672e4e6f64655374616b657253746f72616765506174682920213d206e696c207b0a2020202020202020202020206c6574206e6f6465203c2d207369676e65722e73746f726167652e6c6f61643c40466c6f7749445461626c655374616b696e672e4e6f64655374616b65723e2866726f6d3a20466c6f7749445461626c655374616b696e672e4e6f64655374616b657253746f726167655061746829210a202020202020202020202020636f6c6c656374696f6e5265662e6164644e6f64654f626a656374283c2d6e6f64652c206d616368696e654163636f756e74496e666f3a206e696c290a20202020202020207d0a0a20202020202020202f2f20496620746865726520697320612064656c656761746f72206f626a65637420696e20746865206163636f756e742c2070757420697420696e20746865207374616b696e6720636f6c6c656374696f6e0a20202020202020206966207369676e65722e73746f726167652e626f72726f773c26466c6f7749445461626c655374616b696e672e4e6f646544656c656761746f723e2866726f6d3a20466c6f7749445461626c655374616b696e672e44656c656761746f7253746f72616765506174682920213d206e696c207b0a2020202020202020202020206c65742064656c656761746f72203c2d207369676e65722e73746f726167652e6c6f61643c40466c6f7749445461626c655374616b696e672e4e6f646544656c656761746f723e2866726f6d3a20466c6f7749445461626c655374616b696e672e44656c656761746f7253746f726167655061746829210a202020202020202020202020636f6c6c656374696f6e5265662e61646444656c656761746f724f626a656374283c2d64656c656761746f72290a20202020202020207d0a202020207d0a7d0ac0a0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90df5f90df1b90dad696d706f72742046756e6769626c65546f6b656e2066726f6d203078396130373636643933623636303862370a696d706f727420466c6f77546f6b656e2066726f6d203078376536306466303432613963303836380a696d706f727420466c6f7749445461626c655374616b696e672066726f6d203078396563613262333862313862356466650a696d706f7274204c6f636b6564546f6b656e732066726f6d203078393565303139613137643065323364370a696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f2054686973207472616e73616374696f6e207365747320757020616e206163636f756e7420746f207573652061207374616b696e6720636f6c6c656374696f6e0a2f2f2f2049742077696c6c20776f726b207265676172646c657373206f66207768657468657220746865792068617665206120726567756c6172206163636f756e742c20612074776f2d6163636f756e74206c6f636b656420746f6b656e732073657475702c0a2f2f2f206f72207374616b696e67206f626a656374732073746f72656420696e2074686520756e6c6f636b6564206163636f756e740a0a7472616e73616374696f6e207b0a2020202070726570617265287369676e65723a206175746828426f72726f7756616c75652c2053746f726167652c204361706162696c69746965732920264163636f756e7429207b0a0a20202020202020202f2f2049662074686572652069736e277420616c72656164792061207374616b696e6720636f6c6c656374696f6e0a20202020202020206966207369676e65722e73746f726167652e626f72726f773c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f726167655061746829203d3d206e696c207b0a0a2020202020202020202020202f2f204372656174652070726976617465206361706162696c697469657320666f722074686520746f6b656e20686f6c64657220616e6420756e6c6f636b6564207661756c740a2020202020202020202020206c6574206c6f636b6564486f6c646572203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c617574682846756e6769626c65546f6b656e2e57697468647261772c204c6f636b6564546f6b656e732e546f6b656e4f7065726174696f6e732920264c6f636b6564546f6b656e732e546f6b656e486f6c6465723e284c6f636b6564546f6b656e732e546f6b656e486f6c64657253746f726167655061746829210a2020202020202020202020206c657420666c6f77546f6b656e203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c743e282f73746f726167652f666c6f77546f6b656e5661756c7429210a0a2020202020202020202020202f2f204372656174652061206e6577205374616b696e6720436f6c6c656374696f6e20616e642070757420697420696e2073746f726167650a2020202020202020202020206966206c6f636b6564486f6c6465722e636865636b2829207b0a202020202020202020202020202020207369676e65722e73746f726167652e73617665280a20202020202020202020202020202020202020203c2d20466c6f775374616b696e67436f6c6c656374696f6e2e6372656174655374616b696e67436f6c6c656374696f6e280a202020202020202020202020202020202020202020202020756e6c6f636b65645661756c743a20666c6f77546f6b656e2c0a202020202020202020202020202020202020202020202020746f6b656e486f6c6465723a206c6f636b6564486f6c6465720a2020202020202020202020202020202020202020292c0a2020202020202020202020202020202020202020746f3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f72616765506174680a20202020202020202020202020202020290a2020202020202020202020207d20656c7365207b0a202020202020202020202020202020207369676e65722e73746f726167652e73617665280a20202020202020202020202020202020202020203c2d20466c6f775374616b696e67436f6c6c656374696f6e2e6372656174655374616b696e67436f6c6c656374696f6e280a202020202020202020202020202020202020202020202020756e6c6f636b65645661756c743a20666c6f77546f6b656e2c0a202020202020202020202020202020202020202020202020746f6b656e486f6c6465723a206e696c0a2020202020202020202020202020202020202020292c0a2020202020202020202020202020202020202020746f3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f72616765506174680a20202020202020202020202020202020290a2020202020202020202020207d0a0a2020202020202020202020202f2f205075626c6973682061206361706162696c69747920746f207468652063726561746564207374616b696e6720636f6c6c656374696f6e2e0a2020202020202020202020206c6574207374616b696e67436f6c6c656374696f6e436170203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e280a20202020202020202020202020202020466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f72616765506174680a202020202020202020202020290a0a2020202020202020202020207369676e65722e6361706162696c69746965732e7075626c697368280a202020202020202020202020202020207374616b696e67436f6c6c656374696f6e4361702c0a2020202020202020202020202020202061743a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e5075626c6963506174680a202020202020202020202020290a20202020202020207d0a0a20202020202020202f2f20626f72726f772061207265666572656e636520746f20746865207374616b696e6720636f6c6c656374696f6e0a20202020202020206c657420636f6c6c656374696f6e526566203d207369676e65722e73746f726167652e626f72726f773c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f77207374616b696e6720636f6c6c656374696f6e207265666572656e636522290a0a20202020202020202f2f2049662074686572652069732061206e6f6465207374616b6572206f626a65637420696e20746865206163636f756e742c2070757420697420696e20746865207374616b696e6720636f6c6c656374696f6e0a20202020202020206966207369676e65722e73746f726167652e626f72726f773c26466c6f7749445461626c655374616b696e672e4e6f64655374616b65723e2866726f6d3a20466c6f7749445461626c655374616b696e672e4e6f64655374616b657253746f72616765506174682920213d206e696c207b0a2020202020202020202020206c6574206e6f6465203c2d207369676e65722e73746f726167652e6c6f61643c40466c6f7749445461626c655374616b696e672e4e6f64655374616b65723e2866726f6d3a20466c6f7749445461626c655374616b696e672e4e6f64655374616b657253746f726167655061746829210a202020202020202020202020636f6c6c656374696f6e5265662e6164644e6f64654f626a656374283c2d6e6f64652c206d616368696e654163636f756e74496e666f3a206e696c290a20202020202020207d0a0a20202020202020202f2f20496620746865726520697320612064656c656761746f72206f626a65637420696e20746865206163636f756e742c2070757420697420696e20746865207374616b696e6720636f6c6c656374696f6e0a20202020202020206966207369676e65722e73746f726167652e626f72726f773c26466c6f7749445461626c655374616b696e672e4e6f646544656c656761746f723e2866726f6d3a20466c6f7749445461626c655374616b696e672e44656c656761746f7253746f72616765506174682920213d206e696c207b0a2020202020202020202020206c65742064656c656761746f72203c2d207369676e65722e73746f726167652e6c6f61643c40466c6f7749445461626c655374616b696e672e4e6f646544656c656761746f723e2866726f6d3a20466c6f7749445461626c655374616b696e672e44656c656761746f7253746f726167655061746829210a202020202020202020202020636f6c6c656374696f6e5265662e61646444656c656761746f724f626a656374283c2d64656c656761746f72290a20202020202020207d0a202020207d0a7d0ac0a0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02861784e7ac135a9cfec90decdff2e53971a4d63135db77bcef3b273b710b181469f30decc15bd78107c631e200963398e8ddbc58bb61e577d223725f348fc2d95365747570205374616b696e6720436f6c6c656374696f6e0000",
    "hash": "861784e7ac135a9cfec90decdff2e53971a4d63135db77bcef3b273b710b1814"
  },
  {
    "title": "SCO.02 - Register Delegator",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Registers a delegator in the staking collection resource\n/// for the specified nodeID and the amount of tokens to commit\n\ntransaction(id: String, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.registerDelegator(nodeID: id, amount: amount)      \n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Registers a delegator in the staking collection resource\n/// for the specified nodeID and the amount of tokens to commit\n\ntransaction(id: String, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.registerDelegator(nodeID: id, amount: amount)      \n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f903e7b90313696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f2052656769737465727320612064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e207265736f757263650a2f2f2f20666f722074686520737065636966696564206e6f6465494420616e642074686520616d6f756e74206f6620746f6b656e7320746f20636f6d6d69740a0a7472616e73616374696f6e2869643a20537472696e672c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e726567697374657244656c656761746f72286e6f646549443a2069642c20616d6f756e743a20616d6f756e74292020202020200a202020207d0a7d0af88fb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f903ebf903e7b90313696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f2052656769737465727320612064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e207265736f757263650a2f2f2f20666f722074686520737065636966696564206e6f6465494420616e642074686520616d6f756e74206f6620746f6b656e7320746f20636f6d6d69740a0a7472616e73616374696f6e2869643a20537472696e672c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e726567697374657244656c656761746f72286e6f646549443a2069642c20616d6f756e743a20616d6f756e74292020202020200a202020207d0a7d0af88fb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02e477ffd71af218099bdf2305894f39f194d5caddcc55233b899a6cab8be137fe38eb95207a8f765441d110dfd46ea3c51dc69d2bcdaa9468e9ca9260609d155852656769737465722044656c656761746f720002044e6f6465204944000001416d6f756e7400015546697836340003",
    "hash": "e477ffd71af218099bdf2305894f39f194d5caddcc55233b899a6cab8be137fe"
  },
  {
    "title": "SCO.03 - Register Node",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import Crypto\nimport FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Registers a delegator in the staking collection resource\n/// for the specified node information and the amount of tokens to commit\n\ntransaction(id: String,\n            role: UInt8,\n            networkingAddress: String,\n            networkingKey: String,\n            stakingKey: String,\n            amount: UFix64,\n            machineAccountKey: String, \n            machineAccountKeySignatureAlgorithm: UInt8, \n            machineAccountKeyHashAlgorithm: UInt8) {\n\n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n\n        if let machineAccount = self.stakingCollectionRef.registerNode(\n            id: id,\n            role: role,\n            networkingAddress: networkingAddress,\n            networkingKey: networkingKey,\n            stakingKey: stakingKey,\n            amount: amount,\n            payer: account\n        ) {\n            let sigAlgo = SignatureAlgorithm(rawValue: machineAccountKeySignatureAlgorithm)\n                ?? panic(\"Cannot register node with provided machine account key: Must provide a signature algorithm raw value that corresponds to \"\n                .concat(\"one of the available signature algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(machineAccountKeySignatureAlgorithm.toString())\n                .concat(\" but the options are either 1 (ECDSA_P256), 2 (ECDSA_secp256k1), or 3 (BLS_BLS12_381).\"))\n\n            let hashAlgo = HashAlgorithm(rawValue: machineAccountKeyHashAlgorithm)\n                ?? panic(\"Cannot register node with the provided machine account key: Must provide a hash algorithm raw value that corresponds to \"\n                .concat(\"one of of the available hash algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(machineAccountKeyHashAlgorithm.toString())\n                .concat(\" but the options are 1 (SHA2_256), 2 (SHA2_384), 3 (SHA3_256), \")\n                .concat(\"4 (SHA3_384), 5 (KMAC128_BLS_BLS12_381), or 6 (KECCAK_256).\"))\n            \n            let publicKey = PublicKey(\n\t\t\t    publicKey: machineAccountKey.decodeHex(),\n\t\t\t    signatureAlgorithm: sigAlgo\n\t\t    )\n            machineAccount.keys.add(publicKey: publicKey, hashAlgorithm: hashAlgo, weight: 1000.0)\n        }\n    }\n}",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "flow-node.test:3569",
          "type": "String"
        },
        {
          "value": "1348307bc77c688e80049de9d081aa09755da33e6997605fa059db2144fc85e560cbe6f7da8d74b453f5916618cb8fd392c2db856f3e78221dc68db1b1d914e4",
          "type": "String"
        },
        {
          "value": "8dec36ed8a91e3e5d737b06434d94a8a561c7889495d6c7081cd5e123a42124415b9391c9b9aa165c2f71994bf9607cb0ea262ad162fec74146d1ebc482a33b9dad203d16a83bbfda89b3f6e1cd1d8fb2e704a162d259a0ac9f26bc8635d74f6",
          "type": "String"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        },
        {
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164",
          "type": "String"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import Crypto\nimport FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Registers a delegator in the staking collection resource\n/// for the specified node information and the amount of tokens to commit\n\ntransaction(id: String,\n            role: UInt8,\n            networkingAddress: String,\n            networkingKey: String,\n            stakingKey: String,\n            amount: UFix64,\n            machineAccountKey: String, \n            machineAccountKeySignatureAlgorithm: UInt8, \n            machineAccountKeyHashAlgorithm: UInt8) {\n\n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n\n        if let machineAccount = self.stakingCollectionRef.registerNode(\n            id: id,\n            role: role,\n            networkingAddress: networkingAddress,\n            networkingKey: networkingKey,\n            stakingKey: stakingKey,\n            amount: amount,\n            payer: account\n        ) {\n            let sigAlgo = SignatureAlgorithm(rawValue: machineAccountKeySignatureAlgorithm)\n                ?? panic(\"Cannot register node with provided machine account key: Must provide a signature algorithm raw value that corresponds to \"\n                .concat(\"one of the available signature algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(machineAccountKeySignatureAlgorithm.toString())\n                .concat(\" but the options are either 1 (ECDSA_P256), 2 (ECDSA_secp256k1), or 3 (BLS_BLS12_381).\"))\n\n            let hashAlgo = HashAlgorithm(rawValue: machineAccountKeyHashAlgorithm)\n                ?? panic(\"Cannot register node with the provided machine account key: Must provide a hash algorithm raw value that corresponds to \"\n                .concat(\"one of of the available hash algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(machineAccountKeyHashAlgorithm.toString())\n                .concat(\" but the options are 1 (SHA2_256), 2 (SHA2_384), 3 (SHA3_256), \")\n                .concat(\"4 (SHA3_384), 5 (KMAC128_BLS_BLS12_381), or 6 (KECCAK_256).\"))\n            \n            let publicKey = PublicKey(\n\t\t\t    publicKey: machineAccountKey.decodeHex(),\n\t\t\t    signatureAlgorithm: sigAlgo\n\t\t    )\n            machineAccount.keys.add(publicKey: publicKey, hashAlgorithm: hashAlgo, weight: 1000.0)\n        }\n    }\n}",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "flow-node.test:3569",
          "type": "String"
        },
        {
          "value": "1348307bc77c688e80049de9d081aa09755da33e6997605fa059db2144fc85e560cbe6f7da8d74b453f5916618cb8fd392c2db856f3e78221dc68db1b1d914e4",
          "type": "String"
        },
        {
          "value": "8dec36ed8a91e3e5d737b06434d94a8a561c7889495d6c7081cd5e123a42124415b9391c9b9aa165c2f71994bf9607cb0ea262ad162fec74146d1ebc482a33b9dad203d16a83bbfda89b3f6e1cd1d8fb2e704a162d259a0ac9f26bc8635d74f6",
          "type": "String"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        },
        {
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164",
          "type": "String"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90df7b90a73696d706f72742043727970746f0a696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f2052656769737465727320612064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e207265736f757263650a2f2f2f20666f722074686520737065636966696564206e6f646520696e666f726d6174696f6e20616e642074686520616d6f756e74206f6620746f6b656e7320746f20636f6d6d69740a0a7472616e73616374696f6e2869643a20537472696e672c0a202020202020202020202020726f6c653a2055496e74382c0a2020202020202020202020206e6574776f726b696e67416464726573733a20537472696e672c0a2020202020202020202020206e6574776f726b696e674b65793a20537472696e672c0a2020202020202020202020207374616b696e674b65793a20537472696e672c0a202020202020202020202020616d6f756e743a205546697836342c0a2020202020202020202020206d616368696e654163636f756e744b65793a20537472696e672c200a2020202020202020202020206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d3a2055496e74382c200a2020202020202020202020206d616368696e654163636f756e744b657948617368416c676f726974686d3a2055496e743829207b0a0a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a0a20202020202020206966206c6574206d616368696e654163636f756e74203d2073656c662e7374616b696e67436f6c6c656374696f6e5265662e72656769737465724e6f6465280a20202020202020202020202069643a2069642c0a202020202020202020202020726f6c653a20726f6c652c0a2020202020202020202020206e6574776f726b696e67416464726573733a206e6574776f726b696e67416464726573732c0a2020202020202020202020206e6574776f726b696e674b65793a206e6574776f726b696e674b65792c0a2020202020202020202020207374616b696e674b65793a207374616b696e674b65792c0a202020202020202020202020616d6f756e743a20616d6f756e742c0a20202020202020202020202070617965723a206163636f756e740a202020202020202029207b0a2020202020202020202020206c657420736967416c676f203d205369676e6174757265416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d290a202020202020202020202020202020203f3f2070616e6963282243616e6e6f74207265676973746572206e6f646520776974682070726f7669646564206d616368696e65206163636f756e74206b65793a204d7573742070726f766964652061207369676e617475726520616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f662074686520617661696c61626c65207369676e617475726520616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e636174286d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e7320617265206569746865722031202845434453415f50323536292c2032202845434453415f736563703235366b31292c206f7220332028424c535f424c5331325f333831292e2229290a0a2020202020202020202020206c65742068617368416c676f203d2048617368416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b657948617368416c676f726974686d290a202020202020202020202020202020203f3f2070616e6963282243616e6e6f74207265676973746572206e6f64652077697468207468652070726f7669646564206d616368696e65206163636f756e74206b65793a204d7573742070726f766964652061206861736820616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f66206f662074686520617661696c61626c65206861736820616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e636174286d616368696e654163636f756e744b657948617368416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e732061726520312028534841325f323536292c20322028534841325f333834292c20332028534841335f323536292c2022290a202020202020202020202020202020202e636f6e6361742822342028534841335f333834292c203520284b4d41433132385f424c535f424c5331325f333831292c206f72203620284b454343414b5f323536292e2229290a2020202020202020202020200a2020202020202020202020206c6574207075626c69634b6579203d205075626c69634b6579280a090909202020207075626c69634b65793a206d616368696e654163636f756e744b65792e6465636f646548657828292c0a090909202020207369676e6174757265416c676f726974686d3a20736967416c676f0a090920202020290a2020202020202020202020206d616368696e654163636f756e742e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2068617368416c676f2c207765696768743a20313030302e30290a20202020202020207d0a202020207d0a7df9033eb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227daf7b2276616c7565223a22666c6f772d6e6f64652e746573743a33353639222c2274797065223a22537472696e67227db89c7b2276616c7565223a223133343833303762633737633638386538303034396465396430383161613039373535646133336536393937363035666130353964623231343466633835653536306362653666376461386437346234353366353931363631386362386664333932633264623835366633653738323231646336386462316231643931346534222c2274797065223a22537472696e67227db8dc7b2276616c7565223a22386465633336656438613931653365356437333762303634333464393461386135363163373838393439356436633730383163643565313233613432313234343135623933393163396239616131363563326637313939346266393630376362306561323632616431363266656337343134366431656263343832613333623964616432303364313661383362626664613839623366366531636431643866623265373034613136326432353961306163396632366263383633356437346636222c2274797065223a22537472696e67227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227db8aa7b2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634222c2274797065223a22537472696e67227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90dfbf90df7b90a73696d706f72742043727970746f0a696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f2052656769737465727320612064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e207265736f757263650a2f2f2f20666f722074686520737065636966696564206e6f646520696e666f726d6174696f6e20616e642074686520616d6f756e74206f6620746f6b656e7320746f20636f6d6d69740a0a7472616e73616374696f6e2869643a20537472696e672c0a202020202020202020202020726f6c653a2055496e74382c0a2020202020202020202020206e6574776f726b696e67416464726573733a20537472696e672c0a2020202020202020202020206e6574776f726b696e674b65793a20537472696e672c0a2020202020202020202020207374616b696e674b65793a20537472696e672c0a202020202020202020202020616d6f756e743a205546697836342c0a2020202020202020202020206d616368696e654163636f756e744b65793a20537472696e672c200a2020202020202020202020206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d3a2055496e74382c200a2020202020202020202020206d616368696e654163636f756e744b657948617368416c676f726974686d3a2055496e743829207b0a0a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a0a20202020202020206966206c6574206d616368696e654163636f756e74203d2073656c662e7374616b696e67436f6c6c656374696f6e5265662e72656769737465724e6f6465280a20202020202020202020202069643a2069642c0a202020202020202020202020726f6c653a20726f6c652c0a2020202020202020202020206e6574776f726b696e67416464726573733a206e6574776f726b696e67416464726573732c0a2020202020202020202020206e6574776f726b696e674b65793a206e6574776f726b696e674b65792c0a2020202020202020202020207374616b696e674b65793a207374616b696e674b65792c0a202020202020202020202020616d6f756e743a20616d6f756e742c0a20202020202020202020202070617965723a206163636f756e740a202020202020202029207b0a2020202020202020202020206c657420736967416c676f203d205369676e6174757265416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d290a202020202020202020202020202020203f3f2070616e6963282243616e6e6f74207265676973746572206e6f646520776974682070726f7669646564206d616368696e65206163636f756e74206b65793a204d7573742070726f766964652061207369676e617475726520616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f662074686520617661696c61626c65207369676e617475726520616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e636174286d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e7320617265206569746865722031202845434453415f50323536292c2032202845434453415f736563703235366b31292c206f7220332028424c535f424c5331325f333831292e2229290a0a2020202020202020202020206c65742068617368416c676f203d2048617368416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b657948617368416c676f726974686d290a202020202020202020202020202020203f3f2070616e6963282243616e6e6f74207265676973746572206e6f64652077697468207468652070726f7669646564206d616368696e65206163636f756e74206b65793a204d7573742070726f766964652061206861736820616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f66206f662074686520617661696c61626c65206861736820616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e636174286d616368696e654163636f756e744b657948617368416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e732061726520312028534841325f323536292c20322028534841325f333834292c20332028534841335f323536292c2022290a202020202020202020202020202020202e636f6e6361742822342028534841335f333834292c203520284b4d41433132385f424c535f424c5331325f333831292c206f72203620284b454343414b5f323536292e2229290a2020202020202020202020200a2020202020202020202020206c6574207075626c69634b6579203d205075626c69634b6579280a090909202020207075626c69634b65793a206d616368696e654163636f756e744b65792e6465636f646548657828292c0a090909202020207369676e6174757265416c676f726974686d3a20736967416c676f0a090920202020290a2020202020202020202020206d616368696e654163636f756e742e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2068617368416c676f2c207765696768743a20313030302e30290a20202020202020207d0a202020207d0a7df9033eb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227daf7b2276616c7565223a22666c6f772d6e6f64652e746573743a33353639222c2274797065223a22537472696e67227db89c7b2276616c7565223a223133343833303762633737633638386538303034396465396430383161613039373535646133336536393937363035666130353964623231343466633835653536306362653666376461386437346234353366353931363631386362386664333932633264623835366633653738323231646336386462316231643931346534222c2274797065223a22537472696e67227db8dc7b2276616c7565223a22386465633336656438613931653365356437333762303634333464393461386135363163373838393439356436633730383163643565313233613432313234343135623933393163396239616131363563326637313939346266393630376362306561323632616431363266656337343134366431656263343832613333623964616432303364313661383362626664613839623366366531636431643866623265373034613136326432353961306163396632366263383633356437346636222c2274797065223a22537472696e67227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227db8aa7b2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634222c2274797065223a22537472696e67227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "020ab9dcc3ae591733937b9e8b26e044796f34f11b7d74ef42e3b5d42ec6c35fc822e2423dd307906e5f880eda3701664c81291142c1a1f82c71f31608f5b4a5535265676973746572204e6f64650009044e6f64652049440000074e6f646520526f6c650001044e6574772e20416464726573730002044e6574772e204b65790003045374616b696e67204b6579000401416d6f756e7400055546697836340003044d41205075622e204b65790006064d41205369676e2e20416c672e0007054d41204861736820416c672e0008",
    "hash": "0ab9dcc3ae591733937b9e8b26e044796f34f11b7d74ef42e3b5d42ec6c35fc8"
  },
  {
    "title": "SCO.04 - Create Machine Account",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import Crypto\nimport FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Creates a machine account for a node that is already in the staking collection\n/// and adds public keys to the new account\n\ntransaction(nodeID: String, \n            machineAccountKey: String, \n            machineAccountKeySignatureAlgorithm: UInt8, \n            machineAccountKeyHashAlgorithm: UInt8) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        pre {\n\t\t\tmachineAccountKeySignatureAlgorithm == 1 || machineAccountKeySignatureAlgorithm == 2:\n                \"Cannot create machine account: Must provide a signature algorithm raw value that corresponds to \"\n                .concat(\"one of the available signature algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(machineAccountKeySignatureAlgorithm.toString())\n                .concat(\" but the options are either 1 (ECDSA_P256) or 2 (ECDSA_secp256k1).\")\n\t\t\tmachineAccountKeyHashAlgorithm == 1 || machineAccountKeyHashAlgorithm == 3:\n                \"Cannot create machine account: Must provide a hash algorithm raw value that corresponds to \"\n                .concat(\"one of of the available hash algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(machineAccountKeyHashAlgorithm.toString())\n                .concat(\" but the options are either 1 (SHA2_256) or 3 (SHA3_256).\")\n\t\t}\n\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n\n        if let machineAccount = self.stakingCollectionRef.createMachineAccountForExistingNode(nodeID: nodeID, payer: account) {\n            let sigAlgo = SignatureAlgorithm(rawValue: machineAccountKeySignatureAlgorithm)!\n\n            let hashAlgo = HashAlgorithm(rawValue: machineAccountKeyHashAlgorithm)!\n            \n            let publicKey = PublicKey(\n\t\t\t    publicKey: machineAccountKey.decodeHex(),\n\t\t\t    signatureAlgorithm: sigAlgo\n\t\t    )\n            machineAccount.keys.add(publicKey: publicKey, hashAlgorithm: hashAlgo, weight: 1000.0)\n        } else {\n            panic(\"Could not create a machine account for the node\")\n        }\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164",
          "type": "String"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import Crypto\nimport FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Creates a machine account for a node that is already in the staking collection\n/// and adds public keys to the new account\n\ntransaction(nodeID: String, \n            machineAccountKey: String, \n            machineAccountKeySignatureAlgorithm: UInt8, \n            machineAccountKeyHashAlgorithm: UInt8) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        pre {\n\t\t\tmachineAccountKeySignatureAlgorithm == 1 || machineAccountKeySignatureAlgorithm == 2:\n                \"Cannot create machine account: Must provide a signature algorithm raw value that corresponds to \"\n                .concat(\"one of the available signature algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(machineAccountKeySignatureAlgorithm.toString())\n                .concat(\" but the options are either 1 (ECDSA_P256) or 2 (ECDSA_secp256k1).\")\n\t\t\tmachineAccountKeyHashAlgorithm == 1 || machineAccountKeyHashAlgorithm == 3:\n                \"Cannot create machine account: Must provide a hash algorithm raw value that corresponds to \"\n                .concat(\"one of of the available hash algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(machineAccountKeyHashAlgorithm.toString())\n                .concat(\" but the options are either 1 (SHA2_256) or 3 (SHA3_256).\")\n\t\t}\n\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n\n        if let machineAccount = self.stakingCollectionRef.createMachineAccountForExistingNode(nodeID: nodeID, payer: account) {\n            let sigAlgo = SignatureAlgorithm(rawValue: machineAccountKeySignatureAlgorithm)!\n\n            let hashAlgo = HashAlgorithm(rawValue: machineAccountKeyHashAlgorithm)!\n            \n            let publicKey = PublicKey(\n\t\t\t    publicKey: machineAccountKey.decodeHex(),\n\t\t\t    signatureAlgorithm: sigAlgo\n\t\t    )\n            machineAccount.keys.add(publicKey: publicKey, hashAlgorithm: hashAlgo, weight: 1000.0)\n        } else {\n            panic(\"Could not create a machine account for the node\")\n        }\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164",
          "type": "String"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90b01b90977696d706f72742043727970746f0a696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20437265617465732061206d616368696e65206163636f756e7420666f722061206e6f6465207468617420697320616c726561647920696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f20616e642061646473207075626c6963206b65797320746f20746865206e6577206163636f756e740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c200a2020202020202020202020206d616368696e654163636f756e744b65793a20537472696e672c200a2020202020202020202020206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d3a2055496e74382c200a2020202020202020202020206d616368696e654163636f756e744b657948617368416c676f726974686d3a2055496e743829207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a2020202020202020707265207b0a0909096d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d203d3d2031207c7c206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d203d3d20323a0a202020202020202020202020202020202243616e6e6f7420637265617465206d616368696e65206163636f756e743a204d7573742070726f766964652061207369676e617475726520616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f662074686520617661696c61626c65207369676e617475726520616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e636174286d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e7320617265206569746865722031202845434453415f5032353629206f722032202845434453415f736563703235366b31292e22290a0909096d616368696e654163636f756e744b657948617368416c676f726974686d203d3d2031207c7c206d616368696e654163636f756e744b657948617368416c676f726974686d203d3d20333a0a202020202020202020202020202020202243616e6e6f7420637265617465206d616368696e65206163636f756e743a204d7573742070726f766964652061206861736820616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f66206f662074686520617661696c61626c65206861736820616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e636174286d616368696e654163636f756e744b657948617368416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e73206172652065697468657220312028534841325f32353629206f7220332028534841335f323536292e22290a09097d0a0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a0a20202020202020206966206c6574206d616368696e654163636f756e74203d2073656c662e7374616b696e67436f6c6c656374696f6e5265662e6372656174654d616368696e654163636f756e74466f724578697374696e674e6f6465286e6f646549443a206e6f646549442c2070617965723a206163636f756e7429207b0a2020202020202020202020206c657420736967416c676f203d205369676e6174757265416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d29210a0a2020202020202020202020206c65742068617368416c676f203d2048617368416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b657948617368416c676f726974686d29210a2020202020202020202020200a2020202020202020202020206c6574207075626c69634b6579203d205075626c69634b6579280a090909202020207075626c69634b65793a206d616368696e654163636f756e744b65792e6465636f646548657828292c0a090909202020207369676e6174757265416c676f726974686d3a20736967416c676f0a090920202020290a2020202020202020202020206d616368696e654163636f756e742e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2068617368416c676f2c207765696768743a20313030302e30290a20202020202020207d20656c7365207b0a20202020202020202020202070616e69632822436f756c64206e6f74206372656174652061206d616368696e65206163636f756e7420666f7220746865206e6f646522290a20202020202020207d0a202020207d0a7d0af90144b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db8aa7b2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634222c2274797065223a22537472696e67227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90b05f90b01b90977696d706f72742043727970746f0a696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20437265617465732061206d616368696e65206163636f756e7420666f722061206e6f6465207468617420697320616c726561647920696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f20616e642061646473207075626c6963206b65797320746f20746865206e6577206163636f756e740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c200a2020202020202020202020206d616368696e654163636f756e744b65793a20537472696e672c200a2020202020202020202020206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d3a2055496e74382c200a2020202020202020202020206d616368696e654163636f756e744b657948617368416c676f726974686d3a2055496e743829207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a2020202020202020707265207b0a0909096d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d203d3d2031207c7c206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d203d3d20323a0a202020202020202020202020202020202243616e6e6f7420637265617465206d616368696e65206163636f756e743a204d7573742070726f766964652061207369676e617475726520616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f662074686520617661696c61626c65207369676e617475726520616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e636174286d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e7320617265206569746865722031202845434453415f5032353629206f722032202845434453415f736563703235366b31292e22290a0909096d616368696e654163636f756e744b657948617368416c676f726974686d203d3d2031207c7c206d616368696e654163636f756e744b657948617368416c676f726974686d203d3d20333a0a202020202020202020202020202020202243616e6e6f7420637265617465206d616368696e65206163636f756e743a204d7573742070726f766964652061206861736820616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f66206f662074686520617661696c61626c65206861736820616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e636174286d616368696e654163636f756e744b657948617368416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e73206172652065697468657220312028534841325f32353629206f7220332028534841335f323536292e22290a09097d0a0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a0a20202020202020206966206c6574206d616368696e654163636f756e74203d2073656c662e7374616b696e67436f6c6c656374696f6e5265662e6372656174654d616368696e654163636f756e74466f724578697374696e674e6f6465286e6f646549443a206e6f646549442c2070617965723a206163636f756e7429207b0a2020202020202020202020206c657420736967416c676f203d205369676e6174757265416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d29210a0a2020202020202020202020206c65742068617368416c676f203d2048617368416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b657948617368416c676f726974686d29210a2020202020202020202020200a2020202020202020202020206c6574207075626c69634b6579203d205075626c69634b6579280a090909202020207075626c69634b65793a206d616368696e654163636f756e744b65792e6465636f646548657828292c0a090909202020207369676e6174757265416c676f726974686d3a20736967416c676f0a090920202020290a2020202020202020202020206d616368696e654163636f756e742e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2068617368416c676f2c207765696768743a20313030302e30290a20202020202020207d20656c7365207b0a20202020202020202020202070616e69632822436f756c64206e6f74206372656174652061206d616368696e65206163636f756e7420666f7220746865206e6f646522290a20202020202020207d0a202020207d0a7d0af90144b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db8aa7b2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634222c2274797065223a22537472696e67227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02c92d9e182330e25a876d34edfe23dccf9aa6deb914cf1812cee34234a1c99651477526abb6b1a83c4163b2bb1f77eb4a9979ec510b81b4e110df003e0b586a63437265617465204d616368696e65204163636f756e740004044e6f64652049440000044d41205075622e204b65790001064d41205369676e2e20416c672e0002054d41204861736820416c672e0003",
    "hash": "c92d9e182330e25a876d34edfe23dccf9aa6deb914cf1812cee34234a1c99651"
  },
  {
    "title": "SCO.05 - Request Unstaking - 1",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Requests unstaking for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.requestUnstaking(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Requests unstaking for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.requestUnstaking(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90411b9031c696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20526571756573747320756e7374616b696e6720666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e72657175657374556e7374616b696e67286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90415f90411b9031c696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20526571756573747320756e7374616b696e6720666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e72657175657374556e7374616b696e67286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02496fbcb63e434bd081f69ae11ddd7ec2ef1b9ac32abb443c26d4d09dfd2ca2ced65801ecd6852107d15a97d3b02db8226b86384e1be849fe50f1d02f7dbf5af65265717565737420556e7374616b696e670003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "496fbcb63e434bd081f69ae11ddd7ec2ef1b9ac32abb443c26d4d09dfd2ca2ce"
  },
  {
    "title": "SCO.05 - Request Unstaking - 2",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Requests unstaking for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.requestUnstaking(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Requests unstaking for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.requestUnstaking(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9042cb9031c696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20526571756573747320756e7374616b696e6720666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e72657175657374556e7374616b696e67286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90430f9042cb9031c696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20526571756573747320756e7374616b696e6720666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e72657175657374556e7374616b696e67286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02496fbcb63e434bd081f69ae11ddd7ec2ef1b9ac32abb443c26d4d09dfd2ca2ced65801ecd6852107d15a97d3b02db8226b86384e1be849fe50f1d02f7dbf5af65265717565737420556e7374616b696e670003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "496fbcb63e434bd081f69ae11ddd7ec2ef1b9ac32abb443c26d4d09dfd2ca2ce"
  },
  {
    "title": "SCO.06 - Stake New Tokens - 1",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Commits new tokens to stake for the specified node or delegator in the staking collection\n/// The tokens from the locked vault are used first, if it exists\n/// followed by the tokens from the unlocked vault\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeNewTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Commits new tokens to stake for the specified node or delegator in the staking collection\n/// The tokens from the locked vault are used first, if it exists\n/// followed by the tokens from the unlocked vault\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeNewTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9048db90398696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20436f6d6d697473206e657720746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e732066726f6d20746865206c6f636b6564207661756c742061726520757365642066697273742c206966206974206578697374730a2f2f2f20666f6c6c6f7765642062792074686520746f6b656e732066726f6d2074686520756e6c6f636b6564207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b654e6577546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90491f9048db90398696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20436f6d6d697473206e657720746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e732066726f6d20746865206c6f636b6564207661756c742061726520757365642066697273742c206966206974206578697374730a2f2f2f20666f6c6c6f7765642062792074686520746f6b656e732066726f6d2074686520756e6c6f636b6564207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b654e6577546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "028c03f3920896f68576d04b0f8980507441123c24a6600f706133915205968244adc143943ac8b73c9995c45d7f3130f7e81a6ddfe72bca681ef5df7fcf6063a35374616b65204e657720546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "8c03f3920896f68576d04b0f8980507441123c24a6600f706133915205968244"
  },
  {
    "title": "SCO.06 - Stake New Tokens - 2",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Commits new tokens to stake for the specified node or delegator in the staking collection\n/// The tokens from the locked vault are used first, if it exists\n/// followed by the tokens from the unlocked vault\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeNewTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Commits new tokens to stake for the specified node or delegator in the staking collection\n/// The tokens from the locked vault are used first, if it exists\n/// followed by the tokens from the unlocked vault\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeNewTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f904a8b90398696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20436f6d6d697473206e657720746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e732066726f6d20746865206c6f636b6564207661756c742061726520757365642066697273742c206966206974206578697374730a2f2f2f20666f6c6c6f7765642062792074686520746f6b656e732066726f6d2074686520756e6c6f636b6564207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b654e6577546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f904acf904a8b90398696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20436f6d6d697473206e657720746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e732066726f6d20746865206c6f636b6564207661756c742061726520757365642066697273742c206966206974206578697374730a2f2f2f20666f6c6c6f7765642062792074686520746f6b656e732066726f6d2074686520756e6c6f636b6564207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b654e6577546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "028c03f3920896f68576d04b0f8980507441123c24a6600f706133915205968244adc143943ac8b73c9995c45d7f3130f7e81a6ddfe72bca681ef5df7fcf6063a35374616b65204e657720546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "8c03f3920896f68576d04b0f8980507441123c24a6600f706133915205968244"
  },
  {
    "title": "SCO.07 - Stake Rewarded Tokens - 1",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Commits rewarded tokens to stake for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeRewardedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Commits rewarded tokens to stake for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeRewardedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90422b9032d696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20436f6d6d69747320726577617264656420746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b655265776172646564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90426f90422b9032d696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20436f6d6d69747320726577617264656420746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b655265776172646564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02aeb4a5c1d131da3f54e717357330dc7a08daec9238b90d35f2e78fc3f21f822de80bcf35c25a0296b2afd99a156734e1ef37e3b244a4400faa98811e6305caf65374616b6520526577617264656420546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "aeb4a5c1d131da3f54e717357330dc7a08daec9238b90d35f2e78fc3f21f822d"
  },
  {
    "title": "SCO.07 - Stake Rewarded Tokens - 2",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Commits rewarded tokens to stake for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeRewardedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Commits rewarded tokens to stake for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeRewardedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9043db9032d696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20436f6d6d69747320726577617264656420746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b655265776172646564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90441f9043db9032d696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20436f6d6d69747320726577617264656420746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b655265776172646564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02aeb4a5c1d131da3f54e717357330dc7a08daec9238b90d35f2e78fc3f21f822de80bcf35c25a0296b2afd99a156734e1ef37e3b244a4400faa98811e6305caf65374616b6520526577617264656420546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "aeb4a5c1d131da3f54e717357330dc7a08daec9238b90d35f2e78fc3f21f822d"
  },
  {
    "title": "SCO.08 - Stake Unstaked Tokens - 1",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Commits unstaked tokens to stake for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeUnstakedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Commits unstaked tokens to stake for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeUnstakedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90422b9032d696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20436f6d6d69747320756e7374616b656420746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b65556e7374616b6564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90426f90422b9032d696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20436f6d6d69747320756e7374616b656420746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b65556e7374616b6564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "028cea0b1817980400ddccb8d72e68f6984934f15172bb7a7f6f80f6c6e03bec56510ae0b5b3b89491b64a06054ce23989e1bd02fb3dac9bbca85f61a559f3364c5374616b6520556e7374616b656420546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "8cea0b1817980400ddccb8d72e68f6984934f15172bb7a7f6f80f6c6e03bec56"
  },
  {
    "title": "SCO.08 - Stake Unstaked Tokens - 2",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Commits unstaked tokens to stake for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeUnstakedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Commits unstaked tokens to stake for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeUnstakedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9043db9032d696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20436f6d6d69747320756e7374616b656420746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b65556e7374616b6564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90441f9043db9032d696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20436f6d6d69747320756e7374616b656420746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b65556e7374616b6564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "028cea0b1817980400ddccb8d72e68f6984934f15172bb7a7f6f80f6c6e03bec56510ae0b5b3b89491b64a06054ce23989e1bd02fb3dac9bbca85f61a559f3364c5374616b6520556e7374616b656420546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "8cea0b1817980400ddccb8d72e68f6984934f15172bb7a7f6f80f6c6e03bec56"
  },
  {
    "title": "SCO.09 - Unstake All",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Requests to unstake ALL tokens for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.unstakeAll(nodeID: nodeID)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Requests to unstake ALL tokens for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.unstakeAll(nodeID: nodeID)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90375b902d2696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20526571756573747320746f20756e7374616b6520414c4c20746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e6729207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e756e7374616b65416c6c286e6f646549443a206e6f64654944290a202020207d0a7d0af85eb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90379f90375b902d2696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f20526571756573747320746f20756e7374616b6520414c4c20746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e6729207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e756e7374616b65416c6c286e6f646549443a206e6f64654944290a202020207d0a7d0af85eb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "024e1af2295f9cac245e5c32b92265c635f80ed523d713038195dad7607e2785e30dbf1bee6213b0828c0ba2a51ba0a20660ed6c7ab6632f75aac1ed669ed64bf8556e7374616b6520416c6c0001044e6f64652049440000",
    "hash": "4e1af2295f9cac245e5c32b92265c635f80ed523d713038195dad7607e2785e3"
  },
  {
    "title": "SCO.10 - Withdraw Rewarded Tokens - 1",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Request to withdraw rewarded tokens for the specified node or delegator in the staking collection\n/// The tokens are automatically deposited to the unlocked account vault first,\n/// And then any locked tokens are deposited into the locked account vault\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawRewardedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Request to withdraw rewarded tokens for the specified node or delegator in the staking collection\n/// The tokens are automatically deposited to the unlocked account vault first,\n/// And then any locked tokens are deposited into the locked account vault\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawRewardedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f904deb903ce696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f205265717565737420746f20776974686472617720726577617264656420746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c742066697273742c0a2f2f2f20416e64207468656e20616e79206c6f636b656420746f6b656e7320617265206465706f736974656420696e746f20746865206c6f636b6564206163636f756e74207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e77697468647261775265776172646564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f904e2f904deb903ce696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f205265717565737420746f20776974686472617720726577617264656420746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c742066697273742c0a2f2f2f20416e64207468656e20616e79206c6f636b656420746f6b656e7320617265206465706f736974656420696e746f20746865206c6f636b6564206163636f756e74207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e77697468647261775265776172646564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02e35778812e8fcefc9ea0abf60a7466777466d071c860746768e83eff47b5b0ea6239034e2884a0e32047bab081f4f2c9bdb4dba2ced6120a2d2c2f6489757868576974686472617720526577617264656420546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "e35778812e8fcefc9ea0abf60a7466777466d071c860746768e83eff47b5b0ea"
  },
  {
    "title": "SCO.10 - Withdraw Rewarded Tokens - 2",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Request to withdraw rewarded tokens for the specified node or delegator in the staking collection\n/// The tokens are automatically deposited to the unlocked account vault first,\n/// And then any locked tokens are deposited into the locked account vault\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawRewardedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Request to withdraw rewarded tokens for the specified node or delegator in the staking collection\n/// The tokens are automatically deposited to the unlocked account vault first,\n/// And then any locked tokens are deposited into the locked account vault\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawRewardedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f904c3b903ce696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f205265717565737420746f20776974686472617720726577617264656420746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c742066697273742c0a2f2f2f20416e64207468656e20616e79206c6f636b656420746f6b656e7320617265206465706f736974656420696e746f20746865206c6f636b6564206163636f756e74207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e77697468647261775265776172646564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f904c7f904c3b903ce696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f205265717565737420746f20776974686472617720726577617264656420746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c742066697273742c0a2f2f2f20416e64207468656e20616e79206c6f636b656420746f6b656e7320617265206465706f736974656420696e746f20746865206c6f636b6564206163636f756e74207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e77697468647261775265776172646564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02e35778812e8fcefc9ea0abf60a7466777466d071c860746768e83eff47b5b0ea6239034e2884a0e32047bab081f4f2c9bdb4dba2ced6120a2d2c2f6489757868576974686472617720526577617264656420546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "e35778812e8fcefc9ea0abf60a7466777466d071c860746768e83eff47b5b0ea"
  },
  {
    "title": "SCO.11 - Withdraw Unstaked Tokens - 1",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Request to withdraw unstaked tokens for the specified node or delegator in the staking collection\n/// The tokens are automatically deposited to the unlocked account vault first,\n/// And then any locked tokens are deposited into the locked account vault if it is there\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawUnstakedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Request to withdraw unstaked tokens for the specified node or delegator in the staking collection\n/// The tokens are automatically deposited to the unlocked account vault first,\n/// And then any locked tokens are deposited into the locked account vault if it is there\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawUnstakedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f904d2b903dd696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f205265717565737420746f20776974686472617720756e7374616b656420746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c742066697273742c0a2f2f2f20416e64207468656e20616e79206c6f636b656420746f6b656e7320617265206465706f736974656420696e746f20746865206c6f636b6564206163636f756e74207661756c742069662069742069732074686572650a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7769746864726177556e7374616b6564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f904d6f904d2b903dd696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f205265717565737420746f20776974686472617720756e7374616b656420746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c742066697273742c0a2f2f2f20416e64207468656e20616e79206c6f636b656420746f6b656e7320617265206465706f736974656420696e746f20746865206c6f636b6564206163636f756e74207661756c742069662069742069732074686572650a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7769746864726177556e7374616b6564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02c511b86ca0d68fc751ad1ff0c8609eb7bf8a96e72f35ddd943d5ca27fb1e8f62df691ad256dd053350e48313ca5b02dda34376376bb4303d997dc8679996fe3b576974686472617720556e7374616b656420546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "c511b86ca0d68fc751ad1ff0c8609eb7bf8a96e72f35ddd943d5ca27fb1e8f62"
  },
  {
    "title": "SCO.11 - Withdraw Unstaked Tokens - 2",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Request to withdraw unstaked tokens for the specified node or delegator in the staking collection\n/// The tokens are automatically deposited to the unlocked account vault first,\n/// And then any locked tokens are deposited into the locked account vault if it is there\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawUnstakedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Request to withdraw unstaked tokens for the specified node or delegator in the staking collection\n/// The tokens are automatically deposited to the unlocked account vault first,\n/// And then any locked tokens are deposited into the locked account vault if it is there\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawUnstakedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f904edb903dd696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f205265717565737420746f20776974686472617720756e7374616b656420746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c742066697273742c0a2f2f2f20416e64207468656e20616e79206c6f636b656420746f6b656e7320617265206465706f736974656420696e746f20746865206c6f636b6564206163636f756e74207661756c742069662069742069732074686572650a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7769746864726177556e7374616b6564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f904f1f904edb903dd696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f205265717565737420746f20776974686472617720756e7374616b656420746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c742066697273742c0a2f2f2f20416e64207468656e20616e79206c6f636b656420746f6b656e7320617265206465706f736974656420696e746f20746865206c6f636b6564206163636f756e74207661756c742069662069742069732074686572650a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7769746864726177556e7374616b6564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02c511b86ca0d68fc751ad1ff0c8609eb7bf8a96e72f35ddd943d5ca27fb1e8f62df691ad256dd053350e48313ca5b02dda34376376bb4303d997dc8679996fe3b576974686472617720556e7374616b656420546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "c511b86ca0d68fc751ad1ff0c8609eb7bf8a96e72f35ddd943d5ca27fb1e8f62"
  },
  {
    "title": "SCO.12 - Close Stake - 1",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n// Closes out a staking object in the staking collection\n// This does not remove the record from the identity table,\n// but it does mean that the account that closes it cannot ever access it again\n\ntransaction(nodeID: String, delegatorID: UInt32?) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.closeStake(nodeID: nodeID, delegatorID: delegatorID)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n// Closes out a staking object in the staking collection\n// This does not remove the record from the identity table,\n// but it does mean that the account that closes it cannot ever access it again\n\ntransaction(nodeID: String, delegatorID: UInt32?) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.closeStake(nodeID: nodeID, delegatorID: delegatorID)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90445b90366696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f20436c6f736573206f75742061207374616b696e67206f626a65637420696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f205468697320646f6573206e6f742072656d6f766520746865207265636f72642066726f6d20746865206964656e74697479207461626c652c0a2f2f2062757420697420646f6573206d65616e207468617420746865206163636f756e74207468617420636c6f7365732069742063616e6e6f7420657665722061636365737320697420616761696e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f29207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e636c6f73655374616b65286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f724944290a202020207d0a7d0af89ab85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90449f90445b90366696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f20436c6f736573206f75742061207374616b696e67206f626a65637420696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f205468697320646f6573206e6f742072656d6f766520746865207265636f72642066726f6d20746865206964656e74697479207461626c652c0a2f2f2062757420697420646f6573206d65616e207468617420746865206163636f756e74207468617420636c6f7365732069742063616e6e6f7420657665722061636365737320697420616761696e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f29207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e636c6f73655374616b65286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f724944290a202020207d0a7d0af89ab85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02399b0c6a827d6747b1b50be9ead82ddc2669f38fd8ac57325bfa413a474646e20c5f7a439634e49bb748df52d81074bb4ec44a940ce57ebf635522d82e1bb839436c6f7365205374616b650002044e6f646520494400000244656c656761746f72204944000155496e7433320003",
    "hash": "399b0c6a827d6747b1b50be9ead82ddc2669f38fd8ac57325bfa413a474646e2"
  },
  {
    "title": "SCO.12 - Close Stake - 2",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n// Closes out a staking object in the staking collection\n// This does not remove the record from the identity table,\n// but it does mean that the account that closes it cannot ever access it again\n\ntransaction(nodeID: String, delegatorID: UInt32?) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.closeStake(nodeID: nodeID, delegatorID: delegatorID)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n// Closes out a staking object in the staking collection\n// This does not remove the record from the identity table,\n// but it does mean that the account that closes it cannot ever access it again\n\ntransaction(nodeID: String, delegatorID: UInt32?) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.closeStake(nodeID: nodeID, delegatorID: delegatorID)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9042ab90366696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f20436c6f736573206f75742061207374616b696e67206f626a65637420696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f205468697320646f6573206e6f742072656d6f766520746865207265636f72642066726f6d20746865206964656e74697479207461626c652c0a2f2f2062757420697420646f6573206d65616e207468617420746865206163636f756e74207468617420636c6f7365732069742063616e6e6f7420657665722061636365737320697420616761696e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f29207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e636c6f73655374616b65286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f724944290a202020207d0a7d0af87fb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f9042ef9042ab90366696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f20436c6f736573206f75742061207374616b696e67206f626a65637420696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f205468697320646f6573206e6f742072656d6f766520746865207265636f72642066726f6d20746865206964656e74697479207461626c652c0a2f2f2062757420697420646f6573206d65616e207468617420746865206163636f756e74207468617420636c6f7365732069742063616e6e6f7420657665722061636365737320697420616761696e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f29207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e636c6f73655374616b65286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f724944290a202020207d0a7d0af87fb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02399b0c6a827d6747b1b50be9ead82ddc2669f38fd8ac57325bfa413a474646e20c5f7a439634e49bb748df52d81074bb4ec44a940ce57ebf635522d82e1bb839436c6f7365205374616b650002044e6f646520494400000244656c656761746f72204944000155496e7433320003",
    "hash": "399b0c6a827d6747b1b50be9ead82ddc2669f38fd8ac57325bfa413a474646e2"
  },
  {
    "title": "SCO.13 - Transfer Node",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n// Transfers a NodeStaker object from an authorizers account\n// and adds the NodeStaker to another accounts Staking Collection\n// identified by the to Address.\n\ntransaction(nodeID: String, to: Address) {\n    let fromStakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n    let toStakingCollectionCap: &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        // The account to transfer the NodeStaker object to must have a valid Staking Collection in order to receive the NodeStaker.\n        if (!FlowStakingCollection.doesAccountHaveStakingCollection(address: to)) {\n            panic(FlowStakingCollection.getCollectionMissingError(to))\n        }\n\n        // Get a reference to the authorizers StakingCollection\n        self.fromStakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n\n        // Get the PublicAccount of the account to transfer the NodeStaker to. \n        let toAccount = getAccount(to)\n\n        // Borrow a capability to the public methods available on the receivers StakingCollection.\n        self.toStakingCollectionCap = toAccount.capabilities\n            .borrow<&FlowStakingCollection.StakingCollection>(FlowStakingCollection.StakingCollectionPublicPath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(to))\n\n        let machineAccountInfo = self.fromStakingCollectionRef.getMachineAccounts()[nodeID]\n            ?? panic(\"Could not get machine account info from the signer's account for the node ID \"\n                    .concat(nodeID).concat(\". Make sure that the node has configured a machine account \")\n                    .concat(\"and has it registered in the staking collection.\"))\n\n        // Remove the NodeStaker from the authorizers StakingCollection.\n        let nodeStaker <- self.fromStakingCollectionRef.removeNode(nodeID: nodeID)\n\n        // Deposit the NodeStaker to the receivers StakingCollection.\n        self.toStakingCollectionCap.addNodeObject(<- nodeStaker!, machineAccountInfo: machineAccountInfo)\n    }\n}",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "0x8c5303eaa26202d6",
          "type": "Address"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n// Transfers a NodeStaker object from an authorizers account\n// and adds the NodeStaker to another accounts Staking Collection\n// identified by the to Address.\n\ntransaction(nodeID: String, to: Address) {\n    let fromStakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n    let toStakingCollectionCap: &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        // The account to transfer the NodeStaker object to must have a valid Staking Collection in order to receive the NodeStaker.\n        if (!FlowStakingCollection.doesAccountHaveStakingCollection(address: to)) {\n            panic(FlowStakingCollection.getCollectionMissingError(to))\n        }\n\n        // Get a reference to the authorizers StakingCollection\n        self.fromStakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n\n        // Get the PublicAccount of the account to transfer the NodeStaker to. \n        let toAccount = getAccount(to)\n\n        // Borrow a capability to the public methods available on the receivers StakingCollection.\n        self.toStakingCollectionCap = toAccount.capabilities\n            .borrow<&FlowStakingCollection.StakingCollection>(FlowStakingCollection.StakingCollectionPublicPath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(to))\n\n        let machineAccountInfo = self.fromStakingCollectionRef.getMachineAccounts()[nodeID]\n            ?? panic(\"Could not get machine account info from the signer's account for the node ID \"\n                    .concat(nodeID).concat(\". Make sure that the node has configured a machine account \")\n                    .concat(\"and has it registered in the staking collection.\"))\n\n        // Remove the NodeStaker from the authorizers StakingCollection.\n        let nodeStaker <- self.fromStakingCollectionRef.removeNode(nodeID: nodeID)\n\n        // Deposit the NodeStaker to the receivers StakingCollection.\n        self.toStakingCollectionCap.addNodeObject(<- nodeStaker!, machineAccountInfo: machineAccountInfo)\n    }\n}",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "0x8c5303eaa26202d6",
          "type": "Address"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f909f4b90921696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f205472616e73666572732061204e6f64655374616b6572206f626a6563742066726f6d20616e20617574686f72697a657273206163636f756e740a2f2f20616e64206164647320746865204e6f64655374616b657220746f20616e6f74686572206163636f756e7473205374616b696e6720436f6c6c656374696f6e0a2f2f206964656e7469666965642062792074686520746f20416464726573732e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c20746f3a204164647265737329207b0a202020206c65742066726f6d5374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a202020206c657420746f5374616b696e67436f6c6c656374696f6e4361703a2026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a20202020202020202f2f20546865206163636f756e7420746f207472616e7366657220746865204e6f64655374616b6572206f626a65637420746f206d757374206861766520612076616c6964205374616b696e6720436f6c6c656374696f6e20696e206f7264657220746f207265636569766520746865204e6f64655374616b65722e0a20202020202020206966202821466c6f775374616b696e67436f6c6c656374696f6e2e646f65734163636f756e74486176655374616b696e67436f6c6c656374696f6e28616464726573733a20746f2929207b0a20202020202020202020202070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f7228746f29290a20202020202020207d0a0a20202020202020202f2f204765742061207265666572656e636520746f2074686520617574686f72697a657273205374616b696e67436f6c6c656374696f6e0a202020202020202073656c662e66726f6d5374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a0a20202020202020202f2f2047657420746865205075626c69634163636f756e74206f6620746865206163636f756e7420746f207472616e7366657220746865204e6f64655374616b657220746f2e200a20202020202020206c657420746f4163636f756e74203d206765744163636f756e7428746f290a0a20202020202020202f2f20426f72726f772061206361706162696c69747920746f20746865207075626c6963206d6574686f647320617661696c61626c65206f6e2074686520726563656976657273205374616b696e67436f6c6c656374696f6e2e0a202020202020202073656c662e746f5374616b696e67436f6c6c656374696f6e436170203d20746f4163636f756e742e6361706162696c69746965730a2020202020202020202020202e626f72726f773c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e28466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e5075626c696350617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f7228746f29290a0a20202020202020206c6574206d616368696e654163636f756e74496e666f203d2073656c662e66726f6d5374616b696e67436f6c6c656374696f6e5265662e6765744d616368696e654163636f756e747328295b6e6f646549445d0a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420676574206d616368696e65206163636f756e7420696e666f2066726f6d20746865207369676e65722773206163636f756e7420666f7220746865206e6f646520494420220a20202020202020202020202020202020202020202e636f6e636174286e6f64654944292e636f6e63617428222e204d616b652073757265207468617420746865206e6f64652068617320636f6e666967757265642061206d616368696e65206163636f756e742022290a20202020202020202020202020202020202020202e636f6e6361742822616e6420686173206974207265676973746572656420696e20746865207374616b696e6720636f6c6c656374696f6e2e2229290a0a20202020202020202f2f2052656d6f766520746865204e6f64655374616b65722066726f6d2074686520617574686f72697a657273205374616b696e67436f6c6c656374696f6e2e0a20202020202020206c6574206e6f64655374616b6572203c2d2073656c662e66726f6d5374616b696e67436f6c6c656374696f6e5265662e72656d6f76654e6f6465286e6f646549443a206e6f64654944290a0a20202020202020202f2f204465706f73697420746865204e6f64655374616b657220746f2074686520726563656976657273205374616b696e67436f6c6c656374696f6e2e0a202020202020202073656c662e746f5374616b696e67436f6c6c656374696f6e4361702e6164644e6f64654f626a656374283c2d206e6f64655374616b6572212c206d616368696e654163636f756e74496e666f3a206d616368696e654163636f756e74496e666f290a202020207d0a7df88eb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227daf7b2276616c7565223a22307838633533303365616132363230326436222c2274797065223a2241646472657373227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f909f8f909f4b90921696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f205472616e73666572732061204e6f64655374616b6572206f626a6563742066726f6d20616e20617574686f72697a657273206163636f756e740a2f2f20616e64206164647320746865204e6f64655374616b657220746f20616e6f74686572206163636f756e7473205374616b696e6720436f6c6c656374696f6e0a2f2f206964656e7469666965642062792074686520746f20416464726573732e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c20746f3a204164647265737329207b0a202020206c65742066726f6d5374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a202020206c657420746f5374616b696e67436f6c6c656374696f6e4361703a2026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a20202020202020202f2f20546865206163636f756e7420746f207472616e7366657220746865204e6f64655374616b6572206f626a65637420746f206d757374206861766520612076616c6964205374616b696e6720436f6c6c656374696f6e20696e206f7264657220746f207265636569766520746865204e6f64655374616b65722e0a20202020202020206966202821466c6f775374616b696e67436f6c6c656374696f6e2e646f65734163636f756e74486176655374616b696e67436f6c6c656374696f6e28616464726573733a20746f2929207b0a20202020202020202020202070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f7228746f29290a20202020202020207d0a0a20202020202020202f2f204765742061207265666572656e636520746f2074686520617574686f72697a657273205374616b696e67436f6c6c656374696f6e0a202020202020202073656c662e66726f6d5374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a0a20202020202020202f2f2047657420746865205075626c69634163636f756e74206f6620746865206163636f756e7420746f207472616e7366657220746865204e6f64655374616b657220746f2e200a20202020202020206c657420746f4163636f756e74203d206765744163636f756e7428746f290a0a20202020202020202f2f20426f72726f772061206361706162696c69747920746f20746865207075626c6963206d6574686f647320617661696c61626c65206f6e2074686520726563656976657273205374616b696e67436f6c6c656374696f6e2e0a202020202020202073656c662e746f5374616b696e67436f6c6c656374696f6e436170203d20746f4163636f756e742e6361706162696c69746965730a2020202020202020202020202e626f72726f773c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e28466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e5075626c696350617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f7228746f29290a0a20202020202020206c6574206d616368696e654163636f756e74496e666f203d2073656c662e66726f6d5374616b696e67436f6c6c656374696f6e5265662e6765744d616368696e654163636f756e747328295b6e6f646549445d0a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420676574206d616368696e65206163636f756e7420696e666f2066726f6d20746865207369676e65722773206163636f756e7420666f7220746865206e6f646520494420220a20202020202020202020202020202020202020202e636f6e636174286e6f64654944292e636f6e63617428222e204d616b652073757265207468617420746865206e6f64652068617320636f6e666967757265642061206d616368696e65206163636f756e742022290a20202020202020202020202020202020202020202e636f6e6361742822616e6420686173206974207265676973746572656420696e20746865207374616b696e6720636f6c6c656374696f6e2e2229290a0a20202020202020202f2f2052656d6f766520746865204e6f64655374616b65722066726f6d2074686520617574686f72697a657273205374616b696e67436f6c6c656374696f6e2e0a20202020202020206c6574206e6f64655374616b6572203c2d2073656c662e66726f6d5374616b696e67436f6c6c656374696f6e5265662e72656d6f76654e6f6465286e6f646549443a206e6f64654944290a0a20202020202020202f2f204465706f73697420746865204e6f64655374616b657220746f2074686520726563656976657273205374616b696e67436f6c6c656374696f6e2e0a202020202020202073656c662e746f5374616b696e67436f6c6c656374696f6e4361702e6164644e6f64654f626a656374283c2d206e6f64655374616b6572212c206d616368696e654163636f756e74496e666f3a206d616368696e654163636f756e74496e666f290a202020207d0a7df88eb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227daf7b2276616c7565223a22307838633533303365616132363230326436222c2274797065223a2241646472657373227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "020ea71f995f97eeba13e79f4bac01c77295d654b45b9fd75b15ca16d285b659c5732bc7a1fc6359cf51b9c884ab49f22aa9cef11044332519700ed14a59cbc02c5472616e73666572204e6f64650002044e6f6465204944000001416464726573730001416464726573730003",
    "hash": "0ea71f995f97eeba13e79f4bac01c77295d654b45b9fd75b15ca16d285b659c5"
  },
  {
    "title": "SCO.14 - Transfer Delegator",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n// Transfers a NodeDelegator object from an authorizers account\n// and adds the NodeDelegator to another accounts Staking Collection\n// identified by the to Address.\n\ntransaction(nodeID: String, delegatorID: UInt32, to: Address) {\n    let fromStakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n    let toStakingCollectionCap: &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        // The account to transfer the NodeDelegator object to must have a valid Staking Collection in order to receive the NodeDelegator.\n        if (!FlowStakingCollection.doesAccountHaveStakingCollection(address: to)) {\n            panic(FlowStakingCollection.getCollectionMissingError(to))\n        }\n\n        // Get a reference to the authorizers StakingCollection\n        self.fromStakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n\n        // Get the PublicAccount of the account to transfer the NodeDelegator to. \n        let toAccount = getAccount(to)\n\n        // Borrow a capability to the public methods available on the receivers StakingCollection.\n        self.toStakingCollectionCap = toAccount.capabilities\n            .borrow<&FlowStakingCollection.StakingCollection>(FlowStakingCollection.StakingCollectionPublicPath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(to))\n    }\n\n    execute {\n        // Remove the NodeDelegator from the authorizers StakingCollection.\n        let nodeDelegator <- self.fromStakingCollectionRef.removeDelegator(nodeID: nodeID, delegatorID: delegatorID)\n\n        // Deposit the NodeDelegator to the receivers StakingCollection.\n        self.toStakingCollectionCap.addDelegatorObject(<- nodeDelegator!)\n    }\n}",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "42",
          "type": "UInt32"
        },
        {
          "value": "0x8c5303eaa26202d6",
          "type": "Address"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n// Transfers a NodeDelegator object from an authorizers account\n// and adds the NodeDelegator to another accounts Staking Collection\n// identified by the to Address.\n\ntransaction(nodeID: String, delegatorID: UInt32, to: Address) {\n    let fromStakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n    let toStakingCollectionCap: &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        // The account to transfer the NodeDelegator object to must have a valid Staking Collection in order to receive the NodeDelegator.\n        if (!FlowStakingCollection.doesAccountHaveStakingCollection(address: to)) {\n            panic(FlowStakingCollection.getCollectionMissingError(to))\n        }\n\n        // Get a reference to the authorizers StakingCollection\n        self.fromStakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n\n        // Get the PublicAccount of the account to transfer the NodeDelegator to. \n        let toAccount = getAccount(to)\n\n        // Borrow a capability to the public methods available on the receivers StakingCollection.\n        self.toStakingCollectionCap = toAccount.capabilities\n            .borrow<&FlowStakingCollection.StakingCollection>(FlowStakingCollection.StakingCollectionPublicPath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(to))\n    }\n\n    execute {\n        // Remove the NodeDelegator from the authorizers StakingCollection.\n        let nodeDelegator <- self.fromStakingCollectionRef.removeDelegator(nodeID: nodeID, delegatorID: delegatorID)\n\n        // Deposit the NodeDelegator to the receivers StakingCollection.\n        self.toStakingCollectionCap.addDelegatorObject(<- nodeDelegator!)\n    }\n}",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "42",
          "type": "UInt32"
        },
        {
          "value": "0x8c5303eaa26202d6",
          "type": "Address"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f908d6b907e4696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f205472616e73666572732061204e6f646544656c656761746f72206f626a6563742066726f6d20616e20617574686f72697a657273206163636f756e740a2f2f20616e64206164647320746865204e6f646544656c656761746f7220746f20616e6f74686572206163636f756e7473205374616b696e6720436f6c6c656374696f6e0a2f2f206964656e7469666965642062792074686520746f20416464726573732e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433322c20746f3a204164647265737329207b0a202020206c65742066726f6d5374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a202020206c657420746f5374616b696e67436f6c6c656374696f6e4361703a2026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a20202020202020202f2f20546865206163636f756e7420746f207472616e7366657220746865204e6f646544656c656761746f72206f626a65637420746f206d757374206861766520612076616c6964205374616b696e6720436f6c6c656374696f6e20696e206f7264657220746f207265636569766520746865204e6f646544656c656761746f722e0a20202020202020206966202821466c6f775374616b696e67436f6c6c656374696f6e2e646f65734163636f756e74486176655374616b696e67436f6c6c656374696f6e28616464726573733a20746f2929207b0a20202020202020202020202070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f7228746f29290a20202020202020207d0a0a20202020202020202f2f204765742061207265666572656e636520746f2074686520617574686f72697a657273205374616b696e67436f6c6c656374696f6e0a202020202020202073656c662e66726f6d5374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a0a20202020202020202f2f2047657420746865205075626c69634163636f756e74206f6620746865206163636f756e7420746f207472616e7366657220746865204e6f646544656c656761746f7220746f2e200a20202020202020206c657420746f4163636f756e74203d206765744163636f756e7428746f290a0a20202020202020202f2f20426f72726f772061206361706162696c69747920746f20746865207075626c6963206d6574686f647320617661696c61626c65206f6e2074686520726563656976657273205374616b696e67436f6c6c656374696f6e2e0a202020202020202073656c662e746f5374616b696e67436f6c6c656374696f6e436170203d20746f4163636f756e742e6361706162696c69746965730a2020202020202020202020202e626f72726f773c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e28466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e5075626c696350617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f7228746f29290a202020207d0a0a2020202065786563757465207b0a20202020202020202f2f2052656d6f766520746865204e6f646544656c656761746f722066726f6d2074686520617574686f72697a657273205374616b696e67436f6c6c656374696f6e2e0a20202020202020206c6574206e6f646544656c656761746f72203c2d2073656c662e66726f6d5374616b696e67436f6c6c656374696f6e5265662e72656d6f766544656c656761746f72286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f724944290a0a20202020202020202f2f204465706f73697420746865204e6f646544656c656761746f7220746f2074686520726563656976657273205374616b696e67436f6c6c656374696f6e2e0a202020202020202073656c662e746f5374616b696e67436f6c6c656374696f6e4361702e61646444656c656761746f724f626a656374283c2d206e6f646544656c656761746f7221290a202020207d0a7df8adb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227d9e7b2276616c7565223a223432222c2274797065223a2255496e743332227daf7b2276616c7565223a22307838633533303365616132363230326436222c2274797065223a2241646472657373227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f908daf908d6b907e4696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f205472616e73666572732061204e6f646544656c656761746f72206f626a6563742066726f6d20616e20617574686f72697a657273206163636f756e740a2f2f20616e64206164647320746865204e6f646544656c656761746f7220746f20616e6f74686572206163636f756e7473205374616b696e6720436f6c6c656374696f6e0a2f2f206964656e7469666965642062792074686520746f20416464726573732e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433322c20746f3a204164647265737329207b0a202020206c65742066726f6d5374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a202020206c657420746f5374616b696e67436f6c6c656374696f6e4361703a2026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a20202020202020202f2f20546865206163636f756e7420746f207472616e7366657220746865204e6f646544656c656761746f72206f626a65637420746f206d757374206861766520612076616c6964205374616b696e6720436f6c6c656374696f6e20696e206f7264657220746f207265636569766520746865204e6f646544656c656761746f722e0a20202020202020206966202821466c6f775374616b696e67436f6c6c656374696f6e2e646f65734163636f756e74486176655374616b696e67436f6c6c656374696f6e28616464726573733a20746f2929207b0a20202020202020202020202070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f7228746f29290a20202020202020207d0a0a20202020202020202f2f204765742061207265666572656e636520746f2074686520617574686f72697a657273205374616b696e67436f6c6c656374696f6e0a202020202020202073656c662e66726f6d5374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a0a20202020202020202f2f2047657420746865205075626c69634163636f756e74206f6620746865206163636f756e7420746f207472616e7366657220746865204e6f646544656c656761746f7220746f2e200a20202020202020206c657420746f4163636f756e74203d206765744163636f756e7428746f290a0a20202020202020202f2f20426f72726f772061206361706162696c69747920746f20746865207075626c6963206d6574686f647320617661696c61626c65206f6e2074686520726563656976657273205374616b696e67436f6c6c656374696f6e2e0a202020202020202073656c662e746f5374616b696e67436f6c6c656374696f6e436170203d20746f4163636f756e742e6361706162696c69746965730a2020202020202020202020202e626f72726f773c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e28466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e5075626c696350617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f7228746f29290a202020207d0a0a2020202065786563757465207b0a20202020202020202f2f2052656d6f766520746865204e6f646544656c656761746f722066726f6d2074686520617574686f72697a657273205374616b696e67436f6c6c656374696f6e2e0a20202020202020206c6574206e6f646544656c656761746f72203c2d2073656c662e66726f6d5374616b696e67436f6c6c656374696f6e5265662e72656d6f766544656c656761746f72286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f724944290a0a20202020202020202f2f204465706f73697420746865204e6f646544656c656761746f7220746f2074686520726563656976657273205374616b696e67436f6c6c656374696f6e2e0a202020202020202073656c662e746f5374616b696e67436f6c6c656374696f6e4361702e61646444656c656761746f724f626a656374283c2d206e6f646544656c656761746f7221290a202020207d0a7df8adb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227d9e7b2276616c7565223a223432222c2274797065223a2255496e743332227daf7b2276616c7565223a22307838633533303365616132363230326436222c2274797065223a2241646472657373227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02b10a5bb90dea36715fdbd5b59084b48cf5f9da9b9dba430ff10ea26626f9f4166a9ff4739ad11f57409823e907d8fdc23bea2ab99bb5925fafcdfeec62457fc35472616e736665722044656c656761746f720003044e6f646520494400000144656c656761746f72204944000155496e743332000301416464726573730002416464726573730003",
    "hash": "b10a5bb90dea36715fdbd5b59084b48cf5f9da9b9dba430ff10ea26626f9f416"
  },
  {
    "title": "SCO.15 - Withdraw From Machine Account",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Request to withdraw tokens from the machine account\n/// The tokens are automatically deposited to the unlocked account vault\n\ntransaction(nodeID: String, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawFromMachineAccount(nodeID: nodeID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Request to withdraw tokens from the machine account\n/// The tokens are automatically deposited to the unlocked account vault\n\ntransaction(nodeID: String, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawFromMachineAccount(nodeID: nodeID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f903f6b90322696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f205265717565737420746f20776974686472617720746f6b656e732066726f6d20746865206d616368696e65206163636f756e740a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e776974686472617746726f6d4d616368696e654163636f756e74286e6f646549443a206e6f646549442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af88fb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f903faf903f6b90322696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f205265717565737420746f20776974686472617720746f6b656e732066726f6d20746865206d616368696e65206163636f756e740a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e776974686472617746726f6d4d616368696e654163636f756e74286e6f646549443a206e6f646549442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af88fb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "0200fd0c796d7ad5d17350861c02e9ae689e8b38aed68c3df29171a5d7dea0bc10dcd4dd5d4466c1e2656f29585b48a32c9545247a2cb8a8653613272c7cc58f6c57697468647261772046726f6d204d616368696e65204163636f756e740002044e6f6465204944000001416d6f756e7400015546697836340003",
    "hash": "00fd0c796d7ad5d17350861c02e9ae689e8b38aed68c3df29171a5d7dea0bc10"
  },
  {
    "title": "SCO.16 - Update Networking Address",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Changes the networking address for the specified node\n\ntransaction(nodeID: String, newAddress: String) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.updateNetworkingAddress(nodeID: nodeID, newAddress: newAddress)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "flow-node.test:3569",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Changes the networking address for the specified node\n\ntransaction(nodeID: String, newAddress: String) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.updateNetworkingAddress(nodeID: nodeID, newAddress: newAddress)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "flow-node.test:3569",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f903b7b902e4696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f204368616e67657320746865206e6574776f726b696e67206164647265737320666f722074686520737065636966696564206e6f64650a0a7472616e73616374696f6e286e6f646549443a20537472696e672c206e6577416464726573733a20537472696e6729207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7570646174654e6574776f726b696e6741646472657373286e6f646549443a206e6f646549442c206e6577416464726573733a206e657741646472657373290a202020207d0a7d0af88eb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227daf7b2276616c7565223a22666c6f772d6e6f64652e746573743a33353639222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f903bbf903b7b902e4696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f204368616e67657320746865206e6574776f726b696e67206164647265737320666f722074686520737065636966696564206e6f64650a0a7472616e73616374696f6e286e6f646549443a20537472696e672c206e6577416464726573733a20537472696e6729207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7570646174654e6574776f726b696e6741646472657373286e6f646549443a206e6f646549442c206e6577416464726573733a206e657741646472657373290a202020207d0a7d0af88eb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227daf7b2276616c7565223a22666c6f772d6e6f64652e746573743a33353639222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "02cc163008980bb5651dad75697beb263505c24f027bdd375ab7e9105da710fca5bffd96e1dfbdd84526b77e3056a0f54999c593b4db10f864d6b1461edac265ed557064617465204e6574776f726b696e6720416464726573730002044e6f6465204944000004416464726573730001",
    "hash": "cc163008980bb5651dad75697beb263505c24f027bdd375ab7e9105da710fca5"
  },
  {
    "title": "SCO.17 - Register Node with PoP",
    "valid": true,
    "chainID": "Testnet",
    "payloadMessage": {
      "script": "import Crypto\nimport FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Registers a delegator in the staking collection resource\n/// for the specified node information and the amount of tokens to commit\n\ntransaction(id: String,\n            role: UInt8,\n            networkingAddress: String,\n            networkingKey: String,\n            stakingKey: String,\n            stakingKeyPoP: String,\n            amount: UFix64,\n            machineAccountKey: String, \n            machineAccountKeySignatureAlgorithm: UInt8, \n            machineAccountKeyHashAlgorithm: UInt8) {\n\n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        pre {\n\t\t\tmachineAccountKeySignatureAlgorithm == 1 || machineAccountKeySignatureAlgorithm == 2:\n                \"Cannot register node with provided machine account key: Must provide a signature algorithm raw value that corresponds to \"\n                .concat(\"one of the available signature algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(machineAccountKeySignatureAlgorithm.toString())\n                .concat(\" but the options are either 1 (ECDSA_P256) or 2 (ECDSA_secp256k1).\")\n\t\t\tmachineAccountKeyHashAlgorithm == 1 || machineAccountKeyHashAlgorithm == 3:\n                \"Cannot register node with provided machine account key: Must provide a hash algorithm raw value that corresponds to \"\n                .concat(\"one of of the available hash algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(machineAccountKeyHashAlgorithm.toString())\n                .concat(\" but the options are either 1 (SHA2_256) or 3 (SHA3_256).\")\n\t\t}\n\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n\n        if let machineAccount = self.stakingCollectionRef.registerNode(\n            id: id,\n            role: role,\n            networkingAddress: networkingAddress,\n            networkingKey: networkingKey,\n            stakingKey: stakingKey,\n            stakingKeyPoP: stakingKeyPoP,\n            amount: amount,\n            payer: account\n        ) {\n            let sigAlgo = SignatureAlgorithm(rawValue: machineAccountKeySignatureAlgorithm)!\n\n            let hashAlgo = HashAlgorithm(rawValue: machineAccountKeyHashAlgorithm)!\n            \n            let publicKey = PublicKey(\n\t\t\t    publicKey: machineAccountKey.decodeHex(),\n\t\t\t    signatureAlgorithm: sigAlgo\n\t\t    )\n            machineAccount.keys.add(publicKey: publicKey, hashAlgorithm: hashAlgo, weight: 1000.0)\n        }\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "flow-node.test:3569",
          "type": "String"
        },
        {
          "value": "1348307bc77c688e80049de9d081aa09755da33e6997605fa059db2144fc85e560cbe6f7da8d74b453f5916618cb8fd392c2db856f3e78221dc68db1b1d914e4",
          "type": "String"
        },
        {
          "value": "8dec36ed8a91e3e5d737b06434d94a8a561c7889495d6c7081cd5e123a42124415b9391c9b9aa165c2f71994bf9607cb0ea262ad162fec74146d1ebc482a33b9dad203d16a83bbfda89b3f6e1cd1d8fb2e704a162d259a0ac9f26bc8635d74f6",
          "type": "String"
        },
        {
          "value": "828a68a2be392804044d85888100462702a422901da3269fb6512defabad07250aad24f232671e4ac8ae531f54e062fc",
          "type": "String"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        },
        {
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164",
          "type": "String"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": [
        {
          "address": "99a8ac2c71d4f6bd",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import Crypto\nimport FlowStakingCollection from 0x95e019a17d0e23d7\n\n/// Registers a delegator in the staking collection resource\n/// for the specified node information and the amount of tokens to commit\n\ntransaction(id: String,\n            role: UInt8,\n            networkingAddress: String,\n            networkingKey: String,\n            stakingKey: String,\n            stakingKeyPoP: String,\n            amount: UFix64,\n            machineAccountKey: String, \n            machineAccountKeySignatureAlgorithm: UInt8, \n            machineAccountKeyHashAlgorithm: UInt8) {\n\n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        pre {\n\t\t\tmachineAccountKeySignatureAlgorithm == 1 || machineAccountKeySignatureAlgorithm == 2:\n                \"Cannot register node with provided machine account key: Must provide a signature algorithm raw value that corresponds to \"\n                .concat(\"one of the available signature algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(machineAccountKeySignatureAlgorithm.toString())\n                .concat(\" but the options are either 1 (ECDSA_P256) or 2 (ECDSA_secp256k1).\")\n\t\t\tmachineAccountKeyHashAlgorithm == 1 || machineAccountKeyHashAlgorithm == 3:\n                \"Cannot register node with provided machine account key: Must provide a hash algorithm raw value that corresponds to \"\n                .concat(\"one of of the available hash algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(machineAccountKeyHashAlgorithm.toString())\n                .concat(\" but the options are either 1 (SHA2_256) or 3 (SHA3_256).\")\n\t\t}\n\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n\n        if let machineAccount = self.stakingCollectionRef.registerNode(\n            id: id,\n            role: role,\n            networkingAddress: networkingAddress,\n            networkingKey: networkingKey,\n            stakingKey: stakingKey,\n            stakingKeyPoP: stakingKeyPoP,\n            amount: amount,\n            payer: account\n        ) {\n            let sigAlgo = SignatureAlgorithm(rawValue: machineAccountKeySignatureAlgorithm)!\n\n            let hashAlgo = HashAlgorithm(rawValue: machineAccountKeyHashAlgorithm)!\n            \n            let publicKey = PublicKey(\n\t\t\t    publicKey: machineAccountKey.decodeHex(),\n\t\t\t    signatureAlgorithm: sigAlgo\n\t\t    )\n            machineAccount.keys.add(publicKey: publicKey, hashAlgorithm: hashAlgo, weight: 1000.0)\n        }\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "flow-node.test:3569",
          "type": "String"
        },
        {
          "value": "1348307bc77c688e80049de9d081aa09755da33e6997605fa059db2144fc85e560cbe6f7da8d74b453f5916618cb8fd392c2db856f3e78221dc68db1b1d914e4",
          "type": "String"
        },
        {
          "value": "8dec36ed8a91e3e5d737b06434d94a8a561c7889495d6c7081cd5e123a42124415b9391c9b9aa165c2f71994bf9607cb0ea262ad162fec74146d1ebc482a33b9dad203d16a83bbfda89b3f6e1cd1d8fb2e704a162d259a0ac9f26bc8635d74f6",
          "type": "String"
        },
        {
          "value": "828a68a2be392804044d85888100462702a422901da3269fb6512defabad07250aad24f232671e4ac8ae531f54e062fc",
          "type": "String"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        },
        {
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164",
          "type": "String"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "99a8ac2c71d4f6bd",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "99a8ac2c71d4f6bd",
      "authorizers": [
        "99a8ac2c71d4f6bd"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90ef7b90af5696d706f72742043727970746f0a696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f2052656769737465727320612064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e207265736f757263650a2f2f2f20666f722074686520737065636966696564206e6f646520696e666f726d6174696f6e20616e642074686520616d6f756e74206f6620746f6b656e7320746f20636f6d6d69740a0a7472616e73616374696f6e2869643a20537472696e672c0a202020202020202020202020726f6c653a2055496e74382c0a2020202020202020202020206e6574776f726b696e67416464726573733a20537472696e672c0a2020202020202020202020206e6574776f726b696e674b65793a20537472696e672c0a2020202020202020202020207374616b696e674b65793a20537472696e672c0a2020202020202020202020207374616b696e674b6579506f503a20537472696e672c0a202020202020202020202020616d6f756e743a205546697836342c0a2020202020202020202020206d616368696e654163636f756e744b65793a20537472696e672c200a2020202020202020202020206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d3a2055496e74382c200a2020202020202020202020206d616368696e654163636f756e744b657948617368416c676f726974686d3a2055496e743829207b0a0a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a2020202020202020707265207b0a0909096d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d203d3d2031207c7c206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d203d3d20323a0a202020202020202020202020202020202243616e6e6f74207265676973746572206e6f646520776974682070726f7669646564206d616368696e65206163636f756e74206b65793a204d7573742070726f766964652061207369676e617475726520616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f662074686520617661696c61626c65207369676e617475726520616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e636174286d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e7320617265206569746865722031202845434453415f5032353629206f722032202845434453415f736563703235366b31292e22290a0909096d616368696e654163636f756e744b657948617368416c676f726974686d203d3d2031207c7c206d616368696e654163636f756e744b657948617368416c676f726974686d203d3d20333a0a202020202020202020202020202020202243616e6e6f74207265676973746572206e6f646520776974682070726f7669646564206d616368696e65206163636f756e74206b65793a204d7573742070726f766964652061206861736820616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f66206f662074686520617661696c61626c65206861736820616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e636174286d616368696e654163636f756e744b657948617368416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e73206172652065697468657220312028534841325f32353629206f7220332028534841335f323536292e22290a09097d0a0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a0a20202020202020206966206c6574206d616368696e654163636f756e74203d2073656c662e7374616b696e67436f6c6c656374696f6e5265662e72656769737465724e6f6465280a20202020202020202020202069643a2069642c0a202020202020202020202020726f6c653a20726f6c652c0a2020202020202020202020206e6574776f726b696e67416464726573733a206e6574776f726b696e67416464726573732c0a2020202020202020202020206e6574776f726b696e674b65793a206e6574776f726b696e674b65792c0a2020202020202020202020207374616b696e674b65793a207374616b696e674b65792c0a2020202020202020202020207374616b696e674b6579506f503a207374616b696e674b6579506f502c0a202020202020202020202020616d6f756e743a20616d6f756e742c0a20202020202020202020202070617965723a206163636f756e740a202020202020202029207b0a2020202020202020202020206c657420736967416c676f203d205369676e6174757265416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d29210a0a2020202020202020202020206c65742068617368416c676f203d2048617368416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b657948617368416c676f726974686d29210a2020202020202020202020200a2020202020202020202020206c6574207075626c69634b6579203d205075626c69634b6579280a090909202020207075626c69634b65793a206d616368696e654163636f756e744b65792e6465636f646548657828292c0a090909202020207369676e6174757265416c676f726974686d3a20736967416c676f0a090920202020290a2020202020202020202020206d616368696e654163636f756e742e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2068617368416c676f2c207765696768743a20313030302e30290a20202020202020207d0a202020207d0a7d0af903bcb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227daf7b2276616c7565223a22666c6f772d6e6f64652e746573743a33353639222c2274797065223a22537472696e67227db89c7b2276616c7565223a223133343833303762633737633638386538303034396465396430383161613039373535646133336536393937363035666130353964623231343466633835653536306362653666376461386437346234353366353931363631386362386664333932633264623835366633653738323231646336386462316231643931346534222c2274797065223a22537472696e67227db8dc7b2276616c7565223a22386465633336656438613931653365356437333762303634333464393461386135363163373838393439356436633730383163643565313233613432313234343135623933393163396239616131363563326637313939346266393630376362306561323632616431363266656337343134366431656263343832613333623964616432303364313661383362626664613839623366366531636431643866623265373034613136326432353961306163396632366263383633356437346636222c2274797065223a22537472696e67227db87c7b2276616c7565223a22383238613638613262653339323830343034346438353838383130303436323730326134323239303164613332363966623635313264656661626164303732353061616432346632333236373165346163386165353331663534653036326663222c2274797065223a22537472696e67227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227db8aa7b2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634222c2274797065223a22537472696e67227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bd",
    "encodedTransactionEnvelopeHex": "f90efbf90ef7b90af5696d706f72742043727970746f0a696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078393565303139613137643065323364370a0a2f2f2f2052656769737465727320612064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e207265736f757263650a2f2f2f20666f722074686520737065636966696564206e6f646520696e666f726d6174696f6e20616e642074686520616d6f756e74206f6620746f6b656e7320746f20636f6d6d69740a0a7472616e73616374696f6e2869643a20537472696e672c0a202020202020202020202020726f6c653a2055496e74382c0a2020202020202020202020206e6574776f726b696e67416464726573733a20537472696e672c0a2020202020202020202020206e6574776f726b696e674b65793a20537472696e672c0a2020202020202020202020207374616b696e674b65793a20537472696e672c0a2020202020202020202020207374616b696e674b6579506f503a20537472696e672c0a202020202020202020202020616d6f756e743a205546697836342c0a2020202020202020202020206d616368696e654163636f756e744b65793a20537472696e672c200a2020202020202020202020206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d3a2055496e74382c200a2020202020202020202020206d616368696e654163636f756e744b657948617368416c676f726974686d3a2055496e743829207b0a0a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a2020202020202020707265207b0a0909096d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d203d3d2031207c7c206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d203d3d20323a0a202020202020202020202020202020202243616e6e6f74207265676973746572206e6f646520776974682070726f7669646564206d616368696e65206163636f756e74206b65793a204d7573742070726f766964652061207369676e617475726520616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f662074686520617661696c61626c65207369676e617475726520616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e636174286d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e7320617265206569746865722031202845434453415f5032353629206f722032202845434453415f736563703235366b31292e22290a0909096d616368696e654163636f756e744b657948617368416c676f726974686d203d3d2031207c7c206d616368696e654163636f756e744b657948617368416c676f726974686d203d3d20333a0a202020202020202020202020202020202243616e6e6f74207265676973746572206e6f646520776974682070726f7669646564206d616368696e65206163636f756e74206b65793a204d7573742070726f766964652061206861736820616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f66206f662074686520617661696c61626c65206861736820616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e636174286d616368696e654163636f756e744b657948617368416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e73206172652065697468657220312028534841325f32353629206f7220332028534841335f323536292e22290a09097d0a0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a0a20202020202020206966206c6574206d616368696e654163636f756e74203d2073656c662e7374616b696e67436f6c6c656374696f6e5265662e72656769737465724e6f6465280a20202020202020202020202069643a2069642c0a202020202020202020202020726f6c653a20726f6c652c0a2020202020202020202020206e6574776f726b696e67416464726573733a206e6574776f726b696e67416464726573732c0a2020202020202020202020206e6574776f726b696e674b65793a206e6574776f726b696e674b65792c0a2020202020202020202020207374616b696e674b65793a207374616b696e674b65792c0a2020202020202020202020207374616b696e674b6579506f503a207374616b696e674b6579506f502c0a202020202020202020202020616d6f756e743a20616d6f756e742c0a20202020202020202020202070617965723a206163636f756e740a202020202020202029207b0a2020202020202020202020206c657420736967416c676f203d205369676e6174757265416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d29210a0a2020202020202020202020206c65742068617368416c676f203d2048617368416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b657948617368416c676f726974686d29210a2020202020202020202020200a2020202020202020202020206c6574207075626c69634b6579203d205075626c69634b6579280a090909202020207075626c69634b65793a206d616368696e654163636f756e744b65792e6465636f646548657828292c0a090909202020207369676e6174757265416c676f726974686d3a20736967416c676f0a090920202020290a2020202020202020202020206d616368696e654163636f756e742e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2068617368416c676f2c207765696768743a20313030302e30290a20202020202020207d0a202020207d0a7d0af903bcb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227daf7b2276616c7565223a22666c6f772d6e6f64652e746573743a33353639222c2274797065223a22537472696e67227db89c7b2276616c7565223a223133343833303762633737633638386538303034396465396430383161613039373535646133336536393937363035666130353964623231343466633835653536306362653666376461386437346234353366353931363631386362386664333932633264623835366633653738323231646336386462316231643931346534222c2274797065223a22537472696e67227db8dc7b2276616c7565223a22386465633336656438613931653365356437333762303634333464393461386135363163373838393439356436633730383163643565313233613432313234343135623933393163396239616131363563326637313939346266393630376362306561323632616431363266656337343134366431656263343832613333623964616432303364313661383362626664613839623366366531636431643866623265373034613136326432353961306163396632366263383633356437346636222c2274797065223a22537472696e67227db87c7b2276616c7565223a22383238613638613262653339323830343034346438353838383130303436323730326134323239303164613332363966623635313264656661626164303732353061616432346632333236373165346163386165353331663534653036326663222c2274797065223a22537472696e67227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227db8aa7b2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634222c2274797065223a22537472696e67227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a8899a8ac2c71d4f6bd040a8899a8ac2c71d4f6bdc98899a8ac2c71d4f6bdc0",
    "metadata": "0215face232abba7795997f06ec6f07a4e7d14743e6ed4f33d9e26ad02017b917f88bdc9bb28ce734d1edc4b64ae5adf99ff3ac572dbe0d09090795bf78c7c31a65265676973746572204e6f6465207769746820506f50000a044e6f64652049440000074e6f646520526f6c650001044e6574772e20416464726573730002044e6574772e204b65790003045374616b696e67204b65790004045374616b696e67204b657920506f50000501416d6f756e7400065546697836340003044d41205075622e204b65790007064d41205369676e2e20416c672e0008054d41204861736820416c672e0009",
    "hash": "15face232abba7795997f06ec6f07a4e7d14743e6ed4f33d9e26ad02017b917f"
  },
  {
    "title": "FA.01 - Create Account",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import Crypto\n\ntransaction(key: String, signatureAlgorithm: UInt8, hashAlgorithm: UInt8) {\n\tprepare(signer: auth(BorrowValue, Storage) &Account) {\n\t\tpre {\n\t\t\tsignatureAlgorithm == 1 || signatureAlgorithm == 2:\n                \"Cannot add Key: Must provide a signature algorithm raw value that corresponds to \"\n                .concat(\"one of the available signature algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(signatureAlgorithm.toString())\n                .concat(\" but the options are either 1 (ECDSA_P256) or 2 (ECDSA_secp256k1).\")\n\t\t\thashAlgorithm == 1 || hashAlgorithm == 3:\n                \"Cannot add Key: Must provide a hash algorithm raw value that corresponds to \"\n                .concat(\"one of of the available hash algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(hashAlgorithm.toString())\n                .concat(\" but the options are either 1 (SHA2_256) or 3 (SHA3_256).\")\n\t\t}\n\n\t\tlet publicKey = PublicKey(\n\t\t\tpublicKey: key.decodeHex(),\n\t\t\tsignatureAlgorithm: SignatureAlgorithm(rawValue: signatureAlgorithm)!\n\t\t)\n\n\t\tlet account = Account(payer: signer)\n\n\t\taccount.keys.add(publicKey: publicKey, hashAlgorithm: HashAlgorithm(rawValue: hashAlgorithm)!, weight: 1000.0)\n\t}\n}",
      "arguments": [
        {
          "type": "String",
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import Crypto\n\ntransaction(key: String, signatureAlgorithm: UInt8, hashAlgorithm: UInt8) {\n\tprepare(signer: auth(BorrowValue, Storage) &Account) {\n\t\tpre {\n\t\t\tsignatureAlgorithm == 1 || signatureAlgorithm == 2:\n                \"Cannot add Key: Must provide a signature algorithm raw value that corresponds to \"\n                .concat(\"one of the available signature algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(signatureAlgorithm.toString())\n                .concat(\" but the options are either 1 (ECDSA_P256) or 2 (ECDSA_secp256k1).\")\n\t\t\thashAlgorithm == 1 || hashAlgorithm == 3:\n                \"Cannot add Key: Must provide a hash algorithm raw value that corresponds to \"\n                .concat(\"one of of the available hash algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(hashAlgorithm.toString())\n                .concat(\" but the options are either 1 (SHA2_256) or 3 (SHA3_256).\")\n\t\t}\n\n\t\tlet publicKey = PublicKey(\n\t\t\tpublicKey: key.decodeHex(),\n\t\t\tsignatureAlgorithm: SignatureAlgorithm(rawValue: signatureAlgorithm)!\n\t\t)\n\n\t\tlet account = Account(payer: signer)\n\n\t\taccount.keys.add(publicKey: publicKey, hashAlgorithm: HashAlgorithm(rawValue: hashAlgorithm)!, weight: 1000.0)\n\t}\n}",
      "arguments": [
        {
          "type": "String",
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9060bb904e0696d706f72742043727970746f0a0a7472616e73616374696f6e286b65793a20537472696e672c207369676e6174757265416c676f726974686d3a2055496e74382c2068617368416c676f726974686d3a2055496e743829207b0a0970726570617265287369676e65723a206175746828426f72726f7756616c75652c2053746f726167652920264163636f756e7429207b0a0909707265207b0a0909097369676e6174757265416c676f726974686d203d3d2031207c7c207369676e6174757265416c676f726974686d203d3d20323a0a202020202020202020202020202020202243616e6e6f7420616464204b65793a204d7573742070726f766964652061207369676e617475726520616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f662074686520617661696c61626c65207369676e617475726520616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e636174287369676e6174757265416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e7320617265206569746865722031202845434453415f5032353629206f722032202845434453415f736563703235366b31292e22290a09090968617368416c676f726974686d203d3d2031207c7c2068617368416c676f726974686d203d3d20333a0a202020202020202020202020202020202243616e6e6f7420616464204b65793a204d7573742070726f766964652061206861736820616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f66206f662074686520617661696c61626c65206861736820616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e6361742868617368416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e73206172652065697468657220312028534841325f32353629206f7220332028534841335f323536292e22290a09097d0a0a09096c6574207075626c69634b6579203d205075626c69634b6579280a0909097075626c69634b65793a206b65792e6465636f646548657828292c0a0909097369676e6174757265416c676f726974686d3a205369676e6174757265416c676f726974686d2872617756616c75653a207369676e6174757265416c676f726974686d29210a0909290a0a09096c6574206163636f756e74203d204163636f756e742870617965723a207369676e6572290a0a09096163636f756e742e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2048617368416c676f726974686d2872617756616c75653a2068617368416c676f726974686d29212c207765696768743a20313030302e30290a097d0a7df8e6b8aa7b2274797065223a22537472696e67222c2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f9060ff9060bb904e0696d706f72742043727970746f0a0a7472616e73616374696f6e286b65793a20537472696e672c207369676e6174757265416c676f726974686d3a2055496e74382c2068617368416c676f726974686d3a2055496e743829207b0a0970726570617265287369676e65723a206175746828426f72726f7756616c75652c2053746f726167652920264163636f756e7429207b0a0909707265207b0a0909097369676e6174757265416c676f726974686d203d3d2031207c7c207369676e6174757265416c676f726974686d203d3d20323a0a202020202020202020202020202020202243616e6e6f7420616464204b65793a204d7573742070726f766964652061207369676e617475726520616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f662074686520617661696c61626c65207369676e617475726520616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e636174287369676e6174757265416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e7320617265206569746865722031202845434453415f5032353629206f722032202845434453415f736563703235366b31292e22290a09090968617368416c676f726974686d203d3d2031207c7c2068617368416c676f726974686d203d3d20333a0a202020202020202020202020202020202243616e6e6f7420616464204b65793a204d7573742070726f766964652061206861736820616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f66206f662074686520617661696c61626c65206861736820616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e6361742868617368416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e73206172652065697468657220312028534841325f32353629206f7220332028534841335f323536292e22290a09097d0a0a09096c6574207075626c69634b6579203d205075626c69634b6579280a0909097075626c69634b65793a206b65792e6465636f646548657828292c0a0909097369676e6174757265416c676f726974686d3a205369676e6174757265416c676f726974686d2872617756616c75653a207369676e6174757265416c676f726974686d29210a0909290a0a09096c6574206163636f756e74203d204163636f756e742870617965723a207369676e6572290a0a09096163636f756e742e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2048617368416c676f726974686d2872617756616c75653a2068617368416c676f726974686d29212c207765696768743a20313030302e30290a097d0a7df8e6b8aa7b2274797065223a22537472696e67222c2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "029e46752d27947cc85e5fb62f4deecb12bd7b2a721211ef944acf528bd648dcd79e46752d27947cc85e5fb62f4deecb12bd7b2a721211ef944acf528bd648dcd7437265617465204163636f756e740003045075626c6963204b65790000065369676e617475726520416c672e0001054861736820416c672e0002",
    "hash": "9e46752d27947cc85e5fb62f4deecb12bd7b2a721211ef944acf528bd648dcd7"
  },
  {
    "title": "FA.02 - Add Key",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import Crypto\n\ntransaction(key: String, signatureAlgorithm: UInt8, hashAlgorithm: UInt8, weight: UFix64) {\n\n\tprepare(signer: auth(AddKey) &Account) {\n\t\tpre {\n\t\t\tsignatureAlgorithm == 1 || signatureAlgorithm == 2:\n                \"Cannot add Key: Must provide a signature algorithm raw value that corresponds to \"\n                .concat(\"one of the available signature algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(signatureAlgorithm.toString())\n                .concat(\" but the options are either 1 (ECDSA_P256) or 2 (ECDSA_secp256k1).\")\n\t\t\thashAlgorithm == 1 || hashAlgorithm == 3:\n                \"Cannot add Key: Must provide a hash algorithm raw value that corresponds to \"\n                .concat(\"one of of the available hash algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(hashAlgorithm.toString())\n                .concat(\" but the options are either 1 (SHA2_256) or 3 (SHA3_256).\")\n\t\t\tweight <= 1000.0:\n                \"Cannot add Key: The key weight must be between 0 and 1000.\"\n                .concat(\" You provided \").concat(weight.toString()).concat(\" which is invalid.\")\n\t\t}\n\t\t\n\t\tlet publicKey = PublicKey(\n\t\t\tpublicKey: key.decodeHex(),\n\t\t\tsignatureAlgorithm: SignatureAlgorithm(rawValue: signatureAlgorithm)!\n\t\t)\n\n\t\tsigner.keys.add(publicKey: publicKey, hashAlgorithm: HashAlgorithm(rawValue: hashAlgorithm)!, weight: weight)\n\t}\n}",
      "arguments": [
        {
          "type": "String",
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1000.00000000",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import Crypto\n\ntransaction(key: String, signatureAlgorithm: UInt8, hashAlgorithm: UInt8, weight: UFix64) {\n\n\tprepare(signer: auth(AddKey) &Account) {\n\t\tpre {\n\t\t\tsignatureAlgorithm == 1 || signatureAlgorithm == 2:\n                \"Cannot add Key: Must provide a signature algorithm raw value that corresponds to \"\n                .concat(\"one of the available signature algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(signatureAlgorithm.toString())\n                .concat(\" but the options are either 1 (ECDSA_P256) or 2 (ECDSA_secp256k1).\")\n\t\t\thashAlgorithm == 1 || hashAlgorithm == 3:\n                \"Cannot add Key: Must provide a hash algorithm raw value that corresponds to \"\n                .concat(\"one of of the available hash algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(hashAlgorithm.toString())\n                .concat(\" but the options are either 1 (SHA2_256) or 3 (SHA3_256).\")\n\t\t\tweight <= 1000.0:\n                \"Cannot add Key: The key weight must be between 0 and 1000.\"\n                .concat(\" You provided \").concat(weight.toString()).concat(\" which is invalid.\")\n\t\t}\n\t\t\n\t\tlet publicKey = PublicKey(\n\t\t\tpublicKey: key.decodeHex(),\n\t\t\tsignatureAlgorithm: SignatureAlgorithm(rawValue: signatureAlgorithm)!\n\t\t)\n\n\t\tsigner.keys.add(publicKey: publicKey, hashAlgorithm: HashAlgorithm(rawValue: hashAlgorithm)!, weight: weight)\n\t}\n}",
      "arguments": [
        {
          "type": "String",
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1000.00000000",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f906d5b9057f696d706f72742043727970746f0a0a7472616e73616374696f6e286b65793a20537472696e672c207369676e6174757265416c676f726974686d3a2055496e74382c2068617368416c676f726974686d3a2055496e74382c207765696768743a2055466978363429207b0a0a0970726570617265287369676e65723a2061757468284164644b65792920264163636f756e7429207b0a0909707265207b0a0909097369676e6174757265416c676f726974686d203d3d2031207c7c207369676e6174757265416c676f726974686d203d3d20323a0a202020202020202020202020202020202243616e6e6f7420616464204b65793a204d7573742070726f766964652061207369676e617475726520616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f662074686520617661696c61626c65207369676e617475726520616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e636174287369676e6174757265416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e7320617265206569746865722031202845434453415f5032353629206f722032202845434453415f736563703235366b31292e22290a09090968617368416c676f726974686d203d3d2031207c7c2068617368416c676f726974686d203d3d20333a0a202020202020202020202020202020202243616e6e6f7420616464204b65793a204d7573742070726f766964652061206861736820616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f66206f662074686520617661696c61626c65206861736820616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e6361742868617368416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e73206172652065697468657220312028534841325f32353629206f7220332028534841335f323536292e22290a090909776569676874203c3d20313030302e303a0a202020202020202020202020202020202243616e6e6f7420616464204b65793a20546865206b657920776569676874206d757374206265206265747765656e203020616e6420313030302e220a202020202020202020202020202020202e636f6e636174282220596f752070726f76696465642022292e636f6e636174287765696768742e746f537472696e672829292e636f6e636174282220776869636820697320696e76616c69642e22290a09097d0a09090a09096c6574207075626c69634b6579203d205075626c69634b6579280a0909097075626c69634b65793a206b65792e6465636f646548657828292c0a0909097369676e6174757265416c676f726974686d3a205369676e6174757265416c676f726974686d2872617756616c75653a207369676e6174757265416c676f726974686d29210a0909290a0a09097369676e65722e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2048617368416c676f726974686d2872617756616c75653a2068617368416c676f726974686d29212c207765696768743a20776569676874290a097d0a7df90110b8aa7b2274797065223a22537472696e67222c2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da97b2276616c7565223a22313030302e3030303030303030222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f906d9f906d5b9057f696d706f72742043727970746f0a0a7472616e73616374696f6e286b65793a20537472696e672c207369676e6174757265416c676f726974686d3a2055496e74382c2068617368416c676f726974686d3a2055496e74382c207765696768743a2055466978363429207b0a0a0970726570617265287369676e65723a2061757468284164644b65792920264163636f756e7429207b0a0909707265207b0a0909097369676e6174757265416c676f726974686d203d3d2031207c7c207369676e6174757265416c676f726974686d203d3d20323a0a202020202020202020202020202020202243616e6e6f7420616464204b65793a204d7573742070726f766964652061207369676e617475726520616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f662074686520617661696c61626c65207369676e617475726520616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e636174287369676e6174757265416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e7320617265206569746865722031202845434453415f5032353629206f722032202845434453415f736563703235366b31292e22290a09090968617368416c676f726974686d203d3d2031207c7c2068617368416c676f726974686d203d3d20333a0a202020202020202020202020202020202243616e6e6f7420616464204b65793a204d7573742070726f766964652061206861736820616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f66206f662074686520617661696c61626c65206861736820616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e6361742868617368416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e73206172652065697468657220312028534841325f32353629206f7220332028534841335f323536292e22290a090909776569676874203c3d20313030302e303a0a202020202020202020202020202020202243616e6e6f7420616464204b65793a20546865206b657920776569676874206d757374206265206265747765656e203020616e6420313030302e220a202020202020202020202020202020202e636f6e636174282220596f752070726f76696465642022292e636f6e636174287765696768742e746f537472696e672829292e636f6e636174282220776869636820697320696e76616c69642e22290a09097d0a09090a09096c6574207075626c69634b6579203d205075626c69634b6579280a0909097075626c69634b65793a206b65792e6465636f646548657828292c0a0909097369676e6174757265416c676f726974686d3a205369676e6174757265416c676f726974686d2872617756616c75653a207369676e6174757265416c676f726974686d29210a0909290a0a09097369676e65722e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2048617368416c676f726974686d2872617756616c75653a2068617368416c676f726974686d29212c207765696768743a20776569676874290a097d0a7df90110b8aa7b2274797065223a22537472696e67222c2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da97b2276616c7565223a22313030302e3030303030303030222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "025b26465efc98fbc2a41c2c3c170eb5d74886745b34571d6041611d268a3f90285b26465efc98fbc2a41c2c3c170eb5d74886745b34571d6041611d268a3f9028416464204b65790004045075626c6963204b65790000065369676e617475726520416c672e0001054861736820416c672e0002014b65792057656967687400035546697836340003",
    "hash": "5b26465efc98fbc2a41c2c3c170eb5d74886745b34571d6041611d268a3f9028"
  },
  {
    "title": "FA.03 - Remove Key",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "transaction(keyIndex: Int) {\n\tprepare(signer: auth(RevokeKey) &Account) {\n\t\tif let key = signer.keys.get(keyIndex: keyIndex) {\n\t\t\tsigner.keys.revoke(keyIndex: keyIndex)\n\t\t} else {\n            panic(\"Cannot revoke key: No key with the index \"\n                  .concat(keyIndex.toString())\n                  .concat(\" exists on the authorizer's account.\"))\n\t\t}\n\t}\n}",
      "arguments": [
        {
          "type": "Int",
          "value": "1"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "transaction(keyIndex: Int) {\n\tprepare(signer: auth(RevokeKey) &Account) {\n\t\tif let key = signer.keys.get(keyIndex: keyIndex) {\n\t\t\tsigner.keys.revoke(keyIndex: keyIndex)\n\t\t} else {\n            panic(\"Cannot revoke key: No key with the index \"\n                  .concat(keyIndex.toString())\n                  .concat(\" exists on the authorizer's account.\"))\n\t\t}\n\t}\n}",
      "arguments": [
        {
          "type": "Int",
          "value": "1"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f901cbb9016c7472616e73616374696f6e286b6579496e6465783a20496e7429207b0a0970726570617265287369676e65723a2061757468285265766f6b654b65792920264163636f756e7429207b0a09096966206c6574206b6579203d207369676e65722e6b6579732e676574286b6579496e6465783a206b6579496e64657829207b0a0909097369676e65722e6b6579732e7265766f6b65286b6579496e6465783a206b6579496e646578290a09097d20656c7365207b0a20202020202020202020202070616e6963282243616e6e6f74207265766f6b65206b65793a204e6f206b657920776974682074686520696e64657820220a2020202020202020202020202020202020202e636f6e636174286b6579496e6465782e746f537472696e672829290a2020202020202020202020202020202020202e636f6e636174282220657869737473206f6e2074686520617574686f72697a65722773206163636f756e742e2229290a09097d0a097d0a7ddb9a7b2274797065223a22496e74222c2276616c7565223a2231227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f901cff901cbb9016c7472616e73616374696f6e286b6579496e6465783a20496e7429207b0a0970726570617265287369676e65723a2061757468285265766f6b654b65792920264163636f756e7429207b0a09096966206c6574206b6579203d207369676e65722e6b6579732e676574286b6579496e6465783a206b6579496e64657829207b0a0909097369676e65722e6b6579732e7265766f6b65286b6579496e6465783a206b6579496e646578290a09097d20656c7365207b0a20202020202020202020202070616e6963282243616e6e6f74207265766f6b65206b65793a204e6f206b657920776974682074686520696e64657820220a2020202020202020202020202020202020202e636f6e636174286b6579496e6465782e746f537472696e672829290a2020202020202020202020202020202020202e636f6e636174282220657869737473206f6e2074686520617574686f72697a65722773206163636f756e742e2229290a09097d0a097d0a7ddb9a7b2274797065223a22496e74222c2276616c7565223a2231227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "0269409133294a24bc167375f47043604676b7fdf1dde9396540c13ff540aa928869409133294a24bc167375f47043604676b7fdf1dde9396540c13ff540aa928852656d6f7665204b65790001014b657920496e6465780000496e740003",
    "hash": "69409133294a24bc167375f47043604676b7fdf1dde9396540c13ff540aa9288"
  },
  {
    "title": "FT.01 - Setup Fungible Token Vault",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FungibleToken from 0xf233dcee88fe0abe\nimport FungibleTokenMetadataViews from 0xf233dcee88fe0abe\n\n#interaction (\n  version: \"1.0.0\",\n\ttitle: \"Generic FT Transfer with Contract Address and Name\",\n\tdescription: \"Transfer any Fungible Token by providing the contract address and name\",\n\tlanguage: \"en-US\",\n)\n\n/// This transaction is what an account would run\n/// to set itself up to manage fungible tokens. This function\n/// uses views to know where to set up the vault\n/// in storage and to create the empty vault.\n///\n/// @param contractAddress: The address of the contract\n///        that defines the tokens to initialize\n/// @param contractName: The name of the contract\n///        that defines the tokens to initialize. Ex: \"FlowToken\"\n\ntransaction(contractAddress: Address, contractName: String) {\n\n    prepare(signer: auth(SaveValue, Capabilities) &Account) {\n        // Borrow a reference to the vault stored on the passed account at the passed publicPath\n        let resolverRef = getAccount(contractAddress)\n            .contracts.borrow<&{FungibleToken}>(name: contractName)\n                ?? panic(\"Could not borrow FungibleToken reference to the contract. Make sure the provided contract name (\"\n                          .concat(contractName).concat(\") and address (\").concat(contractAddress.toString()).concat(\") are correct!\"))\n\n        // Use that reference to retrieve the FTView \n        let ftVaultData = resolverRef.resolveContractView(resourceType: nil, viewType: Type<FungibleTokenMetadataViews.FTVaultData>()) as! FungibleTokenMetadataViews.FTVaultData?\n            ?? panic(\"Could not resolve FTVaultData view. The \".concat(contractName)\n                .concat(\" contract needs to implement the FTVaultData Metadata view in order to execute this transaction.\"))\n\n        // Create a new empty vault using the createEmptyVault function inside the FTVaultData\n        let emptyVault <-ftVaultData.createEmptyVault()\n\n        // Save it to the account\n        signer.storage.save(<-emptyVault, to: ftVaultData.storagePath)\n        \n        // Create a public capability for the vault which includes the .Resolver interface\n        let vaultCap = signer.capabilities.storage.issue<&{FungibleToken.Vault}>(ftVaultData.storagePath)\n        signer.capabilities.publish(vaultCap, at: ftVaultData.metadataPath)\n\n        // Create a public capability for the vault exposing the receiver interface\n        let receiverCap = signer.capabilities.storage.issue<&{FungibleToken.Receiver}>(ftVaultData.storagePath)\n        signer.capabilities.publish(receiverCap, at: ftVaultData.receiverPath)\n\n    }\n}\n ",
      "arguments": [
        {
          "type": "Address",
          "value": "0xe467b9dd11fa00df"
        },
        {
          "value": "FiatToken",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FungibleToken from 0xf233dcee88fe0abe\nimport FungibleTokenMetadataViews from 0xf233dcee88fe0abe\n\n#interaction (\n  version: \"1.0.0\",\n\ttitle: \"Generic FT Transfer with Contract Address and Name\",\n\tdescription: \"Transfer any Fungible Token by providing the contract address and name\",\n\tlanguage: \"en-US\",\n)\n\n/// This transaction is what an account would run\n/// to set itself up to manage fungible tokens. This function\n/// uses views to know where to set up the vault\n/// in storage and to create the empty vault.\n///\n/// @param contractAddress: The address of the contract\n///        that defines the tokens to initialize\n/// @param contractName: The name of the contract\n///        that defines the tokens to initialize. Ex: \"FlowToken\"\n\ntransaction(contractAddress: Address, contractName: String) {\n\n    prepare(signer: auth(SaveValue, Capabilities) &Account) {\n        // Borrow a reference to the vault stored on the passed account at the passed publicPath\n        let resolverRef = getAccount(contractAddress)\n            .contracts.borrow<&{FungibleToken}>(name: contractName)\n                ?? panic(\"Could not borrow FungibleToken reference to the contract. Make sure the provided contract name (\"\n                          .concat(contractName).concat(\") and address (\").concat(contractAddress.toString()).concat(\") are correct!\"))\n\n        // Use that reference to retrieve the FTView \n        let ftVaultData = resolverRef.resolveContractView(resourceType: nil, viewType: Type<FungibleTokenMetadataViews.FTVaultData>()) as! FungibleTokenMetadataViews.FTVaultData?\n            ?? panic(\"Could not resolve FTVaultData view. The \".concat(contractName)\n                .concat(\" contract needs to implement the FTVaultData Metadata view in order to execute this transaction.\"))\n\n        // Create a new empty vault using the createEmptyVault function inside the FTVaultData\n        let emptyVault <-ftVaultData.createEmptyVault()\n\n        // Save it to the account\n        signer.storage.save(<-emptyVault, to: ftVaultData.storagePath)\n        \n        // Create a public capability for the vault which includes the .Resolver interface\n        let vaultCap = signer.capabilities.storage.issue<&{FungibleToken.Vault}>(ftVaultData.storagePath)\n        signer.capabilities.publish(vaultCap, at: ftVaultData.metadataPath)\n\n        // Create a public capability for the vault exposing the receiver interface\n        let receiverCap = signer.capabilities.storage.issue<&{FungibleToken.Receiver}>(ftVaultData.storagePath)\n        signer.capabilities.publish(receiverCap, at: ftVaultData.receiverPath)\n\n    }\n}\n ",
      "arguments": [
        {
          "type": "Address",
          "value": "0xe467b9dd11fa00df"
        },
        {
          "value": "FiatToken",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90ad5b90a3a696d706f72742046756e6769626c65546f6b656e2066726f6d203078663233336463656538386665306162650a696d706f72742046756e6769626c65546f6b656e4d6574616461746156696577732066726f6d203078663233336463656538386665306162650a0a23696e746572616374696f6e20280a202076657273696f6e3a2022312e302e30222c0a097469746c653a202247656e65726963204654205472616e73666572207769746820436f6e7472616374204164647265737320616e64204e616d65222c0a096465736372697074696f6e3a20225472616e7366657220616e792046756e6769626c6520546f6b656e2062792070726f766964696e672074686520636f6e7472616374206164647265737320616e64206e616d65222c0a096c616e67756167653a2022656e2d5553222c0a290a0a2f2f2f2054686973207472616e73616374696f6e206973207768617420616e206163636f756e7420776f756c642072756e0a2f2f2f20746f2073657420697473656c6620757020746f206d616e6167652066756e6769626c6520746f6b656e732e20546869732066756e6374696f6e0a2f2f2f207573657320766965777320746f206b6e6f7720776865726520746f2073657420757020746865207661756c740a2f2f2f20696e2073746f7261676520616e6420746f206372656174652074686520656d707479207661756c742e0a2f2f2f0a2f2f2f2040706172616d20636f6e7472616374416464726573733a205468652061646472657373206f662074686520636f6e74726163740a2f2f2f20202020202020207468617420646566696e65732074686520746f6b656e7320746f20696e697469616c697a650a2f2f2f2040706172616d20636f6e74726163744e616d653a20546865206e616d65206f662074686520636f6e74726163740a2f2f2f20202020202020207468617420646566696e65732074686520746f6b656e7320746f20696e697469616c697a652e2045783a2022466c6f77546f6b656e220a0a7472616e73616374696f6e28636f6e7472616374416464726573733a20416464726573732c20636f6e74726163744e616d653a20537472696e6729207b0a0a2020202070726570617265287369676e65723a2061757468285361766556616c75652c204361706162696c69746965732920264163636f756e7429207b0a20202020202020202f2f20426f72726f772061207265666572656e636520746f20746865207661756c742073746f726564206f6e2074686520706173736564206163636f756e742061742074686520706173736564207075626c6963506174680a20202020202020206c6574207265736f6c766572526566203d206765744163636f756e7428636f6e747261637441646472657373290a2020202020202020202020202e636f6e7472616374732e626f72726f773c267b46756e6769626c65546f6b656e7d3e286e616d653a20636f6e74726163744e616d65290a202020202020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772046756e6769626c65546f6b656e207265666572656e636520746f2074686520636f6e74726163742e204d616b652073757265207468652070726f766964656420636f6e7472616374206e616d652028220a20202020202020202020202020202020202020202020202020202e636f6e63617428636f6e74726163744e616d65292e636f6e63617428222920616e642061646472657373202822292e636f6e63617428636f6e7472616374416464726573732e746f537472696e672829292e636f6e6361742822292061726520636f7272656374212229290a0a20202020202020202f2f205573652074686174207265666572656e636520746f2072657472696576652074686520465456696577200a20202020202020206c65742066745661756c7444617461203d207265736f6c7665725265662e7265736f6c7665436f6e747261637456696577287265736f75726365547970653a206e696c2c2076696577547970653a20547970653c46756e6769626c65546f6b656e4d6574616461746156696577732e46545661756c74446174613e282929206173212046756e6769626c65546f6b656e4d6574616461746156696577732e46545661756c74446174613f0a2020202020202020202020203f3f2070616e69632822436f756c64206e6f74207265736f6c76652046545661756c744461746120766965772e2054686520222e636f6e63617428636f6e74726163744e616d65290a202020202020202020202020202020202e636f6e636174282220636f6e7472616374206e6565647320746f20696d706c656d656e74207468652046545661756c7444617461204d65746164617461207669657720696e206f7264657220746f20657865637574652074686973207472616e73616374696f6e2e2229290a0a20202020202020202f2f204372656174652061206e657720656d707479207661756c74207573696e672074686520637265617465456d7074795661756c742066756e6374696f6e20696e73696465207468652046545661756c74446174610a20202020202020206c657420656d7074795661756c74203c2d66745661756c74446174612e637265617465456d7074795661756c7428290a0a20202020202020202f2f205361766520697420746f20746865206163636f756e740a20202020202020207369676e65722e73746f726167652e73617665283c2d656d7074795661756c742c20746f3a2066745661756c74446174612e73746f7261676550617468290a20202020202020200a20202020202020202f2f204372656174652061207075626c6963206361706162696c69747920666f7220746865207661756c7420776869636820696e636c7564657320746865202e5265736f6c76657220696e746572666163650a20202020202020206c6574207661756c74436170203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c267b46756e6769626c65546f6b656e2e5661756c747d3e2866745661756c74446174612e73746f7261676550617468290a20202020202020207369676e65722e6361706162696c69746965732e7075626c697368287661756c744361702c2061743a2066745661756c74446174612e6d6574616461746150617468290a0a20202020202020202f2f204372656174652061207075626c6963206361706162696c69747920666f7220746865207661756c74206578706f73696e672074686520726563656976657220696e746572666163650a20202020202020206c6574207265636569766572436170203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c267b46756e6769626c65546f6b656e2e52656365697665727d3e2866745661756c74446174612e73746f7261676550617468290a20202020202020207369676e65722e6361706162696c69746965732e7075626c6973682872656365697665724361702c2061743a2066745661756c74446174612e726563656976657250617468290a0a202020207d0a7d0a20f856af7b2274797065223a2241646472657373222c2276616c7565223a22307865343637623964643131666130306466227da57b2276616c7565223a2246696174546f6b656e222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90ad9f90ad5b90a3a696d706f72742046756e6769626c65546f6b656e2066726f6d203078663233336463656538386665306162650a696d706f72742046756e6769626c65546f6b656e4d6574616461746156696577732066726f6d203078663233336463656538386665306162650a0a23696e746572616374696f6e20280a202076657273696f6e3a2022312e302e30222c0a097469746c653a202247656e65726963204654205472616e73666572207769746820436f6e7472616374204164647265737320616e64204e616d65222c0a096465736372697074696f6e3a20225472616e7366657220616e792046756e6769626c6520546f6b656e2062792070726f766964696e672074686520636f6e7472616374206164647265737320616e64206e616d65222c0a096c616e67756167653a2022656e2d5553222c0a290a0a2f2f2f2054686973207472616e73616374696f6e206973207768617420616e206163636f756e7420776f756c642072756e0a2f2f2f20746f2073657420697473656c6620757020746f206d616e6167652066756e6769626c6520746f6b656e732e20546869732066756e6374696f6e0a2f2f2f207573657320766965777320746f206b6e6f7720776865726520746f2073657420757020746865207661756c740a2f2f2f20696e2073746f7261676520616e6420746f206372656174652074686520656d707479207661756c742e0a2f2f2f0a2f2f2f2040706172616d20636f6e7472616374416464726573733a205468652061646472657373206f662074686520636f6e74726163740a2f2f2f20202020202020207468617420646566696e65732074686520746f6b656e7320746f20696e697469616c697a650a2f2f2f2040706172616d20636f6e74726163744e616d653a20546865206e616d65206f662074686520636f6e74726163740a2f2f2f20202020202020207468617420646566696e65732074686520746f6b656e7320746f20696e697469616c697a652e2045783a2022466c6f77546f6b656e220a0a7472616e73616374696f6e28636f6e7472616374416464726573733a20416464726573732c20636f6e74726163744e616d653a20537472696e6729207b0a0a2020202070726570617265287369676e65723a2061757468285361766556616c75652c204361706162696c69746965732920264163636f756e7429207b0a20202020202020202f2f20426f72726f772061207265666572656e636520746f20746865207661756c742073746f726564206f6e2074686520706173736564206163636f756e742061742074686520706173736564207075626c6963506174680a20202020202020206c6574207265736f6c766572526566203d206765744163636f756e7428636f6e747261637441646472657373290a2020202020202020202020202e636f6e7472616374732e626f72726f773c267b46756e6769626c65546f6b656e7d3e286e616d653a20636f6e74726163744e616d65290a202020202020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772046756e6769626c65546f6b656e207265666572656e636520746f2074686520636f6e74726163742e204d616b652073757265207468652070726f766964656420636f6e7472616374206e616d652028220a20202020202020202020202020202020202020202020202020202e636f6e63617428636f6e74726163744e616d65292e636f6e63617428222920616e642061646472657373202822292e636f6e63617428636f6e7472616374416464726573732e746f537472696e672829292e636f6e6361742822292061726520636f7272656374212229290a0a20202020202020202f2f205573652074686174207265666572656e636520746f2072657472696576652074686520465456696577200a20202020202020206c65742066745661756c7444617461203d207265736f6c7665725265662e7265736f6c7665436f6e747261637456696577287265736f75726365547970653a206e696c2c2076696577547970653a20547970653c46756e6769626c65546f6b656e4d6574616461746156696577732e46545661756c74446174613e282929206173212046756e6769626c65546f6b656e4d6574616461746156696577732e46545661756c74446174613f0a2020202020202020202020203f3f2070616e69632822436f756c64206e6f74207265736f6c76652046545661756c744461746120766965772e2054686520222e636f6e63617428636f6e74726163744e616d65290a202020202020202020202020202020202e636f6e636174282220636f6e7472616374206e6565647320746f20696d706c656d656e74207468652046545661756c7444617461204d65746164617461207669657720696e206f7264657220746f20657865637574652074686973207472616e73616374696f6e2e2229290a0a20202020202020202f2f204372656174652061206e657720656d707479207661756c74207573696e672074686520637265617465456d7074795661756c742066756e6374696f6e20696e73696465207468652046545661756c74446174610a20202020202020206c657420656d7074795661756c74203c2d66745661756c74446174612e637265617465456d7074795661756c7428290a0a20202020202020202f2f205361766520697420746f20746865206163636f756e740a20202020202020207369676e65722e73746f726167652e73617665283c2d656d7074795661756c742c20746f3a2066745661756c74446174612e73746f7261676550617468290a20202020202020200a20202020202020202f2f204372656174652061207075626c6963206361706162696c69747920666f7220746865207661756c7420776869636820696e636c7564657320746865202e5265736f6c76657220696e746572666163650a20202020202020206c6574207661756c74436170203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c267b46756e6769626c65546f6b656e2e5661756c747d3e2866745661756c74446174612e73746f7261676550617468290a20202020202020207369676e65722e6361706162696c69746965732e7075626c697368287661756c744361702c2061743a2066745661756c74446174612e6d6574616461746150617468290a0a20202020202020202f2f204372656174652061207075626c6963206361706162696c69747920666f7220746865207661756c74206578706f73696e672074686520726563656976657220696e746572666163650a20202020202020206c6574207265636569766572436170203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c267b46756e6769626c65546f6b656e2e52656365697665727d3e2866745661756c74446174612e73746f7261676550617468290a20202020202020207369676e65722e6361706162696c69746965732e7075626c6973682872656365697665724361702c2061743a2066745661756c74446174612e726563656976657250617468290a0a202020207d0a7d0a20f856af7b2274797065223a2241646472657373222c2276616c7565223a22307865343637623964643131666130306466227da57b2276616c7565223a2246696174546f6b656e222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02ad3358af3d0c8cb5b065c867424c5e685ea19ddd2328e9a4c6bcd407d02f143766a0b8f3c7da3cc8a3e5176d5b6d208f2cf9492d5c79db1c64ce0add436fcbbc53657475702046756e6769626c6520546f6b656e205661756c74000201465420436f6e747261637420416464722e000041646472657373000304465420436f6e7472616374204e616d650001",
    "hash": "66a0b8f3c7da3cc8a3e5176d5b6d208f2cf9492d5c79db1c64ce0add436fcbbc"
  },
  {
    "title": "FT.02 - Transfer Fungible Token with Paths",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FungibleToken from 0xf233dcee88fe0abe\n\n#interaction (\n  version: \"1.0.0\",\n\ttitle: \"Generic FT Transfer with Paths\",\n\tdescription: \"Transfer any Fungible Token by providing the paths for the source Vault and destination Vault\",\n\tlanguage: \"en-US\",\n)\n\n/// Can pass in any storage path and receiver path identifier instead of just the default.\n/// This lets you choose the token you want to send as well the capability you want to send it to.\n///\n/// Any token path can be passed as an argument here, so wallets should\n/// should check argument values to make sure the intended token path is passed in\n///\n/// @param amount: The amount of tokens to transfer\n/// @param to: The address to transfer the tokens to\n/// @param senderPathIdentifier: The string identifier of the storage path\n///        where the tokens should be withdrawn from\n/// @param receiverPathIdentifier: The string identifier of the public path\n///        where the tokens should be deposited to\n///\ntransaction(amount: UFix64, to: Address, senderPathIdentifier: String, receiverPathIdentifier: String) {\n\n    // The Vault resource that holds the tokens that are being transferred\n    let tempVault: @{FungibleToken.Vault}\n\n    prepare(signer: auth(BorrowValue) &Account) {\n\n        let storagePath = StoragePath(identifier: senderPathIdentifier)\n            ?? panic(\"Could not construct a storage path from the provided path identifier string.\")\n\n        // Get a reference to the signer's stored vault\n        let vaultRef = signer.storage.borrow<auth(FungibleToken.Withdraw) &{FungibleToken.Provider}>(from: storagePath)\n\t\t\t?? panic(\"The signer does not store a FungibleToken.Provider object at the path \"\n                .concat(storagePath.toString())\n                .concat(\". The signer must initialize their account with this object first!\"))\n\n        self.tempVault <- vaultRef.withdraw(amount: amount)\n\n        assert(\n            self.tempVault.balance == amount,\n            message: \"Error: The Vault to transfer does not have the balance that was requested!\"\n        )\n    }\n\n    execute {\n        let publicPath = PublicPath(identifier: receiverPathIdentifier)\n            ?? panic(\"Could not construct a public path from the provided path identifier string\")\n\n        let recipient = getAccount(to)\n        let receiverRef = recipient.capabilities.borrow<&{FungibleToken.Receiver}>(publicPath)\n            ?? panic(\"Could not borrow a Receiver reference to the FungibleToken Vault in account \"\n                .concat(to.toString()).concat(\" at path \").concat(publicPath.toString())\n                .concat(\". Make sure you are sending to an address that has \")\n                .concat(\"a FungibleToken Vault set up properly at the specified path.\"))\n\n        // Transfer tokens from the signer's stored vault to the receiver capability\n        receiverRef.deposit(from: <-self.tempVault)\n    }\n}",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        },
        {
          "value": "0xe467b9dd11fa00df",
          "type": "Address"
        },
        {
          "value": "flowTokenVault",
          "type": "String"
        },
        {
          "value": "flowTokenReceiver",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FungibleToken from 0xf233dcee88fe0abe\n\n#interaction (\n  version: \"1.0.0\",\n\ttitle: \"Generic FT Transfer with Paths\",\n\tdescription: \"Transfer any Fungible Token by providing the paths for the source Vault and destination Vault\",\n\tlanguage: \"en-US\",\n)\n\n/// Can pass in any storage path and receiver path identifier instead of just the default.\n/// This lets you choose the token you want to send as well the capability you want to send it to.\n///\n/// Any token path can be passed as an argument here, so wallets should\n/// should check argument values to make sure the intended token path is passed in\n///\n/// @param amount: The amount of tokens to transfer\n/// @param to: The address to transfer the tokens to\n/// @param senderPathIdentifier: The string identifier of the storage path\n///        where the tokens should be withdrawn from\n/// @param receiverPathIdentifier: The string identifier of the public path\n///        where the tokens should be deposited to\n///\ntransaction(amount: UFix64, to: Address, senderPathIdentifier: String, receiverPathIdentifier: String) {\n\n    // The Vault resource that holds the tokens that are being transferred\n    let tempVault: @{FungibleToken.Vault}\n\n    prepare(signer: auth(BorrowValue) &Account) {\n\n        let storagePath = StoragePath(identifier: senderPathIdentifier)\n            ?? panic(\"Could not construct a storage path from the provided path identifier string.\")\n\n        // Get a reference to the signer's stored vault\n        let vaultRef = signer.storage.borrow<auth(FungibleToken.Withdraw) &{FungibleToken.Provider}>(from: storagePath)\n\t\t\t?? panic(\"The signer does not store a FungibleToken.Provider object at the path \"\n                .concat(storagePath.toString())\n                .concat(\". The signer must initialize their account with this object first!\"))\n\n        self.tempVault <- vaultRef.withdraw(amount: amount)\n\n        assert(\n            self.tempVault.balance == amount,\n            message: \"Error: The Vault to transfer does not have the balance that was requested!\"\n        )\n    }\n\n    execute {\n        let publicPath = PublicPath(identifier: receiverPathIdentifier)\n            ?? panic(\"Could not construct a public path from the provided path identifier string\")\n\n        let recipient = getAccount(to)\n        let receiverRef = recipient.capabilities.borrow<&{FungibleToken.Receiver}>(publicPath)\n            ?? panic(\"Could not borrow a Receiver reference to the FungibleToken Vault in account \"\n                .concat(to.toString()).concat(\" at path \").concat(publicPath.toString())\n                .concat(\". Make sure you are sending to an address that has \")\n                .concat(\"a FungibleToken Vault set up properly at the specified path.\"))\n\n        // Transfer tokens from the signer's stored vault to the receiver capability\n        receiverRef.deposit(from: <-self.tempVault)\n    }\n}",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        },
        {
          "value": "0xe467b9dd11fa00df",
          "type": "Address"
        },
        {
          "value": "flowTokenVault",
          "type": "String"
        },
        {
          "value": "flowTokenReceiver",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90c47b90b48696d706f72742046756e6769626c65546f6b656e2066726f6d203078663233336463656538386665306162650a0a23696e746572616374696f6e20280a202076657273696f6e3a2022312e302e30222c0a097469746c653a202247656e65726963204654205472616e736665722077697468205061746873222c0a096465736372697074696f6e3a20225472616e7366657220616e792046756e6769626c6520546f6b656e2062792070726f766964696e672074686520706174687320666f722074686520736f75726365205661756c7420616e642064657374696e6174696f6e205661756c74222c0a096c616e67756167653a2022656e2d5553222c0a290a0a2f2f2f2043616e207061737320696e20616e792073746f72616765207061746820616e642072656365697665722070617468206964656e74696669657220696e7374656164206f66206a757374207468652064656661756c742e0a2f2f2f2054686973206c65747320796f752063686f6f73652074686520746f6b656e20796f752077616e7420746f2073656e642061732077656c6c20746865206361706162696c69747920796f752077616e7420746f2073656e6420697420746f2e0a2f2f2f0a2f2f2f20416e7920746f6b656e20706174682063616e2062652070617373656420617320616e20617267756d656e7420686572652c20736f2077616c6c6574732073686f756c640a2f2f2f2073686f756c6420636865636b20617267756d656e742076616c75657320746f206d616b6520737572652074686520696e74656e64656420746f6b656e20706174682069732070617373656420696e0a2f2f2f0a2f2f2f2040706172616d20616d6f756e743a2054686520616d6f756e74206f6620746f6b656e7320746f207472616e736665720a2f2f2f2040706172616d20746f3a20546865206164647265737320746f207472616e736665722074686520746f6b656e7320746f0a2f2f2f2040706172616d2073656e646572506174684964656e7469666965723a2054686520737472696e67206964656e746966696572206f66207468652073746f7261676520706174680a2f2f2f202020202020202077686572652074686520746f6b656e732073686f756c642062652077697468647261776e2066726f6d0a2f2f2f2040706172616d207265636569766572506174684964656e7469666965723a2054686520737472696e67206964656e746966696572206f6620746865207075626c696320706174680a2f2f2f202020202020202077686572652074686520746f6b656e732073686f756c64206265206465706f736974656420746f0a2f2f2f0a7472616e73616374696f6e28616d6f756e743a205546697836342c20746f3a20416464726573732c2073656e646572506174684964656e7469666965723a20537472696e672c207265636569766572506174684964656e7469666965723a20537472696e6729207b0a0a202020202f2f20546865205661756c74207265736f75726365207468617420686f6c64732074686520746f6b656e73207468617420617265206265696e67207472616e736665727265640a202020206c65742074656d705661756c743a20407b46756e6769626c65546f6b656e2e5661756c747d0a0a2020202070726570617265287369676e65723a206175746828426f72726f7756616c75652920264163636f756e7429207b0a0a20202020202020206c65742073746f7261676550617468203d2053746f7261676550617468286964656e7469666965723a2073656e646572506174684964656e746966696572290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420636f6e73747275637420612073746f7261676520706174682066726f6d207468652070726f76696465642070617468206964656e74696669657220737472696e672e22290a0a20202020202020202f2f204765742061207265666572656e636520746f20746865207369676e657227732073746f726564207661756c740a20202020202020206c6574207661756c74526566203d207369676e65722e73746f726167652e626f72726f773c617574682846756e6769626c65546f6b656e2e57697468647261772920267b46756e6769626c65546f6b656e2e50726f76696465727d3e2866726f6d3a2073746f7261676550617468290a0909093f3f2070616e69632822546865207369676e657220646f6573206e6f742073746f726520612046756e6769626c65546f6b656e2e50726f7669646572206f626a65637420617420746865207061746820220a202020202020202020202020202020202e636f6e6361742873746f72616765506174682e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222e20546865207369676e6572206d75737420696e697469616c697a65207468656972206163636f756e7420776974682074686973206f626a656374206669727374212229290a0a202020202020202073656c662e74656d705661756c74203c2d207661756c745265662e776974686472617728616d6f756e743a20616d6f756e74290a0a2020202020202020617373657274280a20202020202020202020202073656c662e74656d705661756c742e62616c616e6365203d3d20616d6f756e742c0a2020202020202020202020206d6573736167653a20224572726f723a20546865205661756c7420746f207472616e7366657220646f6573206e6f742068617665207468652062616c616e63652074686174207761732072657175657374656421220a2020202020202020290a202020207d0a0a2020202065786563757465207b0a20202020202020206c6574207075626c696350617468203d205075626c696350617468286964656e7469666965723a207265636569766572506174684964656e746966696572290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420636f6e7374727563742061207075626c696320706174682066726f6d207468652070726f76696465642070617468206964656e74696669657220737472696e6722290a0a20202020202020206c657420726563697069656e74203d206765744163636f756e7428746f290a20202020202020206c6574207265636569766572526566203d20726563697069656e742e6361706162696c69746965732e626f72726f773c267b46756e6769626c65546f6b656e2e52656365697665727d3e287075626c696350617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061205265636569766572207265666572656e636520746f207468652046756e6769626c65546f6b656e205661756c7420696e206163636f756e7420220a202020202020202020202020202020202e636f6e63617428746f2e746f537472696e672829292e636f6e636174282220617420706174682022292e636f6e636174287075626c6963506174682e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222e204d616b65207375726520796f75206172652073656e64696e6720746f20616e20616464726573732074686174206861732022290a202020202020202020202020202020202e636f6e6361742822612046756e6769626c65546f6b656e205661756c74207365742075702070726f7065726c79206174207468652073706563696669656420706174682e2229290a0a20202020202020202f2f205472616e7366657220746f6b656e732066726f6d20746865207369676e657227732073746f726564207661756c7420746f20746865207265636569766572206361706162696c6974790a202020202020202072656365697665725265662e6465706f7369742866726f6d3a203c2d73656c662e74656d705661756c74290a202020207d0a7df8bab07b2274797065223a22554669783634222c2276616c7565223a2239323233333732303336382e3534373735383038227daf7b2276616c7565223a22307865343637623964643131666130306466222c2274797065223a2241646472657373227daa7b2276616c7565223a22666c6f77546f6b656e5661756c74222c2274797065223a22537472696e67227dad7b2276616c7565223a22666c6f77546f6b656e5265636569766572222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90c4bf90c47b90b48696d706f72742046756e6769626c65546f6b656e2066726f6d203078663233336463656538386665306162650a0a23696e746572616374696f6e20280a202076657273696f6e3a2022312e302e30222c0a097469746c653a202247656e65726963204654205472616e736665722077697468205061746873222c0a096465736372697074696f6e3a20225472616e7366657220616e792046756e6769626c6520546f6b656e2062792070726f766964696e672074686520706174687320666f722074686520736f75726365205661756c7420616e642064657374696e6174696f6e205661756c74222c0a096c616e67756167653a2022656e2d5553222c0a290a0a2f2f2f2043616e207061737320696e20616e792073746f72616765207061746820616e642072656365697665722070617468206964656e74696669657220696e7374656164206f66206a757374207468652064656661756c742e0a2f2f2f2054686973206c65747320796f752063686f6f73652074686520746f6b656e20796f752077616e7420746f2073656e642061732077656c6c20746865206361706162696c69747920796f752077616e7420746f2073656e6420697420746f2e0a2f2f2f0a2f2f2f20416e7920746f6b656e20706174682063616e2062652070617373656420617320616e20617267756d656e7420686572652c20736f2077616c6c6574732073686f756c640a2f2f2f2073686f756c6420636865636b20617267756d656e742076616c75657320746f206d616b6520737572652074686520696e74656e64656420746f6b656e20706174682069732070617373656420696e0a2f2f2f0a2f2f2f2040706172616d20616d6f756e743a2054686520616d6f756e74206f6620746f6b656e7320746f207472616e736665720a2f2f2f2040706172616d20746f3a20546865206164647265737320746f207472616e736665722074686520746f6b656e7320746f0a2f2f2f2040706172616d2073656e646572506174684964656e7469666965723a2054686520737472696e67206964656e746966696572206f66207468652073746f7261676520706174680a2f2f2f202020202020202077686572652074686520746f6b656e732073686f756c642062652077697468647261776e2066726f6d0a2f2f2f2040706172616d207265636569766572506174684964656e7469666965723a2054686520737472696e67206964656e746966696572206f6620746865207075626c696320706174680a2f2f2f202020202020202077686572652074686520746f6b656e732073686f756c64206265206465706f736974656420746f0a2f2f2f0a7472616e73616374696f6e28616d6f756e743a205546697836342c20746f3a20416464726573732c2073656e646572506174684964656e7469666965723a20537472696e672c207265636569766572506174684964656e7469666965723a20537472696e6729207b0a0a202020202f2f20546865205661756c74207265736f75726365207468617420686f6c64732074686520746f6b656e73207468617420617265206265696e67207472616e736665727265640a202020206c65742074656d705661756c743a20407b46756e6769626c65546f6b656e2e5661756c747d0a0a2020202070726570617265287369676e65723a206175746828426f72726f7756616c75652920264163636f756e7429207b0a0a20202020202020206c65742073746f7261676550617468203d2053746f7261676550617468286964656e7469666965723a2073656e646572506174684964656e746966696572290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420636f6e73747275637420612073746f7261676520706174682066726f6d207468652070726f76696465642070617468206964656e74696669657220737472696e672e22290a0a20202020202020202f2f204765742061207265666572656e636520746f20746865207369676e657227732073746f726564207661756c740a20202020202020206c6574207661756c74526566203d207369676e65722e73746f726167652e626f72726f773c617574682846756e6769626c65546f6b656e2e57697468647261772920267b46756e6769626c65546f6b656e2e50726f76696465727d3e2866726f6d3a2073746f7261676550617468290a0909093f3f2070616e69632822546865207369676e657220646f6573206e6f742073746f726520612046756e6769626c65546f6b656e2e50726f7669646572206f626a65637420617420746865207061746820220a202020202020202020202020202020202e636f6e6361742873746f72616765506174682e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222e20546865207369676e6572206d75737420696e697469616c697a65207468656972206163636f756e7420776974682074686973206f626a656374206669727374212229290a0a202020202020202073656c662e74656d705661756c74203c2d207661756c745265662e776974686472617728616d6f756e743a20616d6f756e74290a0a2020202020202020617373657274280a20202020202020202020202073656c662e74656d705661756c742e62616c616e6365203d3d20616d6f756e742c0a2020202020202020202020206d6573736167653a20224572726f723a20546865205661756c7420746f207472616e7366657220646f6573206e6f742068617665207468652062616c616e63652074686174207761732072657175657374656421220a2020202020202020290a202020207d0a0a2020202065786563757465207b0a20202020202020206c6574207075626c696350617468203d205075626c696350617468286964656e7469666965723a207265636569766572506174684964656e746966696572290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420636f6e7374727563742061207075626c696320706174682066726f6d207468652070726f76696465642070617468206964656e74696669657220737472696e6722290a0a20202020202020206c657420726563697069656e74203d206765744163636f756e7428746f290a20202020202020206c6574207265636569766572526566203d20726563697069656e742e6361706162696c69746965732e626f72726f773c267b46756e6769626c65546f6b656e2e52656365697665727d3e287075626c696350617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f772061205265636569766572207265666572656e636520746f207468652046756e6769626c65546f6b656e205661756c7420696e206163636f756e7420220a202020202020202020202020202020202e636f6e63617428746f2e746f537472696e672829292e636f6e636174282220617420706174682022292e636f6e636174287075626c6963506174682e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222e204d616b65207375726520796f75206172652073656e64696e6720746f20616e20616464726573732074686174206861732022290a202020202020202020202020202020202e636f6e6361742822612046756e6769626c65546f6b656e205661756c74207365742075702070726f7065726c79206174207468652073706563696669656420706174682e2229290a0a20202020202020202f2f205472616e7366657220746f6b656e732066726f6d20746865207369676e657227732073746f726564207661756c7420746f20746865207265636569766572206361706162696c6974790a202020202020202072656365697665725265662e6465706f7369742866726f6d3a203c2d73656c662e74656d705661756c74290a202020207d0a7df8bab07b2274797065223a22554669783634222c2276616c7565223a2239323233333732303336382e3534373735383038227daf7b2276616c7565223a22307865343637623964643131666130306466222c2274797065223a2241646472657373227daa7b2276616c7565223a22666c6f77546f6b656e5661756c74222c2274797065223a22537472696e67227dad7b2276616c7565223a22666c6f77546f6b656e5265636569766572222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02da19323afcfcbb95f38c66d4c11ce024cddf037dbb6889929fa998fc95b5f8b44c5f45fb6b2c2fbd3279d9dd56e044cb95be908b2dedbe30c2b444d50575df7f5472616e736665722046756e6769626c6520546f6b656e2077697468205061746873000401416d6f756e740000554669783634000301526563697069656e7400014164647265737300030453656e2e20436f6c6c20506174682049640002045265632e20436f6c6c20506174682049640003",
    "hash": "4c5f45fb6b2c2fbd3279d9dd56e044cb95be908b2dedbe30c2b444d50575df7f"
  },
  {
    "title": "FT.03 - Transfer Fungible Token with Address",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FungibleToken from 0xf233dcee88fe0abe\nimport FungibleTokenMetadataViews from 0xf233dcee88fe0abe\n\n#interaction (\n  version: \"1.0.0\",\n\ttitle: \"Generic FT Transfer with Contract Address and Name\",\n\tdescription: \"Transfer any Fungible Token by providing the contract address and name\",\n\tlanguage: \"en-US\",\n)\n\n/// Can pass in any contract address and name to transfer a token from that contract\n/// This lets you choose the token you want to send\n///\n/// Any contract can be chosen here, so wallets should check argument values\n/// to make sure the intended token contract name and address is passed in\n/// Contracts that are used must implement the FTVaultData Metadata View\n///\n/// Note: This transaction only will work for Fungible Tokens that\n///       have their token's resource name set as \"Vault\".\n///       Tokens with other names will need to use a different transaction\n///       that additionally specifies the identifier\n///\n/// @param amount: The amount of tokens to transfer\n/// @param to: The address to transfer the tokens to\n/// @param contractAddress: The address of the contract that defines the tokens being transferred\n/// @param contractName: The name of the contract that defines the tokens being transferred. Ex: \"FlowToken\"\n///\ntransaction(amount: UFix64, to: Address, contractAddress: Address, contractName: String) {\n\n    // The Vault resource that holds the tokens that are being transferred\n    let tempVault: @{FungibleToken.Vault}\n\n    // FTVaultData struct to get paths from\n    let vaultData: FungibleTokenMetadataViews.FTVaultData\n\n    prepare(signer: auth(BorrowValue) &Account) {\n\n        // Borrow a reference to the vault stored on the passed account at the passed publicPath\n        let resolverRef = getAccount(contractAddress)\n            .contracts.borrow<&{FungibleToken}>(name: contractName)\n                ?? panic(\"Could not borrow FungibleToken reference to the contract. Make sure the provided contract name (\"\n                          .concat(contractName).concat(\") and address (\").concat(contractAddress.toString()).concat(\") are correct!\"))\n\n        // Use that reference to retrieve the FTView \n        self.vaultData = resolverRef.resolveContractView(resourceType: nil, viewType: Type<FungibleTokenMetadataViews.FTVaultData>()) as! FungibleTokenMetadataViews.FTVaultData?\n            ?? panic(\"Could not resolve FTVaultData view. The \".concat(contractName)\n                .concat(\" contract needs to implement the FTVaultData Metadata view in order to execute this transaction.\"))\n\n        // Get a reference to the signer's stored vault\n        let vaultRef = signer.storage.borrow<auth(FungibleToken.Withdraw) &{FungibleToken.Provider}>(from: self.vaultData.storagePath)\n\t\t\t?? panic(\"The signer does not store a FungibleToken.Provider object at the path \"\n                .concat(self.vaultData.storagePath.toString()).concat(\"For the \").concat(contractName)\n                .concat(\" contract at address \").concat(contractAddress.toString())\n                .concat(\". The signer must initialize their account with this object first!\"))\n\n        self.tempVault <- vaultRef.withdraw(amount: amount)\n\n        // Get the string representation of the address without the 0x\n        var addressString = contractAddress.toString()\n        if addressString.length == 18 {\n            addressString = addressString.slice(from: 2, upTo: 18)\n        }\n        let typeString: String = \"A.\".concat(addressString).concat(\".\").concat(contractName).concat(\".Vault\")\n        let type = CompositeType(typeString)\n        assert(\n            type != nil,\n            message: \"Could not create a type out of the contract name and address!\"\n        )\n\n        assert(\n            self.tempVault.getType() == type!,\n            message: \"The Vault that was withdrawn to transfer is not the type that was requested!\"\n        )\n    }\n\n    execute {\n        let recipient = getAccount(to)\n        let receiverRef = recipient.capabilities.borrow<&{FungibleToken.Receiver}>(self.vaultData.receiverPath)\n            ?? panic(\"Could not borrow a Receiver reference to the FungibleToken Vault in account \"\n                .concat(to.toString()).concat(\" at path \").concat(self.vaultData.receiverPath.toString())\n                .concat(\". Make sure you are sending to an address that has \")\n                .concat(\"a FungibleToken Vault set up properly at the specified path.\"))\n\n        // Transfer tokens from the signer's stored vault to the receiver capability\n        receiverRef.deposit(from: <-self.tempVault)\n    }\n}",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        },
        {
          "value": "0xe467b9dd11fa00df",
          "type": "Address"
        },
        {
          "value": "0xe467b9dd11fa00df",
          "type": "Address"
        },
        {
          "value": "FiatToken",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FungibleToken from 0xf233dcee88fe0abe\nimport FungibleTokenMetadataViews from 0xf233dcee88fe0abe\n\n#interaction (\n  version: \"1.0.0\",\n\ttitle: \"Generic FT Transfer with Contract Address and Name\",\n\tdescription: \"Transfer any Fungible Token by providing the contract address and name\",\n\tlanguage: \"en-US\",\n)\n\n/// Can pass in any contract address and name to transfer a token from that contract\n/// This lets you choose the token you want to send\n///\n/// Any contract can be chosen here, so wallets should check argument values\n/// to make sure the intended token contract name and address is passed in\n/// Contracts that are used must implement the FTVaultData Metadata View\n///\n/// Note: This transaction only will work for Fungible Tokens that\n///       have their token's resource name set as \"Vault\".\n///       Tokens with other names will need to use a different transaction\n///       that additionally specifies the identifier\n///\n/// @param amount: The amount of tokens to transfer\n/// @param to: The address to transfer the tokens to\n/// @param contractAddress: The address of the contract that defines the tokens being transferred\n/// @param contractName: The name of the contract that defines the tokens being transferred. Ex: \"FlowToken\"\n///\ntransaction(amount: UFix64, to: Address, contractAddress: Address, contractName: String) {\n\n    // The Vault resource that holds the tokens that are being transferred\n    let tempVault: @{FungibleToken.Vault}\n\n    // FTVaultData struct to get paths from\n    let vaultData: FungibleTokenMetadataViews.FTVaultData\n\n    prepare(signer: auth(BorrowValue) &Account) {\n\n        // Borrow a reference to the vault stored on the passed account at the passed publicPath\n        let resolverRef = getAccount(contractAddress)\n            .contracts.borrow<&{FungibleToken}>(name: contractName)\n                ?? panic(\"Could not borrow FungibleToken reference to the contract. Make sure the provided contract name (\"\n                          .concat(contractName).concat(\") and address (\").concat(contractAddress.toString()).concat(\") are correct!\"))\n\n        // Use that reference to retrieve the FTView \n        self.vaultData = resolverRef.resolveContractView(resourceType: nil, viewType: Type<FungibleTokenMetadataViews.FTVaultData>()) as! FungibleTokenMetadataViews.FTVaultData?\n            ?? panic(\"Could not resolve FTVaultData view. The \".concat(contractName)\n                .concat(\" contract needs to implement the FTVaultData Metadata view in order to execute this transaction.\"))\n\n        // Get a reference to the signer's stored vault\n        let vaultRef = signer.storage.borrow<auth(FungibleToken.Withdraw) &{FungibleToken.Provider}>(from: self.vaultData.storagePath)\n\t\t\t?? panic(\"The signer does not store a FungibleToken.Provider object at the path \"\n                .concat(self.vaultData.storagePath.toString()).concat(\"For the \").concat(contractName)\n                .concat(\" contract at address \").concat(contractAddress.toString())\n                .concat(\". The signer must initialize their account with this object first!\"))\n\n        self.tempVault <- vaultRef.withdraw(amount: amount)\n\n        // Get the string representation of the address without the 0x\n        var addressString = contractAddress.toString()\n        if addressString.length == 18 {\n            addressString = addressString.slice(from: 2, upTo: 18)\n        }\n        let typeString: String = \"A.\".concat(addressString).concat(\".\").concat(contractName).concat(\".Vault\")\n        let type = CompositeType(typeString)\n        assert(\n            type != nil,\n            message: \"Could not create a type out of the contract name and address!\"\n        )\n\n        assert(\n            self.tempVault.getType() == type!,\n            message: \"The Vault that was withdrawn to transfer is not the type that was requested!\"\n        )\n    }\n\n    execute {\n        let recipient = getAccount(to)\n        let receiverRef = recipient.capabilities.borrow<&{FungibleToken.Receiver}>(self.vaultData.receiverPath)\n            ?? panic(\"Could not borrow a Receiver reference to the FungibleToken Vault in account \"\n                .concat(to.toString()).concat(\" at path \").concat(self.vaultData.receiverPath.toString())\n                .concat(\". Make sure you are sending to an address that has \")\n                .concat(\"a FungibleToken Vault set up properly at the specified path.\"))\n\n        // Transfer tokens from the signer's stored vault to the receiver capability\n        receiverRef.deposit(from: <-self.tempVault)\n    }\n}",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        },
        {
          "value": "0xe467b9dd11fa00df",
          "type": "Address"
        },
        {
          "value": "0xe467b9dd11fa00df",
          "type": "Address"
        },
        {
          "value": "FiatToken",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "",
    "encodedTransactionEnvelopeHex": "",
    "metadata": "02a4719694e328bba797b67da2d984427a5f2050145fa0f2ad8afb4f8e6150721991672738d5ea84c59c78096da25179186288ae2de2116b7f8928d594695bebf65472616e736665722046756e6769626c6520546f6b656e20776974682041646472000401416d6f756e740000554669783634000301526563697069656e74000141646472657373000301465420436f6e747261637420416464722e000241646472657373000304465420436f6e7472616374204e616d650003",
    "hash": "91672738d5ea84c59c78096da25179186288ae2de2116b7f8928d594695bebf6"
  },
  {
    "title": "NFT.01 - Setup NFT Collection",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import NonFungibleToken from 0x1d7e57aa55817448\nimport MetadataViews from 0x1d7e57aa55817448\n\n#interaction (\n  version: \"1.0.0\",\n\ttitle: \"Generic FT Transfer with Contract Address and Name\",\n\tdescription: \"Transfer any Fungible Token by providing the contract address and name\",\n\tlanguage: \"en-US\",\n)\n\n/// This transaction is what an account would run\n/// to set itself up to receive NFTs. This function\n/// uses views to know where to set up the collection\n/// in storage and to create the empty collection.\n///\n/// @param contractAddress: The address of the contract that defines the token being initialized\n/// @param contractName: The name of the contract that defines the token being initialized. Ex: \"ExampleNFT\"\n\ntransaction(contractAddress: Address, contractName: String) {\n\n    prepare(signer: auth(IssueStorageCapabilityController, PublishCapability, SaveValue) &Account) {\n        // Borrow a reference to the nft contract deployed to the passed account\n        let resolverRef = getAccount(contractAddress)\n            .contracts.borrow<&{NonFungibleToken}>(name: contractName)\n                ?? panic(\"Could not borrow NonFungibleToken reference to the contract. Make sure the provided contract name (\"\n                         .concat(contractName).concat(\") and address (\").concat(contractAddress.toString()).concat(\") are correct!\"))\n\n        // Use that reference to retrieve the NFTCollectionData view \n        let collectionData = resolverRef.resolveContractView(resourceType: nil, viewType: Type<MetadataViews.NFTCollectionData>()) as! MetadataViews.NFTCollectionData?\n            ?? panic(\"Could not resolve NFTCollectionData view. The \".concat(contractName).concat(\" contract needs to implement the NFTCollectionData Metadata view in order to execute this transaction\"))\n\n        // Create a new empty collections\n        let emptyCollection <- collectionData.createEmptyCollection()\n\n        // save it to the account\n        signer.storage.save(<-emptyCollection, to: collectionData.storagePath)\n\n        // create a public capability for the collection\n        let collectionCap = signer.capabilities.storage.issue<&{NonFungibleToken.Collection}>(\n                collectionData.storagePath\n            )\n        signer.capabilities.publish(collectionCap, at: collectionData.publicPath)\n    }\n}\n",
      "arguments": [
        {
          "type": "Address",
          "value": "0xe467b9dd11fa00df"
        },
        {
          "value": "TopShot",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import NonFungibleToken from 0x1d7e57aa55817448\nimport MetadataViews from 0x1d7e57aa55817448\n\n#interaction (\n  version: \"1.0.0\",\n\ttitle: \"Generic FT Transfer with Contract Address and Name\",\n\tdescription: \"Transfer any Fungible Token by providing the contract address and name\",\n\tlanguage: \"en-US\",\n)\n\n/// This transaction is what an account would run\n/// to set itself up to receive NFTs. This function\n/// uses views to know where to set up the collection\n/// in storage and to create the empty collection.\n///\n/// @param contractAddress: The address of the contract that defines the token being initialized\n/// @param contractName: The name of the contract that defines the token being initialized. Ex: \"ExampleNFT\"\n\ntransaction(contractAddress: Address, contractName: String) {\n\n    prepare(signer: auth(IssueStorageCapabilityController, PublishCapability, SaveValue) &Account) {\n        // Borrow a reference to the nft contract deployed to the passed account\n        let resolverRef = getAccount(contractAddress)\n            .contracts.borrow<&{NonFungibleToken}>(name: contractName)\n                ?? panic(\"Could not borrow NonFungibleToken reference to the contract. Make sure the provided contract name (\"\n                         .concat(contractName).concat(\") and address (\").concat(contractAddress.toString()).concat(\") are correct!\"))\n\n        // Use that reference to retrieve the NFTCollectionData view \n        let collectionData = resolverRef.resolveContractView(resourceType: nil, viewType: Type<MetadataViews.NFTCollectionData>()) as! MetadataViews.NFTCollectionData?\n            ?? panic(\"Could not resolve NFTCollectionData view. The \".concat(contractName).concat(\" contract needs to implement the NFTCollectionData Metadata view in order to execute this transaction\"))\n\n        // Create a new empty collections\n        let emptyCollection <- collectionData.createEmptyCollection()\n\n        // save it to the account\n        signer.storage.save(<-emptyCollection, to: collectionData.storagePath)\n\n        // create a public capability for the collection\n        let collectionCap = signer.capabilities.storage.issue<&{NonFungibleToken.Collection}>(\n                collectionData.storagePath\n            )\n        signer.capabilities.publish(collectionCap, at: collectionData.publicPath)\n    }\n}\n",
      "arguments": [
        {
          "type": "Address",
          "value": "0xe467b9dd11fa00df"
        },
        {
          "value": "TopShot",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f909aab90911696d706f7274204e6f6e46756e6769626c65546f6b656e2066726f6d203078316437653537616135353831373434380a696d706f7274204d6574616461746156696577732066726f6d203078316437653537616135353831373434380a0a23696e746572616374696f6e20280a202076657273696f6e3a2022312e302e30222c0a097469746c653a202247656e65726963204654205472616e73666572207769746820436f6e7472616374204164647265737320616e64204e616d65222c0a096465736372697074696f6e3a20225472616e7366657220616e792046756e6769626c6520546f6b656e2062792070726f766964696e672074686520636f6e7472616374206164647265737320616e64206e616d65222c0a096c616e67756167653a2022656e2d5553222c0a290a0a2f2f2f2054686973207472616e73616374696f6e206973207768617420616e206163636f756e7420776f756c642072756e0a2f2f2f20746f2073657420697473656c6620757020746f2072656365697665204e4654732e20546869732066756e6374696f6e0a2f2f2f207573657320766965777320746f206b6e6f7720776865726520746f207365742075702074686520636f6c6c656374696f6e0a2f2f2f20696e2073746f7261676520616e6420746f206372656174652074686520656d70747920636f6c6c656374696f6e2e0a2f2f2f0a2f2f2f2040706172616d20636f6e7472616374416464726573733a205468652061646472657373206f662074686520636f6e7472616374207468617420646566696e65732074686520746f6b656e206265696e6720696e697469616c697a65640a2f2f2f2040706172616d20636f6e74726163744e616d653a20546865206e616d65206f662074686520636f6e7472616374207468617420646566696e65732074686520746f6b656e206265696e6720696e697469616c697a65642e2045783a20224578616d706c654e4654220a0a7472616e73616374696f6e28636f6e7472616374416464726573733a20416464726573732c20636f6e74726163744e616d653a20537472696e6729207b0a0a2020202070726570617265287369676e65723a206175746828497373756553746f726167654361706162696c697479436f6e74726f6c6c65722c205075626c6973684361706162696c6974792c205361766556616c75652920264163636f756e7429207b0a20202020202020202f2f20426f72726f772061207265666572656e636520746f20746865206e667420636f6e7472616374206465706c6f79656420746f2074686520706173736564206163636f756e740a20202020202020206c6574207265736f6c766572526566203d206765744163636f756e7428636f6e747261637441646472657373290a2020202020202020202020202e636f6e7472616374732e626f72726f773c267b4e6f6e46756e6769626c65546f6b656e7d3e286e616d653a20636f6e74726163744e616d65290a202020202020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f77204e6f6e46756e6769626c65546f6b656e207265666572656e636520746f2074686520636f6e74726163742e204d616b652073757265207468652070726f766964656420636f6e7472616374206e616d652028220a202020202020202020202020202020202020202020202020202e636f6e63617428636f6e74726163744e616d65292e636f6e63617428222920616e642061646472657373202822292e636f6e63617428636f6e7472616374416464726573732e746f537472696e672829292e636f6e6361742822292061726520636f7272656374212229290a0a20202020202020202f2f205573652074686174207265666572656e636520746f20726574726965766520746865204e4654436f6c6c656374696f6e446174612076696577200a20202020202020206c657420636f6c6c656374696f6e44617461203d207265736f6c7665725265662e7265736f6c7665436f6e747261637456696577287265736f75726365547970653a206e696c2c2076696577547970653a20547970653c4d6574616461746156696577732e4e4654436f6c6c656374696f6e446174613e28292920617321204d6574616461746156696577732e4e4654436f6c6c656374696f6e446174613f0a2020202020202020202020203f3f2070616e69632822436f756c64206e6f74207265736f6c7665204e4654436f6c6c656374696f6e4461746120766965772e2054686520222e636f6e63617428636f6e74726163744e616d65292e636f6e636174282220636f6e7472616374206e6565647320746f20696d706c656d656e7420746865204e4654436f6c6c656374696f6e44617461204d65746164617461207669657720696e206f7264657220746f20657865637574652074686973207472616e73616374696f6e2229290a0a20202020202020202f2f204372656174652061206e657720656d70747920636f6c6c656374696f6e730a20202020202020206c657420656d707479436f6c6c656374696f6e203c2d20636f6c6c656374696f6e446174612e637265617465456d707479436f6c6c656374696f6e28290a0a20202020202020202f2f207361766520697420746f20746865206163636f756e740a20202020202020207369676e65722e73746f726167652e73617665283c2d656d707479436f6c6c656374696f6e2c20746f3a20636f6c6c656374696f6e446174612e73746f7261676550617468290a0a20202020202020202f2f206372656174652061207075626c6963206361706162696c69747920666f722074686520636f6c6c656374696f6e0a20202020202020206c657420636f6c6c656374696f6e436170203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c267b4e6f6e46756e6769626c65546f6b656e2e436f6c6c656374696f6e7d3e280a20202020202020202020202020202020636f6c6c656374696f6e446174612e73746f72616765506174680a202020202020202020202020290a20202020202020207369676e65722e6361706162696c69746965732e7075626c69736828636f6c6c656374696f6e4361702c2061743a20636f6c6c656374696f6e446174612e7075626c696350617468290a202020207d0a7d0af854af7b2274797065223a2241646472657373222c2276616c7565223a22307865343637623964643131666130306466227da37b2276616c7565223a22546f7053686f74222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f909aef909aab90911696d706f7274204e6f6e46756e6769626c65546f6b656e2066726f6d203078316437653537616135353831373434380a696d706f7274204d6574616461746156696577732066726f6d203078316437653537616135353831373434380a0a23696e746572616374696f6e20280a202076657273696f6e3a2022312e302e30222c0a097469746c653a202247656e65726963204654205472616e73666572207769746820436f6e7472616374204164647265737320616e64204e616d65222c0a096465736372697074696f6e3a20225472616e7366657220616e792046756e6769626c6520546f6b656e2062792070726f766964696e672074686520636f6e7472616374206164647265737320616e64206e616d65222c0a096c616e67756167653a2022656e2d5553222c0a290a0a2f2f2f2054686973207472616e73616374696f6e206973207768617420616e206163636f756e7420776f756c642072756e0a2f2f2f20746f2073657420697473656c6620757020746f2072656365697665204e4654732e20546869732066756e6374696f6e0a2f2f2f207573657320766965777320746f206b6e6f7720776865726520746f207365742075702074686520636f6c6c656374696f6e0a2f2f2f20696e2073746f7261676520616e6420746f206372656174652074686520656d70747920636f6c6c656374696f6e2e0a2f2f2f0a2f2f2f2040706172616d20636f6e7472616374416464726573733a205468652061646472657373206f662074686520636f6e7472616374207468617420646566696e65732074686520746f6b656e206265696e6720696e697469616c697a65640a2f2f2f2040706172616d20636f6e74726163744e616d653a20546865206e616d65206f662074686520636f6e7472616374207468617420646566696e65732074686520746f6b656e206265696e6720696e697469616c697a65642e2045783a20224578616d706c654e4654220a0a7472616e73616374696f6e28636f6e7472616374416464726573733a20416464726573732c20636f6e74726163744e616d653a20537472696e6729207b0a0a2020202070726570617265287369676e65723a206175746828497373756553746f726167654361706162696c697479436f6e74726f6c6c65722c205075626c6973684361706162696c6974792c205361766556616c75652920264163636f756e7429207b0a20202020202020202f2f20426f72726f772061207265666572656e636520746f20746865206e667420636f6e7472616374206465706c6f79656420746f2074686520706173736564206163636f756e740a20202020202020206c6574207265736f6c766572526566203d206765744163636f756e7428636f6e747261637441646472657373290a2020202020202020202020202e636f6e7472616374732e626f72726f773c267b4e6f6e46756e6769626c65546f6b656e7d3e286e616d653a20636f6e74726163744e616d65290a202020202020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f77204e6f6e46756e6769626c65546f6b656e207265666572656e636520746f2074686520636f6e74726163742e204d616b652073757265207468652070726f766964656420636f6e7472616374206e616d652028220a202020202020202020202020202020202020202020202020202e636f6e63617428636f6e74726163744e616d65292e636f6e63617428222920616e642061646472657373202822292e636f6e63617428636f6e7472616374416464726573732e746f537472696e672829292e636f6e6361742822292061726520636f7272656374212229290a0a20202020202020202f2f205573652074686174207265666572656e636520746f20726574726965766520746865204e4654436f6c6c656374696f6e446174612076696577200a20202020202020206c657420636f6c6c656374696f6e44617461203d207265736f6c7665725265662e7265736f6c7665436f6e747261637456696577287265736f75726365547970653a206e696c2c2076696577547970653a20547970653c4d6574616461746156696577732e4e4654436f6c6c656374696f6e446174613e28292920617321204d6574616461746156696577732e4e4654436f6c6c656374696f6e446174613f0a2020202020202020202020203f3f2070616e69632822436f756c64206e6f74207265736f6c7665204e4654436f6c6c656374696f6e4461746120766965772e2054686520222e636f6e63617428636f6e74726163744e616d65292e636f6e636174282220636f6e7472616374206e6565647320746f20696d706c656d656e7420746865204e4654436f6c6c656374696f6e44617461204d65746164617461207669657720696e206f7264657220746f20657865637574652074686973207472616e73616374696f6e2229290a0a20202020202020202f2f204372656174652061206e657720656d70747920636f6c6c656374696f6e730a20202020202020206c657420656d707479436f6c6c656374696f6e203c2d20636f6c6c656374696f6e446174612e637265617465456d707479436f6c6c656374696f6e28290a0a20202020202020202f2f207361766520697420746f20746865206163636f756e740a20202020202020207369676e65722e73746f726167652e73617665283c2d656d707479436f6c6c656374696f6e2c20746f3a20636f6c6c656374696f6e446174612e73746f7261676550617468290a0a20202020202020202f2f206372656174652061207075626c6963206361706162696c69747920666f722074686520636f6c6c656374696f6e0a20202020202020206c657420636f6c6c656374696f6e436170203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c267b4e6f6e46756e6769626c65546f6b656e2e436f6c6c656374696f6e7d3e280a20202020202020202020202020202020636f6c6c656374696f6e446174612e73746f72616765506174680a202020202020202020202020290a20202020202020207369676e65722e6361706162696c69746965732e7075626c69736828636f6c6c656374696f6e4361702c2061743a20636f6c6c656374696f6e446174612e7075626c696350617468290a202020207d0a7d0af854af7b2274797065223a2241646472657373222c2276616c7565223a22307865343637623964643131666130306466227da37b2276616c7565223a22546f7053686f74222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "0298f482a6054540581e39e8bac9c8b16c4b0b52370408f95ba155eebb9e16848979f5eda23f53e9b58472907c5dedaf536e3f9b777aa302a079a7a4763982d6185365747570204e465420436f6c6c656374696f6e0002014e465420436f6e747261637420416464720000416464726573730003044e465420436f6e7472616374204e616d650001",
    "hash": "79f5eda23f53e9b58472907c5dedaf536e3f9b777aa302a079a7a4763982d618"
  },
  {
    "title": "NFT.02 - Transfer NFT with Paths",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import NonFungibleToken from 0x1d7e57aa55817448\n\n#interaction (\n  version: \"1.0.0\",\n\ttitle: \"Generic NFT Transfer with Paths\",\n\tdescription: \"Transfer any Non-Fungible Token by providing the paths for the source Collection and destination Collection\",\n\tlanguage: \"en-US\",\n)\n\n/// Can pass in any storage path and receiver path instead of just the default.\n/// This lets you choose the token you want to send as well the capability you want to send it to.\n///\n/// Any token path can be passed as an argument here, so wallets should\n/// should check argument values to make sure the intended token path is passed in\n///\n/// @param to: The address to transfer the token to\n/// @param id: The id of the token to transfer\n/// @param senderPathIdentifier: The string identifier of the storage path\n///        where the token should be withdrawn from\n/// @param receiverPathIdentifier: The string identifier of the public path\n///        where the token should be deposited to\n///\ntransaction(to: Address, id: UInt64, senderPathIdentifier: String, receiverPathIdentifier: String) {\n\n    // The NFT resource to be transferred\n    let tempNFT: @{NonFungibleToken.NFT}\n\n    prepare(signer: auth(BorrowValue) &Account) {\n\n        let storagePath = StoragePath(identifier: senderPathIdentifier)\n            ?? panic(\"Could not construct a storage path from the provided path identifier string\")\n\n        // borrow a reference to the signer's NFT collection\n        let withdrawRef = signer.storage.borrow<auth(NonFungibleToken.Withdraw) &{NonFungibleToken.Collection}>(\n                from: storagePath\n            ) ?? panic(\"The signer does not store a NonFungibleToken Collection object at the path \"\n                        .concat(storagePath.toString())\n                        .concat(\"The signer must initialize their account with this collection first!\"))\n\n        self.tempNFT <- withdrawRef.withdraw(withdrawID: id)\n    }\n\n    execute {\n        let publicPath = PublicPath(identifier: receiverPathIdentifier)\n            ?? panic(\"Could not construct a public path from the provided path identifier string \\\"\"\n                      .concat(receiverPathIdentifier)\n                      .concat(\"\\\".\"))\n\n        // get the recipients public account object\n        let recipient = getAccount(to)\n\n        // borrow a public reference to the receivers collection\n        let receiverRef = recipient.capabilities.borrow<&{NonFungibleToken.Receiver}>(publicPath)\n            ?? panic(\"The recipient does not have a NonFungibleToken Receiver at \"\n                        .concat(publicPath.toString())\n                        .concat(\" that is capable of receiving a NFT.\")\n                        .concat(\"The recipient must initialize their account with this collection and receiver first!\"))\n\n        // Deposit the NFT to the receiver\n        receiverRef.deposit(token: <-self.tempNFT)\n    }\n}",
      "arguments": [
        {
          "type": "Address",
          "value": "0xe467b9dd11fa00df"
        },
        {
          "value": "10",
          "type": "UInt64"
        },
        {
          "value": "flowTokenVault",
          "type": "String"
        },
        {
          "value": "flowTokenReceiver",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import NonFungibleToken from 0x1d7e57aa55817448\n\n#interaction (\n  version: \"1.0.0\",\n\ttitle: \"Generic NFT Transfer with Paths\",\n\tdescription: \"Transfer any Non-Fungible Token by providing the paths for the source Collection and destination Collection\",\n\tlanguage: \"en-US\",\n)\n\n/// Can pass in any storage path and receiver path instead of just the default.\n/// This lets you choose the token you want to send as well the capability you want to send it to.\n///\n/// Any token path can be passed as an argument here, so wallets should\n/// should check argument values to make sure the intended token path is passed in\n///\n/// @param to: The address to transfer the token to\n/// @param id: The id of the token to transfer\n/// @param senderPathIdentifier: The string identifier of the storage path\n///        where the token should be withdrawn from\n/// @param receiverPathIdentifier: The string identifier of the public path\n///        where the token should be deposited to\n///\ntransaction(to: Address, id: UInt64, senderPathIdentifier: String, receiverPathIdentifier: String) {\n\n    // The NFT resource to be transferred\n    let tempNFT: @{NonFungibleToken.NFT}\n\n    prepare(signer: auth(BorrowValue) &Account) {\n\n        let storagePath = StoragePath(identifier: senderPathIdentifier)\n            ?? panic(\"Could not construct a storage path from the provided path identifier string\")\n\n        // borrow a reference to the signer's NFT collection\n        let withdrawRef = signer.storage.borrow<auth(NonFungibleToken.Withdraw) &{NonFungibleToken.Collection}>(\n                from: storagePath\n            ) ?? panic(\"The signer does not store a NonFungibleToken Collection object at the path \"\n                        .concat(storagePath.toString())\n                        .concat(\"The signer must initialize their account with this collection first!\"))\n\n        self.tempNFT <- withdrawRef.withdraw(withdrawID: id)\n    }\n\n    execute {\n        let publicPath = PublicPath(identifier: receiverPathIdentifier)\n            ?? panic(\"Could not construct a public path from the provided path identifier string \\\"\"\n                      .concat(receiverPathIdentifier)\n                      .concat(\"\\\".\"))\n\n        // get the recipients public account object\n        let recipient = getAccount(to)\n\n        // borrow a public reference to the receivers collection\n        let receiverRef = recipient.capabilities.borrow<&{NonFungibleToken.Receiver}>(publicPath)\n            ?? panic(\"The recipient does not have a NonFungibleToken Receiver at \"\n                        .concat(publicPath.toString())\n                        .concat(\" that is capable of receiving a NFT.\")\n                        .concat(\"The recipient must initialize their account with this collection and receiver first!\"))\n\n        // Deposit the NFT to the receiver\n        receiverRef.deposit(token: <-self.tempNFT)\n    }\n}",
      "arguments": [
        {
          "type": "Address",
          "value": "0xe467b9dd11fa00df"
        },
        {
          "value": "10",
          "type": "UInt64"
        },
        {
          "value": "flowTokenVault",
          "type": "String"
        },
        {
          "value": "flowTokenReceiver",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90c37b90b4a696d706f7274204e6f6e46756e6769626c65546f6b656e2066726f6d203078316437653537616135353831373434380a0a23696e746572616374696f6e20280a202076657273696f6e3a2022312e302e30222c0a097469746c653a202247656e65726963204e4654205472616e736665722077697468205061746873222c0a096465736372697074696f6e3a20225472616e7366657220616e79204e6f6e2d46756e6769626c6520546f6b656e2062792070726f766964696e672074686520706174687320666f722074686520736f7572636520436f6c6c656374696f6e20616e642064657374696e6174696f6e20436f6c6c656374696f6e222c0a096c616e67756167653a2022656e2d5553222c0a290a0a2f2f2f2043616e207061737320696e20616e792073746f72616765207061746820616e64207265636569766572207061746820696e7374656164206f66206a757374207468652064656661756c742e0a2f2f2f2054686973206c65747320796f752063686f6f73652074686520746f6b656e20796f752077616e7420746f2073656e642061732077656c6c20746865206361706162696c69747920796f752077616e7420746f2073656e6420697420746f2e0a2f2f2f0a2f2f2f20416e7920746f6b656e20706174682063616e2062652070617373656420617320616e20617267756d656e7420686572652c20736f2077616c6c6574732073686f756c640a2f2f2f2073686f756c6420636865636b20617267756d656e742076616c75657320746f206d616b6520737572652074686520696e74656e64656420746f6b656e20706174682069732070617373656420696e0a2f2f2f0a2f2f2f2040706172616d20746f3a20546865206164647265737320746f207472616e736665722074686520746f6b656e20746f0a2f2f2f2040706172616d2069643a20546865206964206f662074686520746f6b656e20746f207472616e736665720a2f2f2f2040706172616d2073656e646572506174684964656e7469666965723a2054686520737472696e67206964656e746966696572206f66207468652073746f7261676520706174680a2f2f2f202020202020202077686572652074686520746f6b656e2073686f756c642062652077697468647261776e2066726f6d0a2f2f2f2040706172616d207265636569766572506174684964656e7469666965723a2054686520737472696e67206964656e746966696572206f6620746865207075626c696320706174680a2f2f2f202020202020202077686572652074686520746f6b656e2073686f756c64206265206465706f736974656420746f0a2f2f2f0a7472616e73616374696f6e28746f3a20416464726573732c2069643a2055496e7436342c2073656e646572506174684964656e7469666965723a20537472696e672c207265636569766572506174684964656e7469666965723a20537472696e6729207b0a0a202020202f2f20546865204e4654207265736f7572636520746f206265207472616e736665727265640a202020206c65742074656d704e46543a20407b4e6f6e46756e6769626c65546f6b656e2e4e46547d0a0a2020202070726570617265287369676e65723a206175746828426f72726f7756616c75652920264163636f756e7429207b0a0a20202020202020206c65742073746f7261676550617468203d2053746f7261676550617468286964656e7469666965723a2073656e646572506174684964656e746966696572290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420636f6e73747275637420612073746f7261676520706174682066726f6d207468652070726f76696465642070617468206964656e74696669657220737472696e6722290a0a20202020202020202f2f20626f72726f772061207265666572656e636520746f20746865207369676e65722773204e465420636f6c6c656374696f6e0a20202020202020206c6574207769746864726177526566203d207369676e65722e73746f726167652e626f72726f773c61757468284e6f6e46756e6769626c65546f6b656e2e57697468647261772920267b4e6f6e46756e6769626c65546f6b656e2e436f6c6c656374696f6e7d3e280a2020202020202020202020202020202066726f6d3a2073746f72616765506174680a20202020202020202020202029203f3f2070616e69632822546865207369676e657220646f6573206e6f742073746f72652061204e6f6e46756e6769626c65546f6b656e20436f6c6c656374696f6e206f626a65637420617420746865207061746820220a2020202020202020202020202020202020202020202020202e636f6e6361742873746f72616765506174682e746f537472696e672829290a2020202020202020202020202020202020202020202020202e636f6e6361742822546865207369676e6572206d75737420696e697469616c697a65207468656972206163636f756e742077697468207468697320636f6c6c656374696f6e206669727374212229290a0a202020202020202073656c662e74656d704e4654203c2d2077697468647261775265662e776974686472617728776974686472617749443a206964290a202020207d0a0a2020202065786563757465207b0a20202020202020206c6574207075626c696350617468203d205075626c696350617468286964656e7469666965723a207265636569766572506174684964656e746966696572290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420636f6e7374727563742061207075626c696320706174682066726f6d207468652070726f76696465642070617468206964656e74696669657220737472696e67205c22220a202020202020202020202020202020202020202020202e636f6e636174287265636569766572506174684964656e746966696572290a202020202020202020202020202020202020202020202e636f6e63617428225c222e2229290a0a20202020202020202f2f206765742074686520726563697069656e7473207075626c6963206163636f756e74206f626a6563740a20202020202020206c657420726563697069656e74203d206765744163636f756e7428746f290a0a20202020202020202f2f20626f72726f772061207075626c6963207265666572656e636520746f207468652072656365697665727320636f6c6c656374696f6e0a20202020202020206c6574207265636569766572526566203d20726563697069656e742e6361706162696c69746965732e626f72726f773c267b4e6f6e46756e6769626c65546f6b656e2e52656365697665727d3e287075626c696350617468290a2020202020202020202020203f3f2070616e6963282254686520726563697069656e7420646f6573206e6f7420686176652061204e6f6e46756e6769626c65546f6b656e20526563656976657220617420220a2020202020202020202020202020202020202020202020202e636f6e636174287075626c6963506174682e746f537472696e672829290a2020202020202020202020202020202020202020202020202e636f6e636174282220746861742069732063617061626c65206f6620726563656976696e672061204e46542e22290a2020202020202020202020202020202020202020202020202e636f6e636174282254686520726563697069656e74206d75737420696e697469616c697a65207468656972206163636f756e742077697468207468697320636f6c6c656374696f6e20616e64207265636569766572206669727374212229290a0a20202020202020202f2f204465706f73697420746865204e465420746f207468652072656365697665720a202020202020202072656365697665725265662e6465706f73697428746f6b656e3a203c2d73656c662e74656d704e4654290a202020207d0a7df8a8af7b2274797065223a2241646472657373222c2276616c7565223a22307865343637623964643131666130306466227d9e7b2276616c7565223a223130222c2274797065223a2255496e743634227daa7b2276616c7565223a22666c6f77546f6b656e5661756c74222c2274797065223a22537472696e67227dad7b2276616c7565223a22666c6f77546f6b656e5265636569766572222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90c3bf90c37b90b4a696d706f7274204e6f6e46756e6769626c65546f6b656e2066726f6d203078316437653537616135353831373434380a0a23696e746572616374696f6e20280a202076657273696f6e3a2022312e302e30222c0a097469746c653a202247656e65726963204e4654205472616e736665722077697468205061746873222c0a096465736372697074696f6e3a20225472616e7366657220616e79204e6f6e2d46756e6769626c6520546f6b656e2062792070726f766964696e672074686520706174687320666f722074686520736f7572636520436f6c6c656374696f6e20616e642064657374696e6174696f6e20436f6c6c656374696f6e222c0a096c616e67756167653a2022656e2d5553222c0a290a0a2f2f2f2043616e207061737320696e20616e792073746f72616765207061746820616e64207265636569766572207061746820696e7374656164206f66206a757374207468652064656661756c742e0a2f2f2f2054686973206c65747320796f752063686f6f73652074686520746f6b656e20796f752077616e7420746f2073656e642061732077656c6c20746865206361706162696c69747920796f752077616e7420746f2073656e6420697420746f2e0a2f2f2f0a2f2f2f20416e7920746f6b656e20706174682063616e2062652070617373656420617320616e20617267756d656e7420686572652c20736f2077616c6c6574732073686f756c640a2f2f2f2073686f756c6420636865636b20617267756d656e742076616c75657320746f206d616b6520737572652074686520696e74656e64656420746f6b656e20706174682069732070617373656420696e0a2f2f2f0a2f2f2f2040706172616d20746f3a20546865206164647265737320746f207472616e736665722074686520746f6b656e20746f0a2f2f2f2040706172616d2069643a20546865206964206f662074686520746f6b656e20746f207472616e736665720a2f2f2f2040706172616d2073656e646572506174684964656e7469666965723a2054686520737472696e67206964656e746966696572206f66207468652073746f7261676520706174680a2f2f2f202020202020202077686572652074686520746f6b656e2073686f756c642062652077697468647261776e2066726f6d0a2f2f2f2040706172616d207265636569766572506174684964656e7469666965723a2054686520737472696e67206964656e746966696572206f6620746865207075626c696320706174680a2f2f2f202020202020202077686572652074686520746f6b656e2073686f756c64206265206465706f736974656420746f0a2f2f2f0a7472616e73616374696f6e28746f3a20416464726573732c2069643a2055496e7436342c2073656e646572506174684964656e7469666965723a20537472696e672c207265636569766572506174684964656e7469666965723a20537472696e6729207b0a0a202020202f2f20546865204e4654207265736f7572636520746f206265207472616e736665727265640a202020206c65742074656d704e46543a20407b4e6f6e46756e6769626c65546f6b656e2e4e46547d0a0a2020202070726570617265287369676e65723a206175746828426f72726f7756616c75652920264163636f756e7429207b0a0a20202020202020206c65742073746f7261676550617468203d2053746f7261676550617468286964656e7469666965723a2073656e646572506174684964656e746966696572290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420636f6e73747275637420612073746f7261676520706174682066726f6d207468652070726f76696465642070617468206964656e74696669657220737472696e6722290a0a20202020202020202f2f20626f72726f772061207265666572656e636520746f20746865207369676e65722773204e465420636f6c6c656374696f6e0a20202020202020206c6574207769746864726177526566203d207369676e65722e73746f726167652e626f72726f773c61757468284e6f6e46756e6769626c65546f6b656e2e57697468647261772920267b4e6f6e46756e6769626c65546f6b656e2e436f6c6c656374696f6e7d3e280a2020202020202020202020202020202066726f6d3a2073746f72616765506174680a20202020202020202020202029203f3f2070616e69632822546865207369676e657220646f6573206e6f742073746f72652061204e6f6e46756e6769626c65546f6b656e20436f6c6c656374696f6e206f626a65637420617420746865207061746820220a2020202020202020202020202020202020202020202020202e636f6e6361742873746f72616765506174682e746f537472696e672829290a2020202020202020202020202020202020202020202020202e636f6e6361742822546865207369676e6572206d75737420696e697469616c697a65207468656972206163636f756e742077697468207468697320636f6c6c656374696f6e206669727374212229290a0a202020202020202073656c662e74656d704e4654203c2d2077697468647261775265662e776974686472617728776974686472617749443a206964290a202020207d0a0a2020202065786563757465207b0a20202020202020206c6574207075626c696350617468203d205075626c696350617468286964656e7469666965723a207265636569766572506174684964656e746966696572290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420636f6e7374727563742061207075626c696320706174682066726f6d207468652070726f76696465642070617468206964656e74696669657220737472696e67205c22220a202020202020202020202020202020202020202020202e636f6e636174287265636569766572506174684964656e746966696572290a202020202020202020202020202020202020202020202e636f6e63617428225c222e2229290a0a20202020202020202f2f206765742074686520726563697069656e7473207075626c6963206163636f756e74206f626a6563740a20202020202020206c657420726563697069656e74203d206765744163636f756e7428746f290a0a20202020202020202f2f20626f72726f772061207075626c6963207265666572656e636520746f207468652072656365697665727320636f6c6c656374696f6e0a20202020202020206c6574207265636569766572526566203d20726563697069656e742e6361706162696c69746965732e626f72726f773c267b4e6f6e46756e6769626c65546f6b656e2e52656365697665727d3e287075626c696350617468290a2020202020202020202020203f3f2070616e6963282254686520726563697069656e7420646f6573206e6f7420686176652061204e6f6e46756e6769626c65546f6b656e20526563656976657220617420220a2020202020202020202020202020202020202020202020202e636f6e636174287075626c6963506174682e746f537472696e672829290a2020202020202020202020202020202020202020202020202e636f6e636174282220746861742069732063617061626c65206f6620726563656976696e672061204e46542e22290a2020202020202020202020202020202020202020202020202e636f6e636174282254686520726563697069656e74206d75737420696e697469616c697a65207468656972206163636f756e742077697468207468697320636f6c6c656374696f6e20616e64207265636569766572206669727374212229290a0a20202020202020202f2f204465706f73697420746865204e465420746f207468652072656365697665720a202020202020202072656365697665725265662e6465706f73697428746f6b656e3a203c2d73656c662e74656d704e4654290a202020207d0a7df8a8af7b2274797065223a2241646472657373222c2276616c7565223a22307865343637623964643131666130306466227d9e7b2276616c7565223a223130222c2274797065223a2255496e743634227daa7b2276616c7565223a22666c6f77546f6b656e5661756c74222c2274797065223a22537472696e67227dad7b2276616c7565223a22666c6f77546f6b656e5265636569766572222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02a56ee3fe496f3d4dbdb255843ae1a51ea858ef02728d3ae2ede732b5880ad8b75f050afb9d275119e22546f860aef0168f1057823bb4777c2024aef7c6ac1cc75472616e73666572204e46542077697468205061746873000401526563697069656e740000416464726573730003014e465420494420746f205472616e7366000155496e74363400030453656e2e20436f6c6c20506174682049640002045265632e20436f6c6c20506174682049640003",
    "hash": "5f050afb9d275119e22546f860aef0168f1057823bb4777c2024aef7c6ac1cc7"
  },
  {
    "title": "NFT.03 - Transfer NFT with Address",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import NonFungibleToken from 0x1d7e57aa55817448\nimport MetadataViews from 0x1d7e57aa55817448\n\n#interaction (\n  version: \"1.0.0\",\n\ttitle: \"Generic NFT Transfer with Contract Address and Name\",\n\tdescription: \"Transfer any Non-Fungible Token by providing the contract address and name\",\n\tlanguage: \"en-US\",\n)\n\n/// Can pass in any contract address and name\n/// This lets you choose the token you want to send because\n/// the transaction gets the metadata from the provided contract.\n///\n/// @param to: The address to transfer the token to\n/// @param id: The id of token to transfer\n/// @param contractAddress: The address of the contract that defines the token being transferred\n/// @param contractName: The name of the contract that defines the token being transferred. Ex: \"ExampleNFT\"\n///\n/// This transaction only works with NFTs that have the type name \"NFT\"\n/// A different transaction is required for NFTs with a different type name\n///\ntransaction(to: Address, id: UInt64, contractAddress: Address, contractName: String) {\n\n    // The NFT resource to be transferred\n    let tempNFT: @{NonFungibleToken.NFT}\n\n    // NFTCollectionData struct to get paths from\n    let collectionData: MetadataViews.NFTCollectionData\n\n    prepare(signer: auth(BorrowValue) &Account) {\n\n        // Borrow a reference to the nft contract deployed to the passed account\n        let resolverRef = getAccount(contractAddress)\n            .contracts.borrow<&{NonFungibleToken}>(name: contractName)\n                ?? panic(\"Could not borrow NonFungibleToken reference to the contract. Make sure the provided contract name (\"\n                          .concat(contractName).concat(\") and address (\").concat(contractAddress.toString()).concat(\") are correct!\"))\n\n        // Use that reference to retrieve the NFTCollectionData view \n        self.collectionData = resolverRef.resolveContractView(resourceType: nil, viewType: Type<MetadataViews.NFTCollectionData>()) as! MetadataViews.NFTCollectionData?\n            ?? panic(\"Could not resolve NFTCollectionData view. The \".concat(contractName).concat(\" contract needs to implement the NFTCollectionData Metadata view in order to execute this transaction\"))\n\n\n        // borrow a reference to the signer's NFT collection\n        let withdrawRef = signer.storage.borrow<auth(NonFungibleToken.Withdraw) &{NonFungibleToken.Collection}>(\n                from: self.collectionData.storagePath\n            ) ?? panic(\"The signer does not store a \"\n                        .concat(contractName)\n                        .concat(\" Collection object at the path \")\n                        .concat(self.collectionData.storagePath.toString())\n                        .concat(\". The signer must initialize their account with this collection first!\"))\n\n        self.tempNFT <- withdrawRef.withdraw(withdrawID: id)\n\n        // Get the string representation of the address without the 0x\n        var addressString = contractAddress.toString()\n        if addressString.length == 18 {\n            addressString = addressString.slice(from: 2, upTo: 18)\n        }\n        let typeString: String = \"A.\".concat(addressString).concat(\".\").concat(contractName).concat(\".NFT\")\n        let type = CompositeType(typeString)\n        assert(\n            type != nil,\n            message: \"Could not create a type out of the contract name \"\n                      .concat(contractName)\n                      .concat(\" and address \")\n                      .concat(addressString)\n                      .concat(\"!\")\n        )\n\n        assert(\n            self.tempNFT.getType() == type!,\n            message: \"The NFT that was withdrawn to transfer is not the type that was requested <\"\n                     .concat(typeString).concat(\">.\")\n        )\n    }\n\n    execute {\n        // get the recipients public account object\n        let recipient = getAccount(to)\n\n        // borrow a public reference to the receivers collection\n        let receiverRef = recipient.capabilities.borrow<&{NonFungibleToken.Receiver}>(self.collectionData.publicPath)\n            ?? panic(\"The recipient does not have a NonFungibleToken Receiver at \"\n                        .concat(self.collectionData.publicPath.toString())\n                        .concat(\" that is capable of receiving a \")\n                        .concat(contractName)\n                        .concat(\" NFT.\")\n                        .concat(\"The recipient must initialize their account with this collection and receiver first!\"))\n\n        // Deposit the NFT to the receiver\n        receiverRef.deposit(token: <-self.tempNFT)\n    }\n}",
      "arguments": [
        {
          "type": "Address",
          "value": "0xe467b9dd11fa00df"
        },
        {
          "value": "10",
          "type": "UInt64"
        },
        {
          "value": "0xe467b9dd11fa00df",
          "type": "Address"
        },
        {
          "value": "TopShot",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import NonFungibleToken from 0x1d7e57aa55817448\nimport MetadataViews from 0x1d7e57aa55817448\n\n#interaction (\n  version: \"1.0.0\",\n\ttitle: \"Generic NFT Transfer with Contract Address and Name\",\n\tdescription: \"Transfer any Non-Fungible Token by providing the contract address and name\",\n\tlanguage: \"en-US\",\n)\n\n/// Can pass in any contract address and name\n/// This lets you choose the token you want to send because\n/// the transaction gets the metadata from the provided contract.\n///\n/// @param to: The address to transfer the token to\n/// @param id: The id of token to transfer\n/// @param contractAddress: The address of the contract that defines the token being transferred\n/// @param contractName: The name of the contract that defines the token being transferred. Ex: \"ExampleNFT\"\n///\n/// This transaction only works with NFTs that have the type name \"NFT\"\n/// A different transaction is required for NFTs with a different type name\n///\ntransaction(to: Address, id: UInt64, contractAddress: Address, contractName: String) {\n\n    // The NFT resource to be transferred\n    let tempNFT: @{NonFungibleToken.NFT}\n\n    // NFTCollectionData struct to get paths from\n    let collectionData: MetadataViews.NFTCollectionData\n\n    prepare(signer: auth(BorrowValue) &Account) {\n\n        // Borrow a reference to the nft contract deployed to the passed account\n        let resolverRef = getAccount(contractAddress)\n            .contracts.borrow<&{NonFungibleToken}>(name: contractName)\n                ?? panic(\"Could not borrow NonFungibleToken reference to the contract. Make sure the provided contract name (\"\n                          .concat(contractName).concat(\") and address (\").concat(contractAddress.toString()).concat(\") are correct!\"))\n\n        // Use that reference to retrieve the NFTCollectionData view \n        self.collectionData = resolverRef.resolveContractView(resourceType: nil, viewType: Type<MetadataViews.NFTCollectionData>()) as! MetadataViews.NFTCollectionData?\n            ?? panic(\"Could not resolve NFTCollectionData view. The \".concat(contractName).concat(\" contract needs to implement the NFTCollectionData Metadata view in order to execute this transaction\"))\n\n\n        // borrow a reference to the signer's NFT collection\n        let withdrawRef = signer.storage.borrow<auth(NonFungibleToken.Withdraw) &{NonFungibleToken.Collection}>(\n                from: self.collectionData.storagePath\n            ) ?? panic(\"The signer does not store a \"\n                        .concat(contractName)\n                        .concat(\" Collection object at the path \")\n                        .concat(self.collectionData.storagePath.toString())\n                        .concat(\". The signer must initialize their account with this collection first!\"))\n\n        self.tempNFT <- withdrawRef.withdraw(withdrawID: id)\n\n        // Get the string representation of the address without the 0x\n        var addressString = contractAddress.toString()\n        if addressString.length == 18 {\n            addressString = addressString.slice(from: 2, upTo: 18)\n        }\n        let typeString: String = \"A.\".concat(addressString).concat(\".\").concat(contractName).concat(\".NFT\")\n        let type = CompositeType(typeString)\n        assert(\n            type != nil,\n            message: \"Could not create a type out of the contract name \"\n                      .concat(contractName)\n                      .concat(\" and address \")\n                      .concat(addressString)\n                      .concat(\"!\")\n        )\n\n        assert(\n            self.tempNFT.getType() == type!,\n            message: \"The NFT that was withdrawn to transfer is not the type that was requested <\"\n                     .concat(typeString).concat(\">.\")\n        )\n    }\n\n    execute {\n        // get the recipients public account object\n        let recipient = getAccount(to)\n\n        // borrow a public reference to the receivers collection\n        let receiverRef = recipient.capabilities.borrow<&{NonFungibleToken.Receiver}>(self.collectionData.publicPath)\n            ?? panic(\"The recipient does not have a NonFungibleToken Receiver at \"\n                        .concat(self.collectionData.publicPath.toString())\n                        .concat(\" that is capable of receiving a \")\n                        .concat(contractName)\n                        .concat(\" NFT.\")\n                        .concat(\"The recipient must initialize their account with this collection and receiver first!\"))\n\n        // Deposit the NFT to the receiver\n        receiverRef.deposit(token: <-self.tempNFT)\n    }\n}",
      "arguments": [
        {
          "type": "Address",
          "value": "0xe467b9dd11fa00df"
        },
        {
          "value": "10",
          "type": "UInt64"
        },
        {
          "value": "0xe467b9dd11fa00df",
          "type": "Address"
        },
        {
          "value": "TopShot",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f912c5b911dd696d706f7274204e6f6e46756e6769626c65546f6b656e2066726f6d203078316437653537616135353831373434380a696d706f7274204d6574616461746156696577732066726f6d203078316437653537616135353831373434380a0a23696e746572616374696f6e20280a202076657273696f6e3a2022312e302e30222c0a097469746c653a202247656e65726963204e4654205472616e73666572207769746820436f6e7472616374204164647265737320616e64204e616d65222c0a096465736372697074696f6e3a20225472616e7366657220616e79204e6f6e2d46756e6769626c6520546f6b656e2062792070726f766964696e672074686520636f6e7472616374206164647265737320616e64206e616d65222c0a096c616e67756167653a2022656e2d5553222c0a290a0a2f2f2f2043616e207061737320696e20616e7920636f6e7472616374206164647265737320616e64206e616d650a2f2f2f2054686973206c65747320796f752063686f6f73652074686520746f6b656e20796f752077616e7420746f2073656e6420626563617573650a2f2f2f20746865207472616e73616374696f6e206765747320746865206d657461646174612066726f6d207468652070726f766964656420636f6e74726163742e0a2f2f2f0a2f2f2f2040706172616d20746f3a20546865206164647265737320746f207472616e736665722074686520746f6b656e20746f0a2f2f2f2040706172616d2069643a20546865206964206f6620746f6b656e20746f207472616e736665720a2f2f2f2040706172616d20636f6e7472616374416464726573733a205468652061646472657373206f662074686520636f6e7472616374207468617420646566696e65732074686520746f6b656e206265696e67207472616e736665727265640a2f2f2f2040706172616d20636f6e74726163744e616d653a20546865206e616d65206f662074686520636f6e7472616374207468617420646566696e65732074686520746f6b656e206265696e67207472616e736665727265642e2045783a20224578616d706c654e4654220a2f2f2f0a2f2f2f2054686973207472616e73616374696f6e206f6e6c7920776f726b732077697468204e46547320746861742068617665207468652074797065206e616d6520224e4654220a2f2f2f204120646966666572656e74207472616e73616374696f6e20697320726571756972656420666f72204e4654732077697468206120646966666572656e742074797065206e616d650a2f2f2f0a7472616e73616374696f6e28746f3a20416464726573732c2069643a2055496e7436342c20636f6e7472616374416464726573733a20416464726573732c20636f6e74726163744e616d653a20537472696e6729207b0a0a202020202f2f20546865204e4654207265736f7572636520746f206265207472616e736665727265640a202020206c65742074656d704e46543a20407b4e6f6e46756e6769626c65546f6b656e2e4e46547d0a0a202020202f2f204e4654436f6c6c656374696f6e446174612073747275637420746f206765742070617468732066726f6d0a202020206c657420636f6c6c656374696f6e446174613a204d6574616461746156696577732e4e4654436f6c6c656374696f6e446174610a0a2020202070726570617265287369676e65723a206175746828426f72726f7756616c75652920264163636f756e7429207b0a0a20202020202020202f2f20426f72726f772061207265666572656e636520746f20746865206e667420636f6e7472616374206465706c6f79656420746f2074686520706173736564206163636f756e740a20202020202020206c6574207265736f6c766572526566203d206765744163636f756e7428636f6e747261637441646472657373290a2020202020202020202020202e636f6e7472616374732e626f72726f773c267b4e6f6e46756e6769626c65546f6b656e7d3e286e616d653a20636f6e74726163744e616d65290a202020202020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f77204e6f6e46756e6769626c65546f6b656e207265666572656e636520746f2074686520636f6e74726163742e204d616b652073757265207468652070726f766964656420636f6e7472616374206e616d652028220a20202020202020202020202020202020202020202020202020202e636f6e63617428636f6e74726163744e616d65292e636f6e63617428222920616e642061646472657373202822292e636f6e63617428636f6e7472616374416464726573732e746f537472696e672829292e636f6e6361742822292061726520636f7272656374212229290a0a20202020202020202f2f205573652074686174207265666572656e636520746f20726574726965766520746865204e4654436f6c6c656374696f6e446174612076696577200a202020202020202073656c662e636f6c6c656374696f6e44617461203d207265736f6c7665725265662e7265736f6c7665436f6e747261637456696577287265736f75726365547970653a206e696c2c2076696577547970653a20547970653c4d6574616461746156696577732e4e4654436f6c6c656374696f6e446174613e28292920617321204d6574616461746156696577732e4e4654436f6c6c656374696f6e446174613f0a2020202020202020202020203f3f2070616e69632822436f756c64206e6f74207265736f6c7665204e4654436f6c6c656374696f6e4461746120766965772e2054686520222e636f6e63617428636f6e74726163744e616d65292e636f6e636174282220636f6e7472616374206e6565647320746f20696d706c656d656e7420746865204e4654436f6c6c656374696f6e44617461204d65746164617461207669657720696e206f7264657220746f20657865637574652074686973207472616e73616374696f6e2229290a0a0a20202020202020202f2f20626f72726f772061207265666572656e636520746f20746865207369676e65722773204e465420636f6c6c656374696f6e0a20202020202020206c6574207769746864726177526566203d207369676e65722e73746f726167652e626f72726f773c61757468284e6f6e46756e6769626c65546f6b656e2e57697468647261772920267b4e6f6e46756e6769626c65546f6b656e2e436f6c6c656374696f6e7d3e280a2020202020202020202020202020202066726f6d3a2073656c662e636f6c6c656374696f6e446174612e73746f72616765506174680a20202020202020202020202029203f3f2070616e69632822546865207369676e657220646f6573206e6f742073746f7265206120220a2020202020202020202020202020202020202020202020202e636f6e63617428636f6e74726163744e616d65290a2020202020202020202020202020202020202020202020202e636f6e636174282220436f6c6c656374696f6e206f626a6563742061742074686520706174682022290a2020202020202020202020202020202020202020202020202e636f6e6361742873656c662e636f6c6c656374696f6e446174612e73746f72616765506174682e746f537472696e672829290a2020202020202020202020202020202020202020202020202e636f6e63617428222e20546865207369676e6572206d75737420696e697469616c697a65207468656972206163636f756e742077697468207468697320636f6c6c656374696f6e206669727374212229290a0a202020202020202073656c662e74656d704e4654203c2d2077697468647261775265662e776974686472617728776974686472617749443a206964290a0a20202020202020202f2f204765742074686520737472696e6720726570726573656e746174696f6e206f6620746865206164647265737320776974686f7574207468652030780a20202020202020207661722061646472657373537472696e67203d20636f6e7472616374416464726573732e746f537472696e6728290a202020202020202069662061646472657373537472696e672e6c656e677468203d3d203138207b0a20202020202020202020202061646472657373537472696e67203d2061646472657373537472696e672e736c6963652866726f6d3a20322c207570546f3a203138290a20202020202020207d0a20202020202020206c65742074797065537472696e673a20537472696e67203d2022412e222e636f6e6361742861646472657373537472696e67292e636f6e63617428222e22292e636f6e63617428636f6e74726163744e616d65292e636f6e63617428222e4e465422290a20202020202020206c65742074797065203d20436f6d706f73697465547970652874797065537472696e67290a2020202020202020617373657274280a2020202020202020202020207479706520213d206e696c2c0a2020202020202020202020206d6573736167653a2022436f756c64206e6f742063726561746520612074797065206f7574206f662074686520636f6e7472616374206e616d6520220a202020202020202020202020202020202020202020202e636f6e63617428636f6e74726163744e616d65290a202020202020202020202020202020202020202020202e636f6e636174282220616e6420616464726573732022290a202020202020202020202020202020202020202020202e636f6e6361742861646472657373537472696e67290a202020202020202020202020202020202020202020202e636f6e63617428222122290a2020202020202020290a0a2020202020202020617373657274280a20202020202020202020202073656c662e74656d704e46542e676574547970652829203d3d2074797065212c0a2020202020202020202020206d6573736167653a2022546865204e46542074686174207761732077697468647261776e20746f207472616e73666572206973206e6f7420746865207479706520746861742077617320726571756573746564203c220a2020202020202020202020202020202020202020202e636f6e6361742874797065537472696e67292e636f6e63617428223e2e22290a2020202020202020290a202020207d0a0a2020202065786563757465207b0a20202020202020202f2f206765742074686520726563697069656e7473207075626c6963206163636f756e74206f626a6563740a20202020202020206c657420726563697069656e74203d206765744163636f756e7428746f290a0a20202020202020202f2f20626f72726f772061207075626c6963207265666572656e636520746f207468652072656365697665727320636f6c6c656374696f6e0a20202020202020206c6574207265636569766572526566203d20726563697069656e742e6361706162696c69746965732e626f72726f773c267b4e6f6e46756e6769626c65546f6b656e2e52656365697665727d3e2873656c662e636f6c6c656374696f6e446174612e7075626c696350617468290a2020202020202020202020203f3f2070616e6963282254686520726563697069656e7420646f6573206e6f7420686176652061204e6f6e46756e6769626c65546f6b656e20526563656976657220617420220a2020202020202020202020202020202020202020202020202e636f6e6361742873656c662e636f6c6c656374696f6e446174612e7075626c6963506174682e746f537472696e672829290a2020202020202020202020202020202020202020202020202e636f6e636174282220746861742069732063617061626c65206f6620726563656976696e6720612022290a2020202020202020202020202020202020202020202020202e636f6e63617428636f6e74726163744e616d65290a2020202020202020202020202020202020202020202020202e636f6e6361742822204e46542e22290a2020202020202020202020202020202020202020202020202e636f6e636174282254686520726563697069656e74206d75737420696e697469616c697a65207468656972206163636f756e742077697468207468697320636f6c6c656374696f6e20616e64207265636569766572206669727374212229290a0a20202020202020202f2f204465706f73697420746865204e465420746f207468652072656365697665720a202020202020202072656365697665725265662e6465706f73697428746f6b656e3a203c2d73656c662e74656d704e4654290a202020207d0a7df8a3af7b2274797065223a2241646472657373222c2276616c7565223a22307865343637623964643131666130306466227d9e7b2276616c7565223a223130222c2274797065223a2255496e743634227daf7b2276616c7565223a22307865343637623964643131666130306466222c2274797065223a2241646472657373227da37b2276616c7565223a22546f7053686f74222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "",
    "metadata": "025dae1c91010a8238e1b469b6bea505320bde169af7d3547c8455da467c1cede1e214e8ba77ee79a8acfbea11a2255378e2123a60d1bc4981277aec1c9b41b41b5472616e73666572204e465420776974682041646472657373000401526563697069656e740000416464726573730003014e465420494420746f205472616e7366000155496e7436340003014e465420436f6e747261637420416464720002416464726573730003044e465420436f6e7472616374204e616d650003",
    "hash": "e214e8ba77ee79a8acfbea11a2255378e2123a60d1bc4981277aec1c9b41b41b"
  },
  {
    "title": "TH.01 - Withdraw Unlocked FLOW",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FungibleToken from 0xf233dcee88fe0abe\nimport FlowToken from 0x1654653399040a61\nimport LockedTokens from 0x8d0e87b65159ae63\n\ntransaction(amount: UFix64) {\n\n    let holderRef: auth(LockedTokens.TokenOperations, FungibleToken.Withdraw) &LockedTokens.TokenHolder\n    let vaultRef: auth(FungibleToken.Withdraw) &FlowToken.Vault\n\n    prepare(acct: auth(BorrowValue) &Account) {\n        self.holderRef = acct.storage.borrow<auth(LockedTokens.TokenOperations, FungibleToken.Withdraw) &LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"Cannot withdraw locked tokens! The signer of the transaction \"\n                    .concat(\"does not have an associated locked account, \")\n                    .concat(\"so there are no locked tokens to withdraw.\"))\n\n        self.vaultRef = acct.storage.borrow<auth(FungibleToken.Withdraw) &FlowToken.Vault>(from: /storage/flowTokenVault)\n            ?? panic(\"The signer does not store a FlowToken Vault object at the path \"\n                    .concat(\"/storage/flowTokenVault. \")\n                    .concat(\"The signer must initialize their account with this vault first!\"))\n    }\n\n    execute {\n        self.vaultRef.deposit(from: <-self.holderRef.withdraw(amount: amount))\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FungibleToken from 0xf233dcee88fe0abe\nimport FlowToken from 0x1654653399040a61\nimport LockedTokens from 0x8d0e87b65159ae63\n\ntransaction(amount: UFix64) {\n\n    let holderRef: auth(LockedTokens.TokenOperations, FungibleToken.Withdraw) &LockedTokens.TokenHolder\n    let vaultRef: auth(FungibleToken.Withdraw) &FlowToken.Vault\n\n    prepare(acct: auth(BorrowValue) &Account) {\n        self.holderRef = acct.storage.borrow<auth(LockedTokens.TokenOperations, FungibleToken.Withdraw) &LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"Cannot withdraw locked tokens! The signer of the transaction \"\n                    .concat(\"does not have an associated locked account, \")\n                    .concat(\"so there are no locked tokens to withdraw.\"))\n\n        self.vaultRef = acct.storage.borrow<auth(FungibleToken.Withdraw) &FlowToken.Vault>(from: /storage/flowTokenVault)\n            ?? panic(\"The signer does not store a FlowToken Vault object at the path \"\n                    .concat(\"/storage/flowTokenVault. \")\n                    .concat(\"The signer must initialize their account with this vault first!\"))\n    }\n\n    execute {\n        self.vaultRef.deposit(from: <-self.holderRef.withdraw(amount: amount))\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90561b904ec696d706f72742046756e6769626c65546f6b656e2066726f6d203078663233336463656538386665306162650a696d706f727420466c6f77546f6b656e2066726f6d203078313635343635333339393034306136310a696d706f7274204c6f636b6564546f6b656e732066726f6d203078386430653837623635313539616536330a0a7472616e73616374696f6e28616d6f756e743a2055466978363429207b0a0a202020206c657420686f6c6465725265663a2061757468284c6f636b6564546f6b656e732e546f6b656e4f7065726174696f6e732c2046756e6769626c65546f6b656e2e57697468647261772920264c6f636b6564546f6b656e732e546f6b656e486f6c6465720a202020206c6574207661756c745265663a20617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c740a0a202020207072657061726528616363743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e686f6c646572526566203d20616363742e73746f726167652e626f72726f773c61757468284c6f636b6564546f6b656e732e546f6b656e4f7065726174696f6e732c2046756e6769626c65546f6b656e2e57697468647261772920264c6f636b6564546f6b656e732e546f6b656e486f6c6465723e2866726f6d3a204c6f636b6564546f6b656e732e546f6b656e486f6c64657253746f7261676550617468290a2020202020202020202020203f3f2070616e6963282243616e6e6f74207769746864726177206c6f636b656420746f6b656e732120546865207369676e6572206f6620746865207472616e73616374696f6e20220a20202020202020202020202020202020202020202e636f6e6361742822646f6573206e6f74206861766520616e206173736f636961746564206c6f636b6564206163636f756e742c2022290a20202020202020202020202020202020202020202e636f6e6361742822736f20746865726520617265206e6f206c6f636b656420746f6b656e7320746f2077697468647261772e2229290a0a202020202020202073656c662e7661756c74526566203d20616363742e73746f726167652e626f72726f773c617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c743e2866726f6d3a202f73746f726167652f666c6f77546f6b656e5661756c74290a2020202020202020202020203f3f2070616e69632822546865207369676e657220646f6573206e6f742073746f7265206120466c6f77546f6b656e205661756c74206f626a65637420617420746865207061746820220a20202020202020202020202020202020202020202e636f6e63617428222f73746f726167652f666c6f77546f6b656e5661756c742e2022290a20202020202020202020202020202020202020202e636f6e6361742822546865207369676e6572206d75737420696e697469616c697a65207468656972206163636f756e7420776974682074686973207661756c74206669727374212229290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7661756c745265662e6465706f7369742866726f6d3a203c2d73656c662e686f6c6465725265662e776974686472617728616d6f756e743a20616d6f756e7429290a202020207d0a7d0af1b07b2274797065223a22554669783634222c2276616c7565223a2239323233333732303336382e3534373735383038227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90565f90561b904ec696d706f72742046756e6769626c65546f6b656e2066726f6d203078663233336463656538386665306162650a696d706f727420466c6f77546f6b656e2066726f6d203078313635343635333339393034306136310a696d706f7274204c6f636b6564546f6b656e732066726f6d203078386430653837623635313539616536330a0a7472616e73616374696f6e28616d6f756e743a2055466978363429207b0a0a202020206c657420686f6c6465725265663a2061757468284c6f636b6564546f6b656e732e546f6b656e4f7065726174696f6e732c2046756e6769626c65546f6b656e2e57697468647261772920264c6f636b6564546f6b656e732e546f6b656e486f6c6465720a202020206c6574207661756c745265663a20617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c740a0a202020207072657061726528616363743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e686f6c646572526566203d20616363742e73746f726167652e626f72726f773c61757468284c6f636b6564546f6b656e732e546f6b656e4f7065726174696f6e732c2046756e6769626c65546f6b656e2e57697468647261772920264c6f636b6564546f6b656e732e546f6b656e486f6c6465723e2866726f6d3a204c6f636b6564546f6b656e732e546f6b656e486f6c64657253746f7261676550617468290a2020202020202020202020203f3f2070616e6963282243616e6e6f74207769746864726177206c6f636b656420746f6b656e732120546865207369676e6572206f6620746865207472616e73616374696f6e20220a20202020202020202020202020202020202020202e636f6e6361742822646f6573206e6f74206861766520616e206173736f636961746564206c6f636b6564206163636f756e742c2022290a20202020202020202020202020202020202020202e636f6e6361742822736f20746865726520617265206e6f206c6f636b656420746f6b656e7320746f2077697468647261772e2229290a0a202020202020202073656c662e7661756c74526566203d20616363742e73746f726167652e626f72726f773c617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c743e2866726f6d3a202f73746f726167652f666c6f77546f6b656e5661756c74290a2020202020202020202020203f3f2070616e69632822546865207369676e657220646f6573206e6f742073746f7265206120466c6f77546f6b656e205661756c74206f626a65637420617420746865207061746820220a20202020202020202020202020202020202020202e636f6e63617428222f73746f726167652f666c6f77546f6b656e5661756c742e2022290a20202020202020202020202020202020202020202e636f6e6361742822546865207369676e6572206d75737420696e697469616c697a65207468656972206163636f756e7420776974682074686973207661756c74206669727374212229290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7661756c745265662e6465706f7369742866726f6d3a203c2d73656c662e686f6c6465725265662e776974686472617728616d6f756e743a20616d6f756e7429290a202020207d0a7d0af1b07b2274797065223a22554669783634222c2276616c7565223a2239323233333732303336382e3534373735383038227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02d47cbe3e9d3cb2a9cefec7239fb91c176e9c7979fe345e3ada4ad7c79adb9efbdb6fc54bee86ff8933fd39d53bda1bd713c8a3c8d6d57be9cb415152d1d4c6f4576974686472617720556e6c6f636b656420464c4f57000101416d6f756e7400005546697836340003",
    "hash": "db6fc54bee86ff8933fd39d53bda1bd713c8a3c8d6d57be9cb415152d1d4c6f4"
  },
  {
    "title": "TH.02 - Deposit Unlocked FLOW",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FungibleToken from 0xf233dcee88fe0abe\nimport FlowToken from 0x1654653399040a61\nimport LockedTokens from 0x8d0e87b65159ae63\n\ntransaction(amount: UFix64) {\n\n    let holderRef: &LockedTokens.TokenHolder\n    let vaultRef: auth(FungibleToken.Withdraw) &FlowToken.Vault\n\n    prepare(acct: auth(BorrowValue) &Account) {\n        self.holderRef = acct.storage.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"Cannot deposit tokens to a locked account! The signer of the transaction \"\n                    .concat(\"does not have an associated locked account, \")\n                    .concat(\"so there is nowhere to deposit the tokens.\"))\n\n        self.vaultRef = acct.storage.borrow<auth(FungibleToken.Withdraw) &FlowToken.Vault>(from: /storage/flowTokenVault)\n            ?? panic(\"The signer does not store a FlowToken Vault object at the path \"\n                    .concat(\"/storage/flowTokenVault. \")\n                    .concat(\"The signer must initialize their account with this vault first!\"))\n    }\n\n    execute {\n        self.holderRef.deposit(from: <-self.vaultRef.withdraw(amount: amount))\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FungibleToken from 0xf233dcee88fe0abe\nimport FlowToken from 0x1654653399040a61\nimport LockedTokens from 0x8d0e87b65159ae63\n\ntransaction(amount: UFix64) {\n\n    let holderRef: &LockedTokens.TokenHolder\n    let vaultRef: auth(FungibleToken.Withdraw) &FlowToken.Vault\n\n    prepare(acct: auth(BorrowValue) &Account) {\n        self.holderRef = acct.storage.borrow<&LockedTokens.TokenHolder>(from: LockedTokens.TokenHolderStoragePath)\n            ?? panic(\"Cannot deposit tokens to a locked account! The signer of the transaction \"\n                    .concat(\"does not have an associated locked account, \")\n                    .concat(\"so there is nowhere to deposit the tokens.\"))\n\n        self.vaultRef = acct.storage.borrow<auth(FungibleToken.Withdraw) &FlowToken.Vault>(from: /storage/flowTokenVault)\n            ?? panic(\"The signer does not store a FlowToken Vault object at the path \"\n                    .concat(\"/storage/flowTokenVault. \")\n                    .concat(\"The signer must initialize their account with this vault first!\"))\n    }\n\n    execute {\n        self.holderRef.deposit(from: <-self.vaultRef.withdraw(amount: amount))\n    }\n}\n",
      "arguments": [
        {
          "type": "UFix64",
          "value": "92233720368.54775808"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f904f7b90482696d706f72742046756e6769626c65546f6b656e2066726f6d203078663233336463656538386665306162650a696d706f727420466c6f77546f6b656e2066726f6d203078313635343635333339393034306136310a696d706f7274204c6f636b6564546f6b656e732066726f6d203078386430653837623635313539616536330a0a7472616e73616374696f6e28616d6f756e743a2055466978363429207b0a0a202020206c657420686f6c6465725265663a20264c6f636b6564546f6b656e732e546f6b656e486f6c6465720a202020206c6574207661756c745265663a20617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c740a0a202020207072657061726528616363743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e686f6c646572526566203d20616363742e73746f726167652e626f72726f773c264c6f636b6564546f6b656e732e546f6b656e486f6c6465723e2866726f6d3a204c6f636b6564546f6b656e732e546f6b656e486f6c64657253746f7261676550617468290a2020202020202020202020203f3f2070616e6963282243616e6e6f74206465706f73697420746f6b656e7320746f2061206c6f636b6564206163636f756e742120546865207369676e6572206f6620746865207472616e73616374696f6e20220a20202020202020202020202020202020202020202e636f6e6361742822646f6573206e6f74206861766520616e206173736f636961746564206c6f636b6564206163636f756e742c2022290a20202020202020202020202020202020202020202e636f6e6361742822736f207468657265206973206e6f776865726520746f206465706f7369742074686520746f6b656e732e2229290a0a202020202020202073656c662e7661756c74526566203d20616363742e73746f726167652e626f72726f773c617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c743e2866726f6d3a202f73746f726167652f666c6f77546f6b656e5661756c74290a2020202020202020202020203f3f2070616e69632822546865207369676e657220646f6573206e6f742073746f7265206120466c6f77546f6b656e205661756c74206f626a65637420617420746865207061746820220a20202020202020202020202020202020202020202e636f6e63617428222f73746f726167652f666c6f77546f6b656e5661756c742e2022290a20202020202020202020202020202020202020202e636f6e6361742822546865207369676e6572206d75737420696e697469616c697a65207468656972206163636f756e7420776974682074686973207661756c74206669727374212229290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e686f6c6465725265662e6465706f7369742866726f6d3a203c2d73656c662e7661756c745265662e776974686472617728616d6f756e743a20616d6f756e7429290a202020207d0a7d0af1b07b2274797065223a22554669783634222c2276616c7565223a2239323233333732303336382e3534373735383038227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f904fbf904f7b90482696d706f72742046756e6769626c65546f6b656e2066726f6d203078663233336463656538386665306162650a696d706f727420466c6f77546f6b656e2066726f6d203078313635343635333339393034306136310a696d706f7274204c6f636b6564546f6b656e732066726f6d203078386430653837623635313539616536330a0a7472616e73616374696f6e28616d6f756e743a2055466978363429207b0a0a202020206c657420686f6c6465725265663a20264c6f636b6564546f6b656e732e546f6b656e486f6c6465720a202020206c6574207661756c745265663a20617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c740a0a202020207072657061726528616363743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e686f6c646572526566203d20616363742e73746f726167652e626f72726f773c264c6f636b6564546f6b656e732e546f6b656e486f6c6465723e2866726f6d3a204c6f636b6564546f6b656e732e546f6b656e486f6c64657253746f7261676550617468290a2020202020202020202020203f3f2070616e6963282243616e6e6f74206465706f73697420746f6b656e7320746f2061206c6f636b6564206163636f756e742120546865207369676e6572206f6620746865207472616e73616374696f6e20220a20202020202020202020202020202020202020202e636f6e6361742822646f6573206e6f74206861766520616e206173736f636961746564206c6f636b6564206163636f756e742c2022290a20202020202020202020202020202020202020202e636f6e6361742822736f207468657265206973206e6f776865726520746f206465706f7369742074686520746f6b656e732e2229290a0a202020202020202073656c662e7661756c74526566203d20616363742e73746f726167652e626f72726f773c617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c743e2866726f6d3a202f73746f726167652f666c6f77546f6b656e5661756c74290a2020202020202020202020203f3f2070616e69632822546865207369676e657220646f6573206e6f742073746f7265206120466c6f77546f6b656e205661756c74206f626a65637420617420746865207061746820220a20202020202020202020202020202020202020202e636f6e63617428222f73746f726167652f666c6f77546f6b656e5661756c742e2022290a20202020202020202020202020202020202020202e636f6e6361742822546865207369676e6572206d75737420696e697469616c697a65207468656972206163636f756e7420776974682074686973207661756c74206669727374212229290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e686f6c6465725265662e6465706f7369742866726f6d3a203c2d73656c662e7661756c745265662e776974686472617728616d6f756e743a20616d6f756e7429290a202020207d0a7d0af1b07b2274797065223a22554669783634222c2276616c7565223a2239323233333732303336382e3534373735383038227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02fb6e05f6d90c949de3044ae81ac3189c3fa797fe67e56604a6b3a6d88940158673e043f0c811e990d4f6f125c3f80ff015f5e0a972a75c02ddb61501d83a367f4465706f73697420556e6c6f636b656420464c4f57000101416d6f756e7400005546697836340003",
    "hash": "73e043f0c811e990d4f6f125c3f80ff015f5e0a972a75c02ddb61501d83a367f"
  },
  {
    "title": "SCO.01 - Setup Staking Collection",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FungibleToken from 0xf233dcee88fe0abe\nimport FlowToken from 0x1654653399040a61\nimport FlowIDTableStaking from 0x8624b52f9ddcd04a\nimport LockedTokens from 0x8d0e87b65159ae63\nimport FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// This transaction sets up an account to use a staking collection\n/// It will work regardless of whether they have a regular account, a two-account locked tokens setup,\n/// or staking objects stored in the unlocked account\n\ntransaction {\n    prepare(signer: auth(BorrowValue, Storage, Capabilities) &Account) {\n\n        // If there isn't already a staking collection\n        if signer.storage.borrow<&FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath) == nil {\n\n            // Create private capabilities for the token holder and unlocked vault\n            let lockedHolder = signer.capabilities.storage.issue<auth(FungibleToken.Withdraw, LockedTokens.TokenOperations) &LockedTokens.TokenHolder>(LockedTokens.TokenHolderStoragePath)!\n            let flowToken = signer.capabilities.storage.issue<auth(FungibleToken.Withdraw) &FlowToken.Vault>(/storage/flowTokenVault)!\n\n            // Create a new Staking Collection and put it in storage\n            if lockedHolder.check() {\n                signer.storage.save(\n                    <- FlowStakingCollection.createStakingCollection(\n                        unlockedVault: flowToken,\n                        tokenHolder: lockedHolder\n                    ),\n                    to: FlowStakingCollection.StakingCollectionStoragePath\n                )\n            } else {\n                signer.storage.save(\n                    <- FlowStakingCollection.createStakingCollection(\n                        unlockedVault: flowToken,\n                        tokenHolder: nil\n                    ),\n                    to: FlowStakingCollection.StakingCollectionStoragePath\n                )\n            }\n\n            // Publish a capability to the created staking collection.\n            let stakingCollectionCap = signer.capabilities.storage.issue<&FlowStakingCollection.StakingCollection>(\n                FlowStakingCollection.StakingCollectionStoragePath\n            )\n\n            signer.capabilities.publish(\n                stakingCollectionCap,\n                at: FlowStakingCollection.StakingCollectionPublicPath\n            )\n        }\n\n        // borrow a reference to the staking collection\n        let collectionRef = signer.storage.borrow<&FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow staking collection reference\")\n\n        // If there is a node staker object in the account, put it in the staking collection\n        if signer.storage.borrow<&FlowIDTableStaking.NodeStaker>(from: FlowIDTableStaking.NodeStakerStoragePath) != nil {\n            let node <- signer.storage.load<@FlowIDTableStaking.NodeStaker>(from: FlowIDTableStaking.NodeStakerStoragePath)!\n            collectionRef.addNodeObject(<-node, machineAccountInfo: nil)\n        }\n\n        // If there is a delegator object in the account, put it in the staking collection\n        if signer.storage.borrow<&FlowIDTableStaking.NodeDelegator>(from: FlowIDTableStaking.DelegatorStoragePath) != nil {\n            let delegator <- signer.storage.load<@FlowIDTableStaking.NodeDelegator>(from: FlowIDTableStaking.DelegatorStoragePath)!\n            collectionRef.addDelegatorObject(<-delegator)\n        }\n    }\n}\n",
      "arguments": [],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FungibleToken from 0xf233dcee88fe0abe\nimport FlowToken from 0x1654653399040a61\nimport FlowIDTableStaking from 0x8624b52f9ddcd04a\nimport LockedTokens from 0x8d0e87b65159ae63\nimport FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// This transaction sets up an account to use a staking collection\n/// It will work regardless of whether they have a regular account, a two-account locked tokens setup,\n/// or staking objects stored in the unlocked account\n\ntransaction {\n    prepare(signer: auth(BorrowValue, Storage, Capabilities) &Account) {\n\n        // If there isn't already a staking collection\n        if signer.storage.borrow<&FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath) == nil {\n\n            // Create private capabilities for the token holder and unlocked vault\n            let lockedHolder = signer.capabilities.storage.issue<auth(FungibleToken.Withdraw, LockedTokens.TokenOperations) &LockedTokens.TokenHolder>(LockedTokens.TokenHolderStoragePath)!\n            let flowToken = signer.capabilities.storage.issue<auth(FungibleToken.Withdraw) &FlowToken.Vault>(/storage/flowTokenVault)!\n\n            // Create a new Staking Collection and put it in storage\n            if lockedHolder.check() {\n                signer.storage.save(\n                    <- FlowStakingCollection.createStakingCollection(\n                        unlockedVault: flowToken,\n                        tokenHolder: lockedHolder\n                    ),\n                    to: FlowStakingCollection.StakingCollectionStoragePath\n                )\n            } else {\n                signer.storage.save(\n                    <- FlowStakingCollection.createStakingCollection(\n                        unlockedVault: flowToken,\n                        tokenHolder: nil\n                    ),\n                    to: FlowStakingCollection.StakingCollectionStoragePath\n                )\n            }\n\n            // Publish a capability to the created staking collection.\n            let stakingCollectionCap = signer.capabilities.storage.issue<&FlowStakingCollection.StakingCollection>(\n                FlowStakingCollection.StakingCollectionStoragePath\n            )\n\n            signer.capabilities.publish(\n                stakingCollectionCap,\n                at: FlowStakingCollection.StakingCollectionPublicPath\n            )\n        }\n\n        // borrow a reference to the staking collection\n        let collectionRef = signer.storage.borrow<&FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(\"Could not borrow staking collection reference\")\n\n        // If there is a node staker object in the account, put it in the staking collection\n        if signer.storage.borrow<&FlowIDTableStaking.NodeStaker>(from: FlowIDTableStaking.NodeStakerStoragePath) != nil {\n            let node <- signer.storage.load<@FlowIDTableStaking.NodeStaker>(from: FlowIDTableStaking.NodeStakerStoragePath)!\n            collectionRef.addNodeObject(<-node, machineAccountInfo: nil)\n        }\n\n        // If there is a delegator object in the account, put it in the staking collection\n        if signer.storage.borrow<&FlowIDTableStaking.NodeDelegator>(from: FlowIDTableStaking.DelegatorStoragePath) != nil {\n            let delegator <- signer.storage.load<@FlowIDTableStaking.NodeDelegator>(from: FlowIDTableStaking.DelegatorStoragePath)!\n            collectionRef.addDelegatorObject(<-delegator)\n        }\n    }\n}\n",
      "arguments": [],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90df1b90dad696d706f72742046756e6769626c65546f6b656e2066726f6d203078663233336463656538386665306162650a696d706f727420466c6f77546f6b656e2066726f6d203078313635343635333339393034306136310a696d706f727420466c6f7749445461626c655374616b696e672066726f6d203078383632346235326639646463643034610a696d706f7274204c6f636b6564546f6b656e732066726f6d203078386430653837623635313539616536330a696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f2054686973207472616e73616374696f6e207365747320757020616e206163636f756e7420746f207573652061207374616b696e6720636f6c6c656374696f6e0a2f2f2f2049742077696c6c20776f726b207265676172646c657373206f66207768657468657220746865792068617665206120726567756c6172206163636f756e742c20612074776f2d6163636f756e74206c6f636b656420746f6b656e732073657475702c0a2f2f2f206f72207374616b696e67206f626a656374732073746f72656420696e2074686520756e6c6f636b6564206163636f756e740a0a7472616e73616374696f6e207b0a2020202070726570617265287369676e65723a206175746828426f72726f7756616c75652c2053746f726167652c204361706162696c69746965732920264163636f756e7429207b0a0a20202020202020202f2f2049662074686572652069736e277420616c72656164792061207374616b696e6720636f6c6c656374696f6e0a20202020202020206966207369676e65722e73746f726167652e626f72726f773c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f726167655061746829203d3d206e696c207b0a0a2020202020202020202020202f2f204372656174652070726976617465206361706162696c697469657320666f722074686520746f6b656e20686f6c64657220616e6420756e6c6f636b6564207661756c740a2020202020202020202020206c6574206c6f636b6564486f6c646572203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c617574682846756e6769626c65546f6b656e2e57697468647261772c204c6f636b6564546f6b656e732e546f6b656e4f7065726174696f6e732920264c6f636b6564546f6b656e732e546f6b656e486f6c6465723e284c6f636b6564546f6b656e732e546f6b656e486f6c64657253746f726167655061746829210a2020202020202020202020206c657420666c6f77546f6b656e203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c743e282f73746f726167652f666c6f77546f6b656e5661756c7429210a0a2020202020202020202020202f2f204372656174652061206e6577205374616b696e6720436f6c6c656374696f6e20616e642070757420697420696e2073746f726167650a2020202020202020202020206966206c6f636b6564486f6c6465722e636865636b2829207b0a202020202020202020202020202020207369676e65722e73746f726167652e73617665280a20202020202020202020202020202020202020203c2d20466c6f775374616b696e67436f6c6c656374696f6e2e6372656174655374616b696e67436f6c6c656374696f6e280a202020202020202020202020202020202020202020202020756e6c6f636b65645661756c743a20666c6f77546f6b656e2c0a202020202020202020202020202020202020202020202020746f6b656e486f6c6465723a206c6f636b6564486f6c6465720a2020202020202020202020202020202020202020292c0a2020202020202020202020202020202020202020746f3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f72616765506174680a20202020202020202020202020202020290a2020202020202020202020207d20656c7365207b0a202020202020202020202020202020207369676e65722e73746f726167652e73617665280a20202020202020202020202020202020202020203c2d20466c6f775374616b696e67436f6c6c656374696f6e2e6372656174655374616b696e67436f6c6c656374696f6e280a202020202020202020202020202020202020202020202020756e6c6f636b65645661756c743a20666c6f77546f6b656e2c0a202020202020202020202020202020202020202020202020746f6b656e486f6c6465723a206e696c0a2020202020202020202020202020202020202020292c0a2020202020202020202020202020202020202020746f3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f72616765506174680a20202020202020202020202020202020290a2020202020202020202020207d0a0a2020202020202020202020202f2f205075626c6973682061206361706162696c69747920746f207468652063726561746564207374616b696e6720636f6c6c656374696f6e2e0a2020202020202020202020206c6574207374616b696e67436f6c6c656374696f6e436170203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e280a20202020202020202020202020202020466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f72616765506174680a202020202020202020202020290a0a2020202020202020202020207369676e65722e6361706162696c69746965732e7075626c697368280a202020202020202020202020202020207374616b696e67436f6c6c656374696f6e4361702c0a2020202020202020202020202020202061743a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e5075626c6963506174680a202020202020202020202020290a20202020202020207d0a0a20202020202020202f2f20626f72726f772061207265666572656e636520746f20746865207374616b696e6720636f6c6c656374696f6e0a20202020202020206c657420636f6c6c656374696f6e526566203d207369676e65722e73746f726167652e626f72726f773c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f77207374616b696e6720636f6c6c656374696f6e207265666572656e636522290a0a20202020202020202f2f2049662074686572652069732061206e6f6465207374616b6572206f626a65637420696e20746865206163636f756e742c2070757420697420696e20746865207374616b696e6720636f6c6c656374696f6e0a20202020202020206966207369676e65722e73746f726167652e626f72726f773c26466c6f7749445461626c655374616b696e672e4e6f64655374616b65723e2866726f6d3a20466c6f7749445461626c655374616b696e672e4e6f64655374616b657253746f72616765506174682920213d206e696c207b0a2020202020202020202020206c6574206e6f6465203c2d207369676e65722e73746f726167652e6c6f61643c40466c6f7749445461626c655374616b696e672e4e6f64655374616b65723e2866726f6d3a20466c6f7749445461626c655374616b696e672e4e6f64655374616b657253746f726167655061746829210a202020202020202020202020636f6c6c656374696f6e5265662e6164644e6f64654f626a656374283c2d6e6f64652c206d616368696e654163636f756e74496e666f3a206e696c290a20202020202020207d0a0a20202020202020202f2f20496620746865726520697320612064656c656761746f72206f626a65637420696e20746865206163636f756e742c2070757420697420696e20746865207374616b696e6720636f6c6c656374696f6e0a20202020202020206966207369676e65722e73746f726167652e626f72726f773c26466c6f7749445461626c655374616b696e672e4e6f646544656c656761746f723e2866726f6d3a20466c6f7749445461626c655374616b696e672e44656c656761746f7253746f72616765506174682920213d206e696c207b0a2020202020202020202020206c65742064656c656761746f72203c2d207369676e65722e73746f726167652e6c6f61643c40466c6f7749445461626c655374616b696e672e4e6f646544656c656761746f723e2866726f6d3a20466c6f7749445461626c655374616b696e672e44656c656761746f7253746f726167655061746829210a202020202020202020202020636f6c6c656374696f6e5265662e61646444656c656761746f724f626a656374283c2d64656c656761746f72290a20202020202020207d0a202020207d0a7d0ac0a0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90df5f90df1b90dad696d706f72742046756e6769626c65546f6b656e2066726f6d203078663233336463656538386665306162650a696d706f727420466c6f77546f6b656e2066726f6d203078313635343635333339393034306136310a696d706f727420466c6f7749445461626c655374616b696e672066726f6d203078383632346235326639646463643034610a696d706f7274204c6f636b6564546f6b656e732066726f6d203078386430653837623635313539616536330a696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f2054686973207472616e73616374696f6e207365747320757020616e206163636f756e7420746f207573652061207374616b696e6720636f6c6c656374696f6e0a2f2f2f2049742077696c6c20776f726b207265676172646c657373206f66207768657468657220746865792068617665206120726567756c6172206163636f756e742c20612074776f2d6163636f756e74206c6f636b656420746f6b656e732073657475702c0a2f2f2f206f72207374616b696e67206f626a656374732073746f72656420696e2074686520756e6c6f636b6564206163636f756e740a0a7472616e73616374696f6e207b0a2020202070726570617265287369676e65723a206175746828426f72726f7756616c75652c2053746f726167652c204361706162696c69746965732920264163636f756e7429207b0a0a20202020202020202f2f2049662074686572652069736e277420616c72656164792061207374616b696e6720636f6c6c656374696f6e0a20202020202020206966207369676e65722e73746f726167652e626f72726f773c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f726167655061746829203d3d206e696c207b0a0a2020202020202020202020202f2f204372656174652070726976617465206361706162696c697469657320666f722074686520746f6b656e20686f6c64657220616e6420756e6c6f636b6564207661756c740a2020202020202020202020206c6574206c6f636b6564486f6c646572203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c617574682846756e6769626c65546f6b656e2e57697468647261772c204c6f636b6564546f6b656e732e546f6b656e4f7065726174696f6e732920264c6f636b6564546f6b656e732e546f6b656e486f6c6465723e284c6f636b6564546f6b656e732e546f6b656e486f6c64657253746f726167655061746829210a2020202020202020202020206c657420666c6f77546f6b656e203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c617574682846756e6769626c65546f6b656e2e5769746864726177292026466c6f77546f6b656e2e5661756c743e282f73746f726167652f666c6f77546f6b656e5661756c7429210a0a2020202020202020202020202f2f204372656174652061206e6577205374616b696e6720436f6c6c656374696f6e20616e642070757420697420696e2073746f726167650a2020202020202020202020206966206c6f636b6564486f6c6465722e636865636b2829207b0a202020202020202020202020202020207369676e65722e73746f726167652e73617665280a20202020202020202020202020202020202020203c2d20466c6f775374616b696e67436f6c6c656374696f6e2e6372656174655374616b696e67436f6c6c656374696f6e280a202020202020202020202020202020202020202020202020756e6c6f636b65645661756c743a20666c6f77546f6b656e2c0a202020202020202020202020202020202020202020202020746f6b656e486f6c6465723a206c6f636b6564486f6c6465720a2020202020202020202020202020202020202020292c0a2020202020202020202020202020202020202020746f3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f72616765506174680a20202020202020202020202020202020290a2020202020202020202020207d20656c7365207b0a202020202020202020202020202020207369676e65722e73746f726167652e73617665280a20202020202020202020202020202020202020203c2d20466c6f775374616b696e67436f6c6c656374696f6e2e6372656174655374616b696e67436f6c6c656374696f6e280a202020202020202020202020202020202020202020202020756e6c6f636b65645661756c743a20666c6f77546f6b656e2c0a202020202020202020202020202020202020202020202020746f6b656e486f6c6465723a206e696c0a2020202020202020202020202020202020202020292c0a2020202020202020202020202020202020202020746f3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f72616765506174680a20202020202020202020202020202020290a2020202020202020202020207d0a0a2020202020202020202020202f2f205075626c6973682061206361706162696c69747920746f207468652063726561746564207374616b696e6720636f6c6c656374696f6e2e0a2020202020202020202020206c6574207374616b696e67436f6c6c656374696f6e436170203d207369676e65722e6361706162696c69746965732e73746f726167652e69737375653c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e280a20202020202020202020202020202020466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f72616765506174680a202020202020202020202020290a0a2020202020202020202020207369676e65722e6361706162696c69746965732e7075626c697368280a202020202020202020202020202020207374616b696e67436f6c6c656374696f6e4361702c0a2020202020202020202020202020202061743a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e5075626c6963506174680a202020202020202020202020290a20202020202020207d0a0a20202020202020202f2f20626f72726f772061207265666572656e636520746f20746865207374616b696e6720636f6c6c656374696f6e0a20202020202020206c657420636f6c6c656374696f6e526566203d207369676e65722e73746f726167652e626f72726f773c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420626f72726f77207374616b696e6720636f6c6c656374696f6e207265666572656e636522290a0a20202020202020202f2f2049662074686572652069732061206e6f6465207374616b6572206f626a65637420696e20746865206163636f756e742c2070757420697420696e20746865207374616b696e6720636f6c6c656374696f6e0a20202020202020206966207369676e65722e73746f726167652e626f72726f773c26466c6f7749445461626c655374616b696e672e4e6f64655374616b65723e2866726f6d3a20466c6f7749445461626c655374616b696e672e4e6f64655374616b657253746f72616765506174682920213d206e696c207b0a2020202020202020202020206c6574206e6f6465203c2d207369676e65722e73746f726167652e6c6f61643c40466c6f7749445461626c655374616b696e672e4e6f64655374616b65723e2866726f6d3a20466c6f7749445461626c655374616b696e672e4e6f64655374616b657253746f726167655061746829210a202020202020202020202020636f6c6c656374696f6e5265662e6164644e6f64654f626a656374283c2d6e6f64652c206d616368696e654163636f756e74496e666f3a206e696c290a20202020202020207d0a0a20202020202020202f2f20496620746865726520697320612064656c656761746f72206f626a65637420696e20746865206163636f756e742c2070757420697420696e20746865207374616b696e6720636f6c6c656374696f6e0a20202020202020206966207369676e65722e73746f726167652e626f72726f773c26466c6f7749445461626c655374616b696e672e4e6f646544656c656761746f723e2866726f6d3a20466c6f7749445461626c655374616b696e672e44656c656761746f7253746f72616765506174682920213d206e696c207b0a2020202020202020202020206c65742064656c656761746f72203c2d207369676e65722e73746f726167652e6c6f61643c40466c6f7749445461626c655374616b696e672e4e6f646544656c656761746f723e2866726f6d3a20466c6f7749445461626c655374616b696e672e44656c656761746f7253746f726167655061746829210a202020202020202020202020636f6c6c656374696f6e5265662e61646444656c656761746f724f626a656374283c2d64656c656761746f72290a20202020202020207d0a202020207d0a7d0ac0a0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02861784e7ac135a9cfec90decdff2e53971a4d63135db77bcef3b273b710b181469f30decc15bd78107c631e200963398e8ddbc58bb61e577d223725f348fc2d95365747570205374616b696e6720436f6c6c656374696f6e0000",
    "hash": "69f30decc15bd78107c631e200963398e8ddbc58bb61e577d223725f348fc2d9"
  },
  {
    "title": "SCO.02 - Register Delegator",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Registers a delegator in the staking collection resource\n/// for the specified nodeID and the amount of tokens to commit\n\ntransaction(id: String, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.registerDelegator(nodeID: id, amount: amount)      \n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Registers a delegator in the staking collection resource\n/// for the specified nodeID and the amount of tokens to commit\n\ntransaction(id: String, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.registerDelegator(nodeID: id, amount: amount)      \n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f903e7b90313696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f2052656769737465727320612064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e207265736f757263650a2f2f2f20666f722074686520737065636966696564206e6f6465494420616e642074686520616d6f756e74206f6620746f6b656e7320746f20636f6d6d69740a0a7472616e73616374696f6e2869643a20537472696e672c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e726567697374657244656c656761746f72286e6f646549443a2069642c20616d6f756e743a20616d6f756e74292020202020200a202020207d0a7d0af88fb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f903ebf903e7b90313696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f2052656769737465727320612064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e207265736f757263650a2f2f2f20666f722074686520737065636966696564206e6f6465494420616e642074686520616d6f756e74206f6620746f6b656e7320746f20636f6d6d69740a0a7472616e73616374696f6e2869643a20537472696e672c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e726567697374657244656c656761746f72286e6f646549443a2069642c20616d6f756e743a20616d6f756e74292020202020200a202020207d0a7d0af88fb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02e477ffd71af218099bdf2305894f39f194d5caddcc55233b899a6cab8be137fe38eb95207a8f765441d110dfd46ea3c51dc69d2bcdaa9468e9ca9260609d155852656769737465722044656c656761746f720002044e6f6465204944000001416d6f756e7400015546697836340003",
    "hash": "38eb95207a8f765441d110dfd46ea3c51dc69d2bcdaa9468e9ca9260609d1558"
  },
  {
    "title": "SCO.03 - Register Node",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import Crypto\nimport FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Registers a delegator in the staking collection resource\n/// for the specified node information and the amount of tokens to commit\n\ntransaction(id: String,\n            role: UInt8,\n            networkingAddress: String,\n            networkingKey: String,\n            stakingKey: String,\n            amount: UFix64,\n            machineAccountKey: String, \n            machineAccountKeySignatureAlgorithm: UInt8, \n            machineAccountKeyHashAlgorithm: UInt8) {\n\n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n\n        if let machineAccount = self.stakingCollectionRef.registerNode(\n            id: id,\n            role: role,\n            networkingAddress: networkingAddress,\n            networkingKey: networkingKey,\n            stakingKey: stakingKey,\n            amount: amount,\n            payer: account\n        ) {\n            let sigAlgo = SignatureAlgorithm(rawValue: machineAccountKeySignatureAlgorithm)\n                ?? panic(\"Cannot register node with provided machine account key: Must provide a signature algorithm raw value that corresponds to \"\n                .concat(\"one of the available signature algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(machineAccountKeySignatureAlgorithm.toString())\n                .concat(\" but the options are either 1 (ECDSA_P256), 2 (ECDSA_secp256k1), or 3 (BLS_BLS12_381).\"))\n\n            let hashAlgo = HashAlgorithm(rawValue: machineAccountKeyHashAlgorithm)\n                ?? panic(\"Cannot register node with the provided machine account key: Must provide a hash algorithm raw value that corresponds to \"\n                .concat(\"one of of the available hash algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(machineAccountKeyHashAlgorithm.toString())\n                .concat(\" but the options are 1 (SHA2_256), 2 (SHA2_384), 3 (SHA3_256), \")\n                .concat(\"4 (SHA3_384), 5 (KMAC128_BLS_BLS12_381), or 6 (KECCAK_256).\"))\n            \n            let publicKey = PublicKey(\n\t\t\t    publicKey: machineAccountKey.decodeHex(),\n\t\t\t    signatureAlgorithm: sigAlgo\n\t\t    )\n            machineAccount.keys.add(publicKey: publicKey, hashAlgorithm: hashAlgo, weight: 1000.0)\n        }\n    }\n}",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "flow-node.test:3569",
          "type": "String"
        },
        {
          "value": "1348307bc77c688e80049de9d081aa09755da33e6997605fa059db2144fc85e560cbe6f7da8d74b453f5916618cb8fd392c2db856f3e78221dc68db1b1d914e4",
          "type": "String"
        },
        {
          "value": "8dec36ed8a91e3e5d737b06434d94a8a561c7889495d6c7081cd5e123a42124415b9391c9b9aa165c2f71994bf9607cb0ea262ad162fec74146d1ebc482a33b9dad203d16a83bbfda89b3f6e1cd1d8fb2e704a162d259a0ac9f26bc8635d74f6",
          "type": "String"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        },
        {
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164",
          "type": "String"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import Crypto\nimport FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Registers a delegator in the staking collection resource\n/// for the specified node information and the amount of tokens to commit\n\ntransaction(id: String,\n            role: UInt8,\n            networkingAddress: String,\n            networkingKey: String,\n            stakingKey: String,\n            amount: UFix64,\n            machineAccountKey: String, \n            machineAccountKeySignatureAlgorithm: UInt8, \n            machineAccountKeyHashAlgorithm: UInt8) {\n\n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n\n        if let machineAccount = self.stakingCollectionRef.registerNode(\n            id: id,\n            role: role,\n            networkingAddress: networkingAddress,\n            networkingKey: networkingKey,\n            stakingKey: stakingKey,\n            amount: amount,\n            payer: account\n        ) {\n            let sigAlgo = SignatureAlgorithm(rawValue: machineAccountKeySignatureAlgorithm)\n                ?? panic(\"Cannot register node with provided machine account key: Must provide a signature algorithm raw value that corresponds to \"\n                .concat(\"one of the available signature algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(machineAccountKeySignatureAlgorithm.toString())\n                .concat(\" but the options are either 1 (ECDSA_P256), 2 (ECDSA_secp256k1), or 3 (BLS_BLS12_381).\"))\n\n            let hashAlgo = HashAlgorithm(rawValue: machineAccountKeyHashAlgorithm)\n                ?? panic(\"Cannot register node with the provided machine account key: Must provide a hash algorithm raw value that corresponds to \"\n                .concat(\"one of of the available hash algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(machineAccountKeyHashAlgorithm.toString())\n                .concat(\" but the options are 1 (SHA2_256), 2 (SHA2_384), 3 (SHA3_256), \")\n                .concat(\"4 (SHA3_384), 5 (KMAC128_BLS_BLS12_381), or 6 (KECCAK_256).\"))\n            \n            let publicKey = PublicKey(\n\t\t\t    publicKey: machineAccountKey.decodeHex(),\n\t\t\t    signatureAlgorithm: sigAlgo\n\t\t    )\n            machineAccount.keys.add(publicKey: publicKey, hashAlgorithm: hashAlgo, weight: 1000.0)\n        }\n    }\n}",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "flow-node.test:3569",
          "type": "String"
        },
        {
          "value": "1348307bc77c688e80049de9d081aa09755da33e6997605fa059db2144fc85e560cbe6f7da8d74b453f5916618cb8fd392c2db856f3e78221dc68db1b1d914e4",
          "type": "String"
        },
        {
          "value": "8dec36ed8a91e3e5d737b06434d94a8a561c7889495d6c7081cd5e123a42124415b9391c9b9aa165c2f71994bf9607cb0ea262ad162fec74146d1ebc482a33b9dad203d16a83bbfda89b3f6e1cd1d8fb2e704a162d259a0ac9f26bc8635d74f6",
          "type": "String"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        },
        {
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164",
          "type": "String"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90df7b90a73696d706f72742043727970746f0a696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f2052656769737465727320612064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e207265736f757263650a2f2f2f20666f722074686520737065636966696564206e6f646520696e666f726d6174696f6e20616e642074686520616d6f756e74206f6620746f6b656e7320746f20636f6d6d69740a0a7472616e73616374696f6e2869643a20537472696e672c0a202020202020202020202020726f6c653a2055496e74382c0a2020202020202020202020206e6574776f726b696e67416464726573733a20537472696e672c0a2020202020202020202020206e6574776f726b696e674b65793a20537472696e672c0a2020202020202020202020207374616b696e674b65793a20537472696e672c0a202020202020202020202020616d6f756e743a205546697836342c0a2020202020202020202020206d616368696e654163636f756e744b65793a20537472696e672c200a2020202020202020202020206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d3a2055496e74382c200a2020202020202020202020206d616368696e654163636f756e744b657948617368416c676f726974686d3a2055496e743829207b0a0a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a0a20202020202020206966206c6574206d616368696e654163636f756e74203d2073656c662e7374616b696e67436f6c6c656374696f6e5265662e72656769737465724e6f6465280a20202020202020202020202069643a2069642c0a202020202020202020202020726f6c653a20726f6c652c0a2020202020202020202020206e6574776f726b696e67416464726573733a206e6574776f726b696e67416464726573732c0a2020202020202020202020206e6574776f726b696e674b65793a206e6574776f726b696e674b65792c0a2020202020202020202020207374616b696e674b65793a207374616b696e674b65792c0a202020202020202020202020616d6f756e743a20616d6f756e742c0a20202020202020202020202070617965723a206163636f756e740a202020202020202029207b0a2020202020202020202020206c657420736967416c676f203d205369676e6174757265416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d290a202020202020202020202020202020203f3f2070616e6963282243616e6e6f74207265676973746572206e6f646520776974682070726f7669646564206d616368696e65206163636f756e74206b65793a204d7573742070726f766964652061207369676e617475726520616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f662074686520617661696c61626c65207369676e617475726520616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e636174286d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e7320617265206569746865722031202845434453415f50323536292c2032202845434453415f736563703235366b31292c206f7220332028424c535f424c5331325f333831292e2229290a0a2020202020202020202020206c65742068617368416c676f203d2048617368416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b657948617368416c676f726974686d290a202020202020202020202020202020203f3f2070616e6963282243616e6e6f74207265676973746572206e6f64652077697468207468652070726f7669646564206d616368696e65206163636f756e74206b65793a204d7573742070726f766964652061206861736820616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f66206f662074686520617661696c61626c65206861736820616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e636174286d616368696e654163636f756e744b657948617368416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e732061726520312028534841325f323536292c20322028534841325f333834292c20332028534841335f323536292c2022290a202020202020202020202020202020202e636f6e6361742822342028534841335f333834292c203520284b4d41433132385f424c535f424c5331325f333831292c206f72203620284b454343414b5f323536292e2229290a2020202020202020202020200a2020202020202020202020206c6574207075626c69634b6579203d205075626c69634b6579280a090909202020207075626c69634b65793a206d616368696e654163636f756e744b65792e6465636f646548657828292c0a090909202020207369676e6174757265416c676f726974686d3a20736967416c676f0a090920202020290a2020202020202020202020206d616368696e654163636f756e742e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2068617368416c676f2c207765696768743a20313030302e30290a20202020202020207d0a202020207d0a7df9033eb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227daf7b2276616c7565223a22666c6f772d6e6f64652e746573743a33353639222c2274797065223a22537472696e67227db89c7b2276616c7565223a223133343833303762633737633638386538303034396465396430383161613039373535646133336536393937363035666130353964623231343466633835653536306362653666376461386437346234353366353931363631386362386664333932633264623835366633653738323231646336386462316231643931346534222c2274797065223a22537472696e67227db8dc7b2276616c7565223a22386465633336656438613931653365356437333762303634333464393461386135363163373838393439356436633730383163643565313233613432313234343135623933393163396239616131363563326637313939346266393630376362306561323632616431363266656337343134366431656263343832613333623964616432303364313661383362626664613839623366366531636431643866623265373034613136326432353961306163396632366263383633356437346636222c2274797065223a22537472696e67227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227db8aa7b2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634222c2274797065223a22537472696e67227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90dfbf90df7b90a73696d706f72742043727970746f0a696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f2052656769737465727320612064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e207265736f757263650a2f2f2f20666f722074686520737065636966696564206e6f646520696e666f726d6174696f6e20616e642074686520616d6f756e74206f6620746f6b656e7320746f20636f6d6d69740a0a7472616e73616374696f6e2869643a20537472696e672c0a202020202020202020202020726f6c653a2055496e74382c0a2020202020202020202020206e6574776f726b696e67416464726573733a20537472696e672c0a2020202020202020202020206e6574776f726b696e674b65793a20537472696e672c0a2020202020202020202020207374616b696e674b65793a20537472696e672c0a202020202020202020202020616d6f756e743a205546697836342c0a2020202020202020202020206d616368696e654163636f756e744b65793a20537472696e672c200a2020202020202020202020206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d3a2055496e74382c200a2020202020202020202020206d616368696e654163636f756e744b657948617368416c676f726974686d3a2055496e743829207b0a0a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a0a20202020202020206966206c6574206d616368696e654163636f756e74203d2073656c662e7374616b696e67436f6c6c656374696f6e5265662e72656769737465724e6f6465280a20202020202020202020202069643a2069642c0a202020202020202020202020726f6c653a20726f6c652c0a2020202020202020202020206e6574776f726b696e67416464726573733a206e6574776f726b696e67416464726573732c0a2020202020202020202020206e6574776f726b696e674b65793a206e6574776f726b696e674b65792c0a2020202020202020202020207374616b696e674b65793a207374616b696e674b65792c0a202020202020202020202020616d6f756e743a20616d6f756e742c0a20202020202020202020202070617965723a206163636f756e740a202020202020202029207b0a2020202020202020202020206c657420736967416c676f203d205369676e6174757265416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d290a202020202020202020202020202020203f3f2070616e6963282243616e6e6f74207265676973746572206e6f646520776974682070726f7669646564206d616368696e65206163636f756e74206b65793a204d7573742070726f766964652061207369676e617475726520616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f662074686520617661696c61626c65207369676e617475726520616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e636174286d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e7320617265206569746865722031202845434453415f50323536292c2032202845434453415f736563703235366b31292c206f7220332028424c535f424c5331325f333831292e2229290a0a2020202020202020202020206c65742068617368416c676f203d2048617368416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b657948617368416c676f726974686d290a202020202020202020202020202020203f3f2070616e6963282243616e6e6f74207265676973746572206e6f64652077697468207468652070726f7669646564206d616368696e65206163636f756e74206b65793a204d7573742070726f766964652061206861736820616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f66206f662074686520617661696c61626c65206861736820616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e636174286d616368696e654163636f756e744b657948617368416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e732061726520312028534841325f323536292c20322028534841325f333834292c20332028534841335f323536292c2022290a202020202020202020202020202020202e636f6e6361742822342028534841335f333834292c203520284b4d41433132385f424c535f424c5331325f333831292c206f72203620284b454343414b5f323536292e2229290a2020202020202020202020200a2020202020202020202020206c6574207075626c69634b6579203d205075626c69634b6579280a090909202020207075626c69634b65793a206d616368696e654163636f756e744b65792e6465636f646548657828292c0a090909202020207369676e6174757265416c676f726974686d3a20736967416c676f0a090920202020290a2020202020202020202020206d616368696e654163636f756e742e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2068617368416c676f2c207765696768743a20313030302e30290a20202020202020207d0a202020207d0a7df9033eb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227daf7b2276616c7565223a22666c6f772d6e6f64652e746573743a33353639222c2274797065223a22537472696e67227db89c7b2276616c7565223a223133343833303762633737633638386538303034396465396430383161613039373535646133336536393937363035666130353964623231343466633835653536306362653666376461386437346234353366353931363631386362386664333932633264623835366633653738323231646336386462316231643931346534222c2274797065223a22537472696e67227db8dc7b2276616c7565223a22386465633336656438613931653365356437333762303634333464393461386135363163373838393439356436633730383163643565313233613432313234343135623933393163396239616131363563326637313939346266393630376362306561323632616431363266656337343134366431656263343832613333623964616432303364313661383362626664613839623366366531636431643866623265373034613136326432353961306163396632366263383633356437346636222c2274797065223a22537472696e67227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227db8aa7b2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634222c2274797065223a22537472696e67227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "020ab9dcc3ae591733937b9e8b26e044796f34f11b7d74ef42e3b5d42ec6c35fc822e2423dd307906e5f880eda3701664c81291142c1a1f82c71f31608f5b4a5535265676973746572204e6f64650009044e6f64652049440000074e6f646520526f6c650001044e6574772e20416464726573730002044e6574772e204b65790003045374616b696e67204b6579000401416d6f756e7400055546697836340003044d41205075622e204b65790006064d41205369676e2e20416c672e0007054d41204861736820416c672e0008",
    "hash": "22e2423dd307906e5f880eda3701664c81291142c1a1f82c71f31608f5b4a553"
  },
  {
    "title": "SCO.04 - Create Machine Account",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import Crypto\nimport FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Creates a machine account for a node that is already in the staking collection\n/// and adds public keys to the new account\n\ntransaction(nodeID: String, \n            machineAccountKey: String, \n            machineAccountKeySignatureAlgorithm: UInt8, \n            machineAccountKeyHashAlgorithm: UInt8) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        pre {\n\t\t\tmachineAccountKeySignatureAlgorithm == 1 || machineAccountKeySignatureAlgorithm == 2:\n                \"Cannot create machine account: Must provide a signature algorithm raw value that corresponds to \"\n                .concat(\"one of the available signature algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(machineAccountKeySignatureAlgorithm.toString())\n                .concat(\" but the options are either 1 (ECDSA_P256) or 2 (ECDSA_secp256k1).\")\n\t\t\tmachineAccountKeyHashAlgorithm == 1 || machineAccountKeyHashAlgorithm == 3:\n                \"Cannot create machine account: Must provide a hash algorithm raw value that corresponds to \"\n                .concat(\"one of of the available hash algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(machineAccountKeyHashAlgorithm.toString())\n                .concat(\" but the options are either 1 (SHA2_256) or 3 (SHA3_256).\")\n\t\t}\n\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n\n        if let machineAccount = self.stakingCollectionRef.createMachineAccountForExistingNode(nodeID: nodeID, payer: account) {\n            let sigAlgo = SignatureAlgorithm(rawValue: machineAccountKeySignatureAlgorithm)!\n\n            let hashAlgo = HashAlgorithm(rawValue: machineAccountKeyHashAlgorithm)!\n            \n            let publicKey = PublicKey(\n\t\t\t    publicKey: machineAccountKey.decodeHex(),\n\t\t\t    signatureAlgorithm: sigAlgo\n\t\t    )\n            machineAccount.keys.add(publicKey: publicKey, hashAlgorithm: hashAlgo, weight: 1000.0)\n        } else {\n            panic(\"Could not create a machine account for the node\")\n        }\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164",
          "type": "String"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import Crypto\nimport FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Creates a machine account for a node that is already in the staking collection\n/// and adds public keys to the new account\n\ntransaction(nodeID: String, \n            machineAccountKey: String, \n            machineAccountKeySignatureAlgorithm: UInt8, \n            machineAccountKeyHashAlgorithm: UInt8) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        pre {\n\t\t\tmachineAccountKeySignatureAlgorithm == 1 || machineAccountKeySignatureAlgorithm == 2:\n                \"Cannot create machine account: Must provide a signature algorithm raw value that corresponds to \"\n                .concat(\"one of the available signature algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(machineAccountKeySignatureAlgorithm.toString())\n                .concat(\" but the options are either 1 (ECDSA_P256) or 2 (ECDSA_secp256k1).\")\n\t\t\tmachineAccountKeyHashAlgorithm == 1 || machineAccountKeyHashAlgorithm == 3:\n                \"Cannot create machine account: Must provide a hash algorithm raw value that corresponds to \"\n                .concat(\"one of of the available hash algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(machineAccountKeyHashAlgorithm.toString())\n                .concat(\" but the options are either 1 (SHA2_256) or 3 (SHA3_256).\")\n\t\t}\n\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n\n        if let machineAccount = self.stakingCollectionRef.createMachineAccountForExistingNode(nodeID: nodeID, payer: account) {\n            let sigAlgo = SignatureAlgorithm(rawValue: machineAccountKeySignatureAlgorithm)!\n\n            let hashAlgo = HashAlgorithm(rawValue: machineAccountKeyHashAlgorithm)!\n            \n            let publicKey = PublicKey(\n\t\t\t    publicKey: machineAccountKey.decodeHex(),\n\t\t\t    signatureAlgorithm: sigAlgo\n\t\t    )\n            machineAccount.keys.add(publicKey: publicKey, hashAlgorithm: hashAlgo, weight: 1000.0)\n        } else {\n            panic(\"Could not create a machine account for the node\")\n        }\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164",
          "type": "String"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90b01b90977696d706f72742043727970746f0a696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20437265617465732061206d616368696e65206163636f756e7420666f722061206e6f6465207468617420697320616c726561647920696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f20616e642061646473207075626c6963206b65797320746f20746865206e6577206163636f756e740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c200a2020202020202020202020206d616368696e654163636f756e744b65793a20537472696e672c200a2020202020202020202020206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d3a2055496e74382c200a2020202020202020202020206d616368696e654163636f756e744b657948617368416c676f726974686d3a2055496e743829207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a2020202020202020707265207b0a0909096d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d203d3d2031207c7c206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d203d3d20323a0a202020202020202020202020202020202243616e6e6f7420637265617465206d616368696e65206163636f756e743a204d7573742070726f766964652061207369676e617475726520616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f662074686520617661696c61626c65207369676e617475726520616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e636174286d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e7320617265206569746865722031202845434453415f5032353629206f722032202845434453415f736563703235366b31292e22290a0909096d616368696e654163636f756e744b657948617368416c676f726974686d203d3d2031207c7c206d616368696e654163636f756e744b657948617368416c676f726974686d203d3d20333a0a202020202020202020202020202020202243616e6e6f7420637265617465206d616368696e65206163636f756e743a204d7573742070726f766964652061206861736820616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f66206f662074686520617661696c61626c65206861736820616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e636174286d616368696e654163636f756e744b657948617368416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e73206172652065697468657220312028534841325f32353629206f7220332028534841335f323536292e22290a09097d0a0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a0a20202020202020206966206c6574206d616368696e654163636f756e74203d2073656c662e7374616b696e67436f6c6c656374696f6e5265662e6372656174654d616368696e654163636f756e74466f724578697374696e674e6f6465286e6f646549443a206e6f646549442c2070617965723a206163636f756e7429207b0a2020202020202020202020206c657420736967416c676f203d205369676e6174757265416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d29210a0a2020202020202020202020206c65742068617368416c676f203d2048617368416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b657948617368416c676f726974686d29210a2020202020202020202020200a2020202020202020202020206c6574207075626c69634b6579203d205075626c69634b6579280a090909202020207075626c69634b65793a206d616368696e654163636f756e744b65792e6465636f646548657828292c0a090909202020207369676e6174757265416c676f726974686d3a20736967416c676f0a090920202020290a2020202020202020202020206d616368696e654163636f756e742e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2068617368416c676f2c207765696768743a20313030302e30290a20202020202020207d20656c7365207b0a20202020202020202020202070616e69632822436f756c64206e6f74206372656174652061206d616368696e65206163636f756e7420666f7220746865206e6f646522290a20202020202020207d0a202020207d0a7d0af90144b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db8aa7b2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634222c2274797065223a22537472696e67227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90b05f90b01b90977696d706f72742043727970746f0a696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20437265617465732061206d616368696e65206163636f756e7420666f722061206e6f6465207468617420697320616c726561647920696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f20616e642061646473207075626c6963206b65797320746f20746865206e6577206163636f756e740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c200a2020202020202020202020206d616368696e654163636f756e744b65793a20537472696e672c200a2020202020202020202020206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d3a2055496e74382c200a2020202020202020202020206d616368696e654163636f756e744b657948617368416c676f726974686d3a2055496e743829207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a2020202020202020707265207b0a0909096d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d203d3d2031207c7c206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d203d3d20323a0a202020202020202020202020202020202243616e6e6f7420637265617465206d616368696e65206163636f756e743a204d7573742070726f766964652061207369676e617475726520616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f662074686520617661696c61626c65207369676e617475726520616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e636174286d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e7320617265206569746865722031202845434453415f5032353629206f722032202845434453415f736563703235366b31292e22290a0909096d616368696e654163636f756e744b657948617368416c676f726974686d203d3d2031207c7c206d616368696e654163636f756e744b657948617368416c676f726974686d203d3d20333a0a202020202020202020202020202020202243616e6e6f7420637265617465206d616368696e65206163636f756e743a204d7573742070726f766964652061206861736820616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f66206f662074686520617661696c61626c65206861736820616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e636174286d616368696e654163636f756e744b657948617368416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e73206172652065697468657220312028534841325f32353629206f7220332028534841335f323536292e22290a09097d0a0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a0a20202020202020206966206c6574206d616368696e654163636f756e74203d2073656c662e7374616b696e67436f6c6c656374696f6e5265662e6372656174654d616368696e654163636f756e74466f724578697374696e674e6f6465286e6f646549443a206e6f646549442c2070617965723a206163636f756e7429207b0a2020202020202020202020206c657420736967416c676f203d205369676e6174757265416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d29210a0a2020202020202020202020206c65742068617368416c676f203d2048617368416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b657948617368416c676f726974686d29210a2020202020202020202020200a2020202020202020202020206c6574207075626c69634b6579203d205075626c69634b6579280a090909202020207075626c69634b65793a206d616368696e654163636f756e744b65792e6465636f646548657828292c0a090909202020207369676e6174757265416c676f726974686d3a20736967416c676f0a090920202020290a2020202020202020202020206d616368696e654163636f756e742e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2068617368416c676f2c207765696768743a20313030302e30290a20202020202020207d20656c7365207b0a20202020202020202020202070616e69632822436f756c64206e6f74206372656174652061206d616368696e65206163636f756e7420666f7220746865206e6f646522290a20202020202020207d0a202020207d0a7d0af90144b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db8aa7b2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634222c2274797065223a22537472696e67227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02c92d9e182330e25a876d34edfe23dccf9aa6deb914cf1812cee34234a1c99651477526abb6b1a83c4163b2bb1f77eb4a9979ec510b81b4e110df003e0b586a63437265617465204d616368696e65204163636f756e740004044e6f64652049440000044d41205075622e204b65790001064d41205369676e2e20416c672e0002054d41204861736820416c672e0003",
    "hash": "477526abb6b1a83c4163b2bb1f77eb4a9979ec510b81b4e110df003e0b586a63"
  },
  {
    "title": "SCO.05 - Request Unstaking - 1",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Requests unstaking for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.requestUnstaking(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Requests unstaking for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.requestUnstaking(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90411b9031c696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20526571756573747320756e7374616b696e6720666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e72657175657374556e7374616b696e67286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90415f90411b9031c696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20526571756573747320756e7374616b696e6720666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e72657175657374556e7374616b696e67286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02496fbcb63e434bd081f69ae11ddd7ec2ef1b9ac32abb443c26d4d09dfd2ca2ced65801ecd6852107d15a97d3b02db8226b86384e1be849fe50f1d02f7dbf5af65265717565737420556e7374616b696e670003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "d65801ecd6852107d15a97d3b02db8226b86384e1be849fe50f1d02f7dbf5af6"
  },
  {
    "title": "SCO.05 - Request Unstaking - 2",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Requests unstaking for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.requestUnstaking(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Requests unstaking for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.requestUnstaking(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9042cb9031c696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20526571756573747320756e7374616b696e6720666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e72657175657374556e7374616b696e67286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90430f9042cb9031c696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20526571756573747320756e7374616b696e6720666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e72657175657374556e7374616b696e67286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02496fbcb63e434bd081f69ae11ddd7ec2ef1b9ac32abb443c26d4d09dfd2ca2ced65801ecd6852107d15a97d3b02db8226b86384e1be849fe50f1d02f7dbf5af65265717565737420556e7374616b696e670003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "d65801ecd6852107d15a97d3b02db8226b86384e1be849fe50f1d02f7dbf5af6"
  },
  {
    "title": "SCO.06 - Stake New Tokens - 1",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Commits new tokens to stake for the specified node or delegator in the staking collection\n/// The tokens from the locked vault are used first, if it exists\n/// followed by the tokens from the unlocked vault\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeNewTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Commits new tokens to stake for the specified node or delegator in the staking collection\n/// The tokens from the locked vault are used first, if it exists\n/// followed by the tokens from the unlocked vault\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeNewTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9048db90398696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20436f6d6d697473206e657720746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e732066726f6d20746865206c6f636b6564207661756c742061726520757365642066697273742c206966206974206578697374730a2f2f2f20666f6c6c6f7765642062792074686520746f6b656e732066726f6d2074686520756e6c6f636b6564207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b654e6577546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90491f9048db90398696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20436f6d6d697473206e657720746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e732066726f6d20746865206c6f636b6564207661756c742061726520757365642066697273742c206966206974206578697374730a2f2f2f20666f6c6c6f7765642062792074686520746f6b656e732066726f6d2074686520756e6c6f636b6564207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b654e6577546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "028c03f3920896f68576d04b0f8980507441123c24a6600f706133915205968244adc143943ac8b73c9995c45d7f3130f7e81a6ddfe72bca681ef5df7fcf6063a35374616b65204e657720546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "adc143943ac8b73c9995c45d7f3130f7e81a6ddfe72bca681ef5df7fcf6063a3"
  },
  {
    "title": "SCO.06 - Stake New Tokens - 2",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Commits new tokens to stake for the specified node or delegator in the staking collection\n/// The tokens from the locked vault are used first, if it exists\n/// followed by the tokens from the unlocked vault\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeNewTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Commits new tokens to stake for the specified node or delegator in the staking collection\n/// The tokens from the locked vault are used first, if it exists\n/// followed by the tokens from the unlocked vault\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeNewTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f904a8b90398696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20436f6d6d697473206e657720746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e732066726f6d20746865206c6f636b6564207661756c742061726520757365642066697273742c206966206974206578697374730a2f2f2f20666f6c6c6f7765642062792074686520746f6b656e732066726f6d2074686520756e6c6f636b6564207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b654e6577546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f904acf904a8b90398696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20436f6d6d697473206e657720746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e732066726f6d20746865206c6f636b6564207661756c742061726520757365642066697273742c206966206974206578697374730a2f2f2f20666f6c6c6f7765642062792074686520746f6b656e732066726f6d2074686520756e6c6f636b6564207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b654e6577546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "028c03f3920896f68576d04b0f8980507441123c24a6600f706133915205968244adc143943ac8b73c9995c45d7f3130f7e81a6ddfe72bca681ef5df7fcf6063a35374616b65204e657720546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "adc143943ac8b73c9995c45d7f3130f7e81a6ddfe72bca681ef5df7fcf6063a3"
  },
  {
    "title": "SCO.07 - Stake Rewarded Tokens - 1",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Commits rewarded tokens to stake for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeRewardedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Commits rewarded tokens to stake for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeRewardedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90422b9032d696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20436f6d6d69747320726577617264656420746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b655265776172646564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90426f90422b9032d696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20436f6d6d69747320726577617264656420746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b655265776172646564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02aeb4a5c1d131da3f54e717357330dc7a08daec9238b90d35f2e78fc3f21f822de80bcf35c25a0296b2afd99a156734e1ef37e3b244a4400faa98811e6305caf65374616b6520526577617264656420546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "e80bcf35c25a0296b2afd99a156734e1ef37e3b244a4400faa98811e6305caf6"
  },
  {
    "title": "SCO.07 - Stake Rewarded Tokens - 2",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Commits rewarded tokens to stake for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeRewardedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Commits rewarded tokens to stake for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeRewardedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9043db9032d696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20436f6d6d69747320726577617264656420746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b655265776172646564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90441f9043db9032d696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20436f6d6d69747320726577617264656420746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b655265776172646564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02aeb4a5c1d131da3f54e717357330dc7a08daec9238b90d35f2e78fc3f21f822de80bcf35c25a0296b2afd99a156734e1ef37e3b244a4400faa98811e6305caf65374616b6520526577617264656420546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "e80bcf35c25a0296b2afd99a156734e1ef37e3b244a4400faa98811e6305caf6"
  },
  {
    "title": "SCO.08 - Stake Unstaked Tokens - 1",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Commits unstaked tokens to stake for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeUnstakedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Commits unstaked tokens to stake for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeUnstakedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90422b9032d696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20436f6d6d69747320756e7374616b656420746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b65556e7374616b6564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90426f90422b9032d696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20436f6d6d69747320756e7374616b656420746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b65556e7374616b6564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "028cea0b1817980400ddccb8d72e68f6984934f15172bb7a7f6f80f6c6e03bec56510ae0b5b3b89491b64a06054ce23989e1bd02fb3dac9bbca85f61a559f3364c5374616b6520556e7374616b656420546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "510ae0b5b3b89491b64a06054ce23989e1bd02fb3dac9bbca85f61a559f3364c"
  },
  {
    "title": "SCO.08 - Stake Unstaked Tokens - 2",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Commits unstaked tokens to stake for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeUnstakedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Commits unstaked tokens to stake for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.stakeUnstakedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9043db9032d696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20436f6d6d69747320756e7374616b656420746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b65556e7374616b6564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90441f9043db9032d696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20436f6d6d69747320756e7374616b656420746f6b656e7320746f207374616b6520666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7374616b65556e7374616b6564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "028cea0b1817980400ddccb8d72e68f6984934f15172bb7a7f6f80f6c6e03bec56510ae0b5b3b89491b64a06054ce23989e1bd02fb3dac9bbca85f61a559f3364c5374616b6520556e7374616b656420546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "510ae0b5b3b89491b64a06054ce23989e1bd02fb3dac9bbca85f61a559f3364c"
  },
  {
    "title": "SCO.09 - Unstake All",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Requests to unstake ALL tokens for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.unstakeAll(nodeID: nodeID)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Requests to unstake ALL tokens for the specified node or delegator in the staking collection\n\ntransaction(nodeID: String) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.unstakeAll(nodeID: nodeID)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90375b902d2696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20526571756573747320746f20756e7374616b6520414c4c20746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e6729207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e756e7374616b65416c6c286e6f646549443a206e6f64654944290a202020207d0a7d0af85eb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90379f90375b902d2696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f20526571756573747320746f20756e7374616b6520414c4c20746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a0a7472616e73616374696f6e286e6f646549443a20537472696e6729207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e756e7374616b65416c6c286e6f646549443a206e6f64654944290a202020207d0a7d0af85eb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "024e1af2295f9cac245e5c32b92265c635f80ed523d713038195dad7607e2785e30dbf1bee6213b0828c0ba2a51ba0a20660ed6c7ab6632f75aac1ed669ed64bf8556e7374616b6520416c6c0001044e6f64652049440000",
    "hash": "0dbf1bee6213b0828c0ba2a51ba0a20660ed6c7ab6632f75aac1ed669ed64bf8"
  },
  {
    "title": "SCO.10 - Withdraw Rewarded Tokens - 1",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Request to withdraw rewarded tokens for the specified node or delegator in the staking collection\n/// The tokens are automatically deposited to the unlocked account vault first,\n/// And then any locked tokens are deposited into the locked account vault\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawRewardedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Request to withdraw rewarded tokens for the specified node or delegator in the staking collection\n/// The tokens are automatically deposited to the unlocked account vault first,\n/// And then any locked tokens are deposited into the locked account vault\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawRewardedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f904deb903ce696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f205265717565737420746f20776974686472617720726577617264656420746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c742066697273742c0a2f2f2f20416e64207468656e20616e79206c6f636b656420746f6b656e7320617265206465706f736974656420696e746f20746865206c6f636b6564206163636f756e74207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e77697468647261775265776172646564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f904e2f904deb903ce696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f205265717565737420746f20776974686472617720726577617264656420746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c742066697273742c0a2f2f2f20416e64207468656e20616e79206c6f636b656420746f6b656e7320617265206465706f736974656420696e746f20746865206c6f636b6564206163636f756e74207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e77697468647261775265776172646564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02e35778812e8fcefc9ea0abf60a7466777466d071c860746768e83eff47b5b0ea6239034e2884a0e32047bab081f4f2c9bdb4dba2ced6120a2d2c2f6489757868576974686472617720526577617264656420546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "6239034e2884a0e32047bab081f4f2c9bdb4dba2ced6120a2d2c2f6489757868"
  },
  {
    "title": "SCO.10 - Withdraw Rewarded Tokens - 2",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Request to withdraw rewarded tokens for the specified node or delegator in the staking collection\n/// The tokens are automatically deposited to the unlocked account vault first,\n/// And then any locked tokens are deposited into the locked account vault\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawRewardedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Request to withdraw rewarded tokens for the specified node or delegator in the staking collection\n/// The tokens are automatically deposited to the unlocked account vault first,\n/// And then any locked tokens are deposited into the locked account vault\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawRewardedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f904c3b903ce696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f205265717565737420746f20776974686472617720726577617264656420746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c742066697273742c0a2f2f2f20416e64207468656e20616e79206c6f636b656420746f6b656e7320617265206465706f736974656420696e746f20746865206c6f636b6564206163636f756e74207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e77697468647261775265776172646564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f904c7f904c3b903ce696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f205265717565737420746f20776974686472617720726577617264656420746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c742066697273742c0a2f2f2f20416e64207468656e20616e79206c6f636b656420746f6b656e7320617265206465706f736974656420696e746f20746865206c6f636b6564206163636f756e74207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e77697468647261775265776172646564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02e35778812e8fcefc9ea0abf60a7466777466d071c860746768e83eff47b5b0ea6239034e2884a0e32047bab081f4f2c9bdb4dba2ced6120a2d2c2f6489757868576974686472617720526577617264656420546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "6239034e2884a0e32047bab081f4f2c9bdb4dba2ced6120a2d2c2f6489757868"
  },
  {
    "title": "SCO.11 - Withdraw Unstaked Tokens - 1",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Request to withdraw unstaked tokens for the specified node or delegator in the staking collection\n/// The tokens are automatically deposited to the unlocked account vault first,\n/// And then any locked tokens are deposited into the locked account vault if it is there\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawUnstakedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Request to withdraw unstaked tokens for the specified node or delegator in the staking collection\n/// The tokens are automatically deposited to the unlocked account vault first,\n/// And then any locked tokens are deposited into the locked account vault if it is there\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawUnstakedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f904d2b903dd696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f205265717565737420746f20776974686472617720756e7374616b656420746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c742066697273742c0a2f2f2f20416e64207468656e20616e79206c6f636b656420746f6b656e7320617265206465706f736974656420696e746f20746865206c6f636b6564206163636f756e74207661756c742069662069742069732074686572650a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7769746864726177556e7374616b6564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f904d6f904d2b903dd696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f205265717565737420746f20776974686472617720756e7374616b656420746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c742066697273742c0a2f2f2f20416e64207468656e20616e79206c6f636b656420746f6b656e7320617265206465706f736974656420696e746f20746865206c6f636b6564206163636f756e74207661756c742069662069742069732074686572650a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7769746864726177556e7374616b6564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8b0b85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02c511b86ca0d68fc751ad1ff0c8609eb7bf8a96e72f35ddd943d5ca27fb1e8f62df691ad256dd053350e48313ca5b02dda34376376bb4303d997dc8679996fe3b576974686472617720556e7374616b656420546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "df691ad256dd053350e48313ca5b02dda34376376bb4303d997dc8679996fe3b"
  },
  {
    "title": "SCO.11 - Withdraw Unstaked Tokens - 2",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Request to withdraw unstaked tokens for the specified node or delegator in the staking collection\n/// The tokens are automatically deposited to the unlocked account vault first,\n/// And then any locked tokens are deposited into the locked account vault if it is there\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawUnstakedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Request to withdraw unstaked tokens for the specified node or delegator in the staking collection\n/// The tokens are automatically deposited to the unlocked account vault first,\n/// And then any locked tokens are deposited into the locked account vault if it is there\n\ntransaction(nodeID: String, delegatorID: UInt32?, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawUnstakedTokens(nodeID: nodeID, delegatorID: delegatorID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f904edb903dd696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f205265717565737420746f20776974686472617720756e7374616b656420746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c742066697273742c0a2f2f2f20416e64207468656e20616e79206c6f636b656420746f6b656e7320617265206465706f736974656420696e746f20746865206c6f636b6564206163636f756e74207661756c742069662069742069732074686572650a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7769746864726177556e7374616b6564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f904f1f904edb903dd696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f205265717565737420746f20776974686472617720756e7374616b656420746f6b656e7320666f722074686520737065636966696564206e6f6465206f722064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c742066697273742c0a2f2f2f20416e64207468656e20616e79206c6f636b656420746f6b656e7320617265206465706f736974656420696e746f20746865206c6f636b6564206163636f756e74207661756c742069662069742069732074686572650a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f2c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7769746864726177556e7374616b6564546f6b656e73286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f7249442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af8cbb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02c511b86ca0d68fc751ad1ff0c8609eb7bf8a96e72f35ddd943d5ca27fb1e8f62df691ad256dd053350e48313ca5b02dda34376376bb4303d997dc8679996fe3b576974686472617720556e7374616b656420546f6b656e730003044e6f646520494400000244656c656761746f72204944000155496e743332000301416d6f756e7400025546697836340003",
    "hash": "df691ad256dd053350e48313ca5b02dda34376376bb4303d997dc8679996fe3b"
  },
  {
    "title": "SCO.12 - Close Stake - 1",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n// Closes out a staking object in the staking collection\n// This does not remove the record from the identity table,\n// but it does mean that the account that closes it cannot ever access it again\n\ntransaction(nodeID: String, delegatorID: UInt32?) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.closeStake(nodeID: nodeID, delegatorID: delegatorID)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n// Closes out a staking object in the staking collection\n// This does not remove the record from the identity table,\n// but it does mean that the account that closes it cannot ever access it again\n\ntransaction(nodeID: String, delegatorID: UInt32?) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.closeStake(nodeID: nodeID, delegatorID: delegatorID)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": {
            "value": "42",
            "type": "UInt32"
          },
          "type": "Optional"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90445b90366696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f20436c6f736573206f75742061207374616b696e67206f626a65637420696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f205468697320646f6573206e6f742072656d6f766520746865207265636f72642066726f6d20746865206964656e74697479207461626c652c0a2f2f2062757420697420646f6573206d65616e207468617420746865206163636f756e74207468617420636c6f7365732069742063616e6e6f7420657665722061636365737320697420616761696e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f29207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e636c6f73655374616b65286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f724944290a202020207d0a7d0af89ab85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90449f90445b90366696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f20436c6f736573206f75742061207374616b696e67206f626a65637420696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f205468697320646f6573206e6f742072656d6f766520746865207265636f72642066726f6d20746865206964656e74697479207461626c652c0a2f2f2062757420697420646f6573206d65616e207468617420746865206163636f756e74207468617420636c6f7365732069742063616e6e6f7420657665722061636365737320697420616761696e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f29207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e636c6f73655374616b65286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f724944290a202020207d0a7d0af89ab85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db83a7b2276616c7565223a7b2276616c7565223a223432222c2274797065223a2255496e743332227d2c2274797065223a224f7074696f6e616c227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02399b0c6a827d6747b1b50be9ead82ddc2669f38fd8ac57325bfa413a474646e20c5f7a439634e49bb748df52d81074bb4ec44a940ce57ebf635522d82e1bb839436c6f7365205374616b650002044e6f646520494400000244656c656761746f72204944000155496e7433320003",
    "hash": "0c5f7a439634e49bb748df52d81074bb4ec44a940ce57ebf635522d82e1bb839"
  },
  {
    "title": "SCO.12 - Close Stake - 2",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n// Closes out a staking object in the staking collection\n// This does not remove the record from the identity table,\n// but it does mean that the account that closes it cannot ever access it again\n\ntransaction(nodeID: String, delegatorID: UInt32?) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.closeStake(nodeID: nodeID, delegatorID: delegatorID)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n// Closes out a staking object in the staking collection\n// This does not remove the record from the identity table,\n// but it does mean that the account that closes it cannot ever access it again\n\ntransaction(nodeID: String, delegatorID: UInt32?) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.closeStake(nodeID: nodeID, delegatorID: delegatorID)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": null,
          "type": "Optional"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f9042ab90366696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f20436c6f736573206f75742061207374616b696e67206f626a65637420696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f205468697320646f6573206e6f742072656d6f766520746865207265636f72642066726f6d20746865206964656e74697479207461626c652c0a2f2f2062757420697420646f6573206d65616e207468617420746865206163636f756e74207468617420636c6f7365732069742063616e6e6f7420657665722061636365737320697420616761696e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f29207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e636c6f73655374616b65286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f724944290a202020207d0a7d0af87fb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f9042ef9042ab90366696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f20436c6f736573206f75742061207374616b696e67206f626a65637420696e20746865207374616b696e6720636f6c6c656374696f6e0a2f2f205468697320646f6573206e6f742072656d6f766520746865207265636f72642066726f6d20746865206964656e74697479207461626c652c0a2f2f2062757420697420646f6573206d65616e207468617420746865206163636f756e74207468617420636c6f7365732069742063616e6e6f7420657665722061636365737320697420616761696e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433323f29207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e636c6f73655374616b65286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f724944290a202020207d0a7d0af87fb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227da07b2276616c7565223a6e756c6c2c2274797065223a224f7074696f6e616c227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02399b0c6a827d6747b1b50be9ead82ddc2669f38fd8ac57325bfa413a474646e20c5f7a439634e49bb748df52d81074bb4ec44a940ce57ebf635522d82e1bb839436c6f7365205374616b650002044e6f646520494400000244656c656761746f72204944000155496e7433320003",
    "hash": "0c5f7a439634e49bb748df52d81074bb4ec44a940ce57ebf635522d82e1bb839"
  },
  {
    "title": "SCO.13 - Transfer Node",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n// Transfers a NodeStaker object from an authorizers account\n// and adds the NodeStaker to another accounts Staking Collection\n// identified by the to Address.\n\ntransaction(nodeID: String, to: Address) {\n    let fromStakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n    let toStakingCollectionCap: &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        // The account to transfer the NodeStaker object to must have a valid Staking Collection in order to receive the NodeStaker.\n        if (!FlowStakingCollection.doesAccountHaveStakingCollection(address: to)) {\n            panic(FlowStakingCollection.getCollectionMissingError(to))\n        }\n\n        // Get a reference to the authorizers StakingCollection\n        self.fromStakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n\n        // Get the PublicAccount of the account to transfer the NodeStaker to. \n        let toAccount = getAccount(to)\n\n        // Borrow a capability to the public methods available on the receivers StakingCollection.\n        self.toStakingCollectionCap = toAccount.capabilities\n            .borrow<&FlowStakingCollection.StakingCollection>(FlowStakingCollection.StakingCollectionPublicPath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(to))\n\n        let machineAccountInfo = self.fromStakingCollectionRef.getMachineAccounts()[nodeID]\n            ?? panic(\"Could not get machine account info from the signer's account for the node ID \"\n                    .concat(nodeID).concat(\". Make sure that the node has configured a machine account \")\n                    .concat(\"and has it registered in the staking collection.\"))\n\n        // Remove the NodeStaker from the authorizers StakingCollection.\n        let nodeStaker <- self.fromStakingCollectionRef.removeNode(nodeID: nodeID)\n\n        // Deposit the NodeStaker to the receivers StakingCollection.\n        self.toStakingCollectionCap.addNodeObject(<- nodeStaker!, machineAccountInfo: machineAccountInfo)\n    }\n}",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "0xe467b9dd11fa00df",
          "type": "Address"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n// Transfers a NodeStaker object from an authorizers account\n// and adds the NodeStaker to another accounts Staking Collection\n// identified by the to Address.\n\ntransaction(nodeID: String, to: Address) {\n    let fromStakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n    let toStakingCollectionCap: &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        // The account to transfer the NodeStaker object to must have a valid Staking Collection in order to receive the NodeStaker.\n        if (!FlowStakingCollection.doesAccountHaveStakingCollection(address: to)) {\n            panic(FlowStakingCollection.getCollectionMissingError(to))\n        }\n\n        // Get a reference to the authorizers StakingCollection\n        self.fromStakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n\n        // Get the PublicAccount of the account to transfer the NodeStaker to. \n        let toAccount = getAccount(to)\n\n        // Borrow a capability to the public methods available on the receivers StakingCollection.\n        self.toStakingCollectionCap = toAccount.capabilities\n            .borrow<&FlowStakingCollection.StakingCollection>(FlowStakingCollection.StakingCollectionPublicPath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(to))\n\n        let machineAccountInfo = self.fromStakingCollectionRef.getMachineAccounts()[nodeID]\n            ?? panic(\"Could not get machine account info from the signer's account for the node ID \"\n                    .concat(nodeID).concat(\". Make sure that the node has configured a machine account \")\n                    .concat(\"and has it registered in the staking collection.\"))\n\n        // Remove the NodeStaker from the authorizers StakingCollection.\n        let nodeStaker <- self.fromStakingCollectionRef.removeNode(nodeID: nodeID)\n\n        // Deposit the NodeStaker to the receivers StakingCollection.\n        self.toStakingCollectionCap.addNodeObject(<- nodeStaker!, machineAccountInfo: machineAccountInfo)\n    }\n}",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "0xe467b9dd11fa00df",
          "type": "Address"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f909f4b90921696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f205472616e73666572732061204e6f64655374616b6572206f626a6563742066726f6d20616e20617574686f72697a657273206163636f756e740a2f2f20616e64206164647320746865204e6f64655374616b657220746f20616e6f74686572206163636f756e7473205374616b696e6720436f6c6c656374696f6e0a2f2f206964656e7469666965642062792074686520746f20416464726573732e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c20746f3a204164647265737329207b0a202020206c65742066726f6d5374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a202020206c657420746f5374616b696e67436f6c6c656374696f6e4361703a2026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a20202020202020202f2f20546865206163636f756e7420746f207472616e7366657220746865204e6f64655374616b6572206f626a65637420746f206d757374206861766520612076616c6964205374616b696e6720436f6c6c656374696f6e20696e206f7264657220746f207265636569766520746865204e6f64655374616b65722e0a20202020202020206966202821466c6f775374616b696e67436f6c6c656374696f6e2e646f65734163636f756e74486176655374616b696e67436f6c6c656374696f6e28616464726573733a20746f2929207b0a20202020202020202020202070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f7228746f29290a20202020202020207d0a0a20202020202020202f2f204765742061207265666572656e636520746f2074686520617574686f72697a657273205374616b696e67436f6c6c656374696f6e0a202020202020202073656c662e66726f6d5374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a0a20202020202020202f2f2047657420746865205075626c69634163636f756e74206f6620746865206163636f756e7420746f207472616e7366657220746865204e6f64655374616b657220746f2e200a20202020202020206c657420746f4163636f756e74203d206765744163636f756e7428746f290a0a20202020202020202f2f20426f72726f772061206361706162696c69747920746f20746865207075626c6963206d6574686f647320617661696c61626c65206f6e2074686520726563656976657273205374616b696e67436f6c6c656374696f6e2e0a202020202020202073656c662e746f5374616b696e67436f6c6c656374696f6e436170203d20746f4163636f756e742e6361706162696c69746965730a2020202020202020202020202e626f72726f773c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e28466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e5075626c696350617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f7228746f29290a0a20202020202020206c6574206d616368696e654163636f756e74496e666f203d2073656c662e66726f6d5374616b696e67436f6c6c656374696f6e5265662e6765744d616368696e654163636f756e747328295b6e6f646549445d0a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420676574206d616368696e65206163636f756e7420696e666f2066726f6d20746865207369676e65722773206163636f756e7420666f7220746865206e6f646520494420220a20202020202020202020202020202020202020202e636f6e636174286e6f64654944292e636f6e63617428222e204d616b652073757265207468617420746865206e6f64652068617320636f6e666967757265642061206d616368696e65206163636f756e742022290a20202020202020202020202020202020202020202e636f6e6361742822616e6420686173206974207265676973746572656420696e20746865207374616b696e6720636f6c6c656374696f6e2e2229290a0a20202020202020202f2f2052656d6f766520746865204e6f64655374616b65722066726f6d2074686520617574686f72697a657273205374616b696e67436f6c6c656374696f6e2e0a20202020202020206c6574206e6f64655374616b6572203c2d2073656c662e66726f6d5374616b696e67436f6c6c656374696f6e5265662e72656d6f76654e6f6465286e6f646549443a206e6f64654944290a0a20202020202020202f2f204465706f73697420746865204e6f64655374616b657220746f2074686520726563656976657273205374616b696e67436f6c6c656374696f6e2e0a202020202020202073656c662e746f5374616b696e67436f6c6c656374696f6e4361702e6164644e6f64654f626a656374283c2d206e6f64655374616b6572212c206d616368696e654163636f756e74496e666f3a206d616368696e654163636f756e74496e666f290a202020207d0a7df88eb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227daf7b2276616c7565223a22307865343637623964643131666130306466222c2274797065223a2241646472657373227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f909f8f909f4b90921696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f205472616e73666572732061204e6f64655374616b6572206f626a6563742066726f6d20616e20617574686f72697a657273206163636f756e740a2f2f20616e64206164647320746865204e6f64655374616b657220746f20616e6f74686572206163636f756e7473205374616b696e6720436f6c6c656374696f6e0a2f2f206964656e7469666965642062792074686520746f20416464726573732e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c20746f3a204164647265737329207b0a202020206c65742066726f6d5374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a202020206c657420746f5374616b696e67436f6c6c656374696f6e4361703a2026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a20202020202020202f2f20546865206163636f756e7420746f207472616e7366657220746865204e6f64655374616b6572206f626a65637420746f206d757374206861766520612076616c6964205374616b696e6720436f6c6c656374696f6e20696e206f7264657220746f207265636569766520746865204e6f64655374616b65722e0a20202020202020206966202821466c6f775374616b696e67436f6c6c656374696f6e2e646f65734163636f756e74486176655374616b696e67436f6c6c656374696f6e28616464726573733a20746f2929207b0a20202020202020202020202070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f7228746f29290a20202020202020207d0a0a20202020202020202f2f204765742061207265666572656e636520746f2074686520617574686f72697a657273205374616b696e67436f6c6c656374696f6e0a202020202020202073656c662e66726f6d5374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a0a20202020202020202f2f2047657420746865205075626c69634163636f756e74206f6620746865206163636f756e7420746f207472616e7366657220746865204e6f64655374616b657220746f2e200a20202020202020206c657420746f4163636f756e74203d206765744163636f756e7428746f290a0a20202020202020202f2f20426f72726f772061206361706162696c69747920746f20746865207075626c6963206d6574686f647320617661696c61626c65206f6e2074686520726563656976657273205374616b696e67436f6c6c656374696f6e2e0a202020202020202073656c662e746f5374616b696e67436f6c6c656374696f6e436170203d20746f4163636f756e742e6361706162696c69746965730a2020202020202020202020202e626f72726f773c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e28466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e5075626c696350617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f7228746f29290a0a20202020202020206c6574206d616368696e654163636f756e74496e666f203d2073656c662e66726f6d5374616b696e67436f6c6c656374696f6e5265662e6765744d616368696e654163636f756e747328295b6e6f646549445d0a2020202020202020202020203f3f2070616e69632822436f756c64206e6f7420676574206d616368696e65206163636f756e7420696e666f2066726f6d20746865207369676e65722773206163636f756e7420666f7220746865206e6f646520494420220a20202020202020202020202020202020202020202e636f6e636174286e6f64654944292e636f6e63617428222e204d616b652073757265207468617420746865206e6f64652068617320636f6e666967757265642061206d616368696e65206163636f756e742022290a20202020202020202020202020202020202020202e636f6e6361742822616e6420686173206974207265676973746572656420696e20746865207374616b696e6720636f6c6c656374696f6e2e2229290a0a20202020202020202f2f2052656d6f766520746865204e6f64655374616b65722066726f6d2074686520617574686f72697a657273205374616b696e67436f6c6c656374696f6e2e0a20202020202020206c6574206e6f64655374616b6572203c2d2073656c662e66726f6d5374616b696e67436f6c6c656374696f6e5265662e72656d6f76654e6f6465286e6f646549443a206e6f64654944290a0a20202020202020202f2f204465706f73697420746865204e6f64655374616b657220746f2074686520726563656976657273205374616b696e67436f6c6c656374696f6e2e0a202020202020202073656c662e746f5374616b696e67436f6c6c656374696f6e4361702e6164644e6f64654f626a656374283c2d206e6f64655374616b6572212c206d616368696e654163636f756e74496e666f3a206d616368696e654163636f756e74496e666f290a202020207d0a7df88eb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227daf7b2276616c7565223a22307865343637623964643131666130306466222c2274797065223a2241646472657373227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "020ea71f995f97eeba13e79f4bac01c77295d654b45b9fd75b15ca16d285b659c5732bc7a1fc6359cf51b9c884ab49f22aa9cef11044332519700ed14a59cbc02c5472616e73666572204e6f64650002044e6f6465204944000001416464726573730001416464726573730003",
    "hash": "732bc7a1fc6359cf51b9c884ab49f22aa9cef11044332519700ed14a59cbc02c"
  },
  {
    "title": "SCO.14 - Transfer Delegator",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n// Transfers a NodeDelegator object from an authorizers account\n// and adds the NodeDelegator to another accounts Staking Collection\n// identified by the to Address.\n\ntransaction(nodeID: String, delegatorID: UInt32, to: Address) {\n    let fromStakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n    let toStakingCollectionCap: &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        // The account to transfer the NodeDelegator object to must have a valid Staking Collection in order to receive the NodeDelegator.\n        if (!FlowStakingCollection.doesAccountHaveStakingCollection(address: to)) {\n            panic(FlowStakingCollection.getCollectionMissingError(to))\n        }\n\n        // Get a reference to the authorizers StakingCollection\n        self.fromStakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n\n        // Get the PublicAccount of the account to transfer the NodeDelegator to. \n        let toAccount = getAccount(to)\n\n        // Borrow a capability to the public methods available on the receivers StakingCollection.\n        self.toStakingCollectionCap = toAccount.capabilities\n            .borrow<&FlowStakingCollection.StakingCollection>(FlowStakingCollection.StakingCollectionPublicPath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(to))\n    }\n\n    execute {\n        // Remove the NodeDelegator from the authorizers StakingCollection.\n        let nodeDelegator <- self.fromStakingCollectionRef.removeDelegator(nodeID: nodeID, delegatorID: delegatorID)\n\n        // Deposit the NodeDelegator to the receivers StakingCollection.\n        self.toStakingCollectionCap.addDelegatorObject(<- nodeDelegator!)\n    }\n}",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "42",
          "type": "UInt32"
        },
        {
          "value": "0xe467b9dd11fa00df",
          "type": "Address"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n// Transfers a NodeDelegator object from an authorizers account\n// and adds the NodeDelegator to another accounts Staking Collection\n// identified by the to Address.\n\ntransaction(nodeID: String, delegatorID: UInt32, to: Address) {\n    let fromStakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n    let toStakingCollectionCap: &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        // The account to transfer the NodeDelegator object to must have a valid Staking Collection in order to receive the NodeDelegator.\n        if (!FlowStakingCollection.doesAccountHaveStakingCollection(address: to)) {\n            panic(FlowStakingCollection.getCollectionMissingError(to))\n        }\n\n        // Get a reference to the authorizers StakingCollection\n        self.fromStakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n\n        // Get the PublicAccount of the account to transfer the NodeDelegator to. \n        let toAccount = getAccount(to)\n\n        // Borrow a capability to the public methods available on the receivers StakingCollection.\n        self.toStakingCollectionCap = toAccount.capabilities\n            .borrow<&FlowStakingCollection.StakingCollection>(FlowStakingCollection.StakingCollectionPublicPath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(to))\n    }\n\n    execute {\n        // Remove the NodeDelegator from the authorizers StakingCollection.\n        let nodeDelegator <- self.fromStakingCollectionRef.removeDelegator(nodeID: nodeID, delegatorID: delegatorID)\n\n        // Deposit the NodeDelegator to the receivers StakingCollection.\n        self.toStakingCollectionCap.addDelegatorObject(<- nodeDelegator!)\n    }\n}",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "42",
          "type": "UInt32"
        },
        {
          "value": "0xe467b9dd11fa00df",
          "type": "Address"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f908d6b907e4696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f205472616e73666572732061204e6f646544656c656761746f72206f626a6563742066726f6d20616e20617574686f72697a657273206163636f756e740a2f2f20616e64206164647320746865204e6f646544656c656761746f7220746f20616e6f74686572206163636f756e7473205374616b696e6720436f6c6c656374696f6e0a2f2f206964656e7469666965642062792074686520746f20416464726573732e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433322c20746f3a204164647265737329207b0a202020206c65742066726f6d5374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a202020206c657420746f5374616b696e67436f6c6c656374696f6e4361703a2026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a20202020202020202f2f20546865206163636f756e7420746f207472616e7366657220746865204e6f646544656c656761746f72206f626a65637420746f206d757374206861766520612076616c6964205374616b696e6720436f6c6c656374696f6e20696e206f7264657220746f207265636569766520746865204e6f646544656c656761746f722e0a20202020202020206966202821466c6f775374616b696e67436f6c6c656374696f6e2e646f65734163636f756e74486176655374616b696e67436f6c6c656374696f6e28616464726573733a20746f2929207b0a20202020202020202020202070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f7228746f29290a20202020202020207d0a0a20202020202020202f2f204765742061207265666572656e636520746f2074686520617574686f72697a657273205374616b696e67436f6c6c656374696f6e0a202020202020202073656c662e66726f6d5374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a0a20202020202020202f2f2047657420746865205075626c69634163636f756e74206f6620746865206163636f756e7420746f207472616e7366657220746865204e6f646544656c656761746f7220746f2e200a20202020202020206c657420746f4163636f756e74203d206765744163636f756e7428746f290a0a20202020202020202f2f20426f72726f772061206361706162696c69747920746f20746865207075626c6963206d6574686f647320617661696c61626c65206f6e2074686520726563656976657273205374616b696e67436f6c6c656374696f6e2e0a202020202020202073656c662e746f5374616b696e67436f6c6c656374696f6e436170203d20746f4163636f756e742e6361706162696c69746965730a2020202020202020202020202e626f72726f773c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e28466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e5075626c696350617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f7228746f29290a202020207d0a0a2020202065786563757465207b0a20202020202020202f2f2052656d6f766520746865204e6f646544656c656761746f722066726f6d2074686520617574686f72697a657273205374616b696e67436f6c6c656374696f6e2e0a20202020202020206c6574206e6f646544656c656761746f72203c2d2073656c662e66726f6d5374616b696e67436f6c6c656374696f6e5265662e72656d6f766544656c656761746f72286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f724944290a0a20202020202020202f2f204465706f73697420746865204e6f646544656c656761746f7220746f2074686520726563656976657273205374616b696e67436f6c6c656374696f6e2e0a202020202020202073656c662e746f5374616b696e67436f6c6c656374696f6e4361702e61646444656c656761746f724f626a656374283c2d206e6f646544656c656761746f7221290a202020207d0a7df8adb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227d9e7b2276616c7565223a223432222c2274797065223a2255496e743332227daf7b2276616c7565223a22307865343637623964643131666130306466222c2274797065223a2241646472657373227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f908daf908d6b907e4696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f205472616e73666572732061204e6f646544656c656761746f72206f626a6563742066726f6d20616e20617574686f72697a657273206163636f756e740a2f2f20616e64206164647320746865204e6f646544656c656761746f7220746f20616e6f74686572206163636f756e7473205374616b696e6720436f6c6c656374696f6e0a2f2f206964656e7469666965642062792074686520746f20416464726573732e0a0a7472616e73616374696f6e286e6f646549443a20537472696e672c2064656c656761746f7249443a2055496e7433322c20746f3a204164647265737329207b0a202020206c65742066726f6d5374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a202020206c657420746f5374616b696e67436f6c6c656374696f6e4361703a2026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a20202020202020202f2f20546865206163636f756e7420746f207472616e7366657220746865204e6f646544656c656761746f72206f626a65637420746f206d757374206861766520612076616c6964205374616b696e6720436f6c6c656374696f6e20696e206f7264657220746f207265636569766520746865204e6f646544656c656761746f722e0a20202020202020206966202821466c6f775374616b696e67436f6c6c656374696f6e2e646f65734163636f756e74486176655374616b696e67436f6c6c656374696f6e28616464726573733a20746f2929207b0a20202020202020202020202070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f7228746f29290a20202020202020207d0a0a20202020202020202f2f204765742061207265666572656e636520746f2074686520617574686f72697a657273205374616b696e67436f6c6c656374696f6e0a202020202020202073656c662e66726f6d5374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a0a20202020202020202f2f2047657420746865205075626c69634163636f756e74206f6620746865206163636f756e7420746f207472616e7366657220746865204e6f646544656c656761746f7220746f2e200a20202020202020206c657420746f4163636f756e74203d206765744163636f756e7428746f290a0a20202020202020202f2f20426f72726f772061206361706162696c69747920746f20746865207075626c6963206d6574686f647320617661696c61626c65206f6e2074686520726563656976657273205374616b696e67436f6c6c656374696f6e2e0a202020202020202073656c662e746f5374616b696e67436f6c6c656374696f6e436170203d20746f4163636f756e742e6361706162696c69746965730a2020202020202020202020202e626f72726f773c26466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e28466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e5075626c696350617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f7228746f29290a202020207d0a0a2020202065786563757465207b0a20202020202020202f2f2052656d6f766520746865204e6f646544656c656761746f722066726f6d2074686520617574686f72697a657273205374616b696e67436f6c6c656374696f6e2e0a20202020202020206c6574206e6f646544656c656761746f72203c2d2073656c662e66726f6d5374616b696e67436f6c6c656374696f6e5265662e72656d6f766544656c656761746f72286e6f646549443a206e6f646549442c2064656c656761746f7249443a2064656c656761746f724944290a0a20202020202020202f2f204465706f73697420746865204e6f646544656c656761746f7220746f2074686520726563656976657273205374616b696e67436f6c6c656374696f6e2e0a202020202020202073656c662e746f5374616b696e67436f6c6c656374696f6e4361702e61646444656c656761746f724f626a656374283c2d206e6f646544656c656761746f7221290a202020207d0a7df8adb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227d9e7b2276616c7565223a223432222c2274797065223a2255496e743332227daf7b2276616c7565223a22307865343637623964643131666130306466222c2274797065223a2241646472657373227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02b10a5bb90dea36715fdbd5b59084b48cf5f9da9b9dba430ff10ea26626f9f4166a9ff4739ad11f57409823e907d8fdc23bea2ab99bb5925fafcdfeec62457fc35472616e736665722044656c656761746f720003044e6f646520494400000144656c656761746f72204944000155496e743332000301416464726573730002416464726573730003",
    "hash": "6a9ff4739ad11f57409823e907d8fdc23bea2ab99bb5925fafcdfeec62457fc3"
  },
  {
    "title": "SCO.15 - Withdraw From Machine Account",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Request to withdraw tokens from the machine account\n/// The tokens are automatically deposited to the unlocked account vault\n\ntransaction(nodeID: String, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawFromMachineAccount(nodeID: nodeID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Request to withdraw tokens from the machine account\n/// The tokens are automatically deposited to the unlocked account vault\n\ntransaction(nodeID: String, amount: UFix64) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.withdrawFromMachineAccount(nodeID: nodeID, amount: amount)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f903f6b90322696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f205265717565737420746f20776974686472617720746f6b656e732066726f6d20746865206d616368696e65206163636f756e740a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e776974686472617746726f6d4d616368696e654163636f756e74286e6f646549443a206e6f646549442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af88fb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f903faf903f6b90322696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f205265717565737420746f20776974686472617720746f6b656e732066726f6d20746865206d616368696e65206163636f756e740a2f2f2f2054686520746f6b656e7320617265206175746f6d61746963616c6c79206465706f736974656420746f2074686520756e6c6f636b6564206163636f756e74207661756c740a0a7472616e73616374696f6e286e6f646549443a20537472696e672c20616d6f756e743a2055466978363429207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e776974686472617746726f6d4d616368696e654163636f756e74286e6f646549443a206e6f646549442c20616d6f756e743a20616d6f756e74290a202020207d0a7d0af88fb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "0200fd0c796d7ad5d17350861c02e9ae689e8b38aed68c3df29171a5d7dea0bc10dcd4dd5d4466c1e2656f29585b48a32c9545247a2cb8a8653613272c7cc58f6c57697468647261772046726f6d204d616368696e65204163636f756e740002044e6f6465204944000001416d6f756e7400015546697836340003",
    "hash": "dcd4dd5d4466c1e2656f29585b48a32c9545247a2cb8a8653613272c7cc58f6c"
  },
  {
    "title": "SCO.16 - Update Networking Address",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Changes the networking address for the specified node\n\ntransaction(nodeID: String, newAddress: String) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.updateNetworkingAddress(nodeID: nodeID, newAddress: newAddress)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "flow-node.test:3569",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Changes the networking address for the specified node\n\ntransaction(nodeID: String, newAddress: String) {\n    \n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n    }\n\n    execute {\n        self.stakingCollectionRef.updateNetworkingAddress(nodeID: nodeID, newAddress: newAddress)\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "flow-node.test:3569",
          "type": "String"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f903b7b902e4696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f204368616e67657320746865206e6574776f726b696e67206164647265737320666f722074686520737065636966696564206e6f64650a0a7472616e73616374696f6e286e6f646549443a20537472696e672c206e6577416464726573733a20537472696e6729207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7570646174654e6574776f726b696e6741646472657373286e6f646549443a206e6f646549442c206e6577416464726573733a206e657741646472657373290a202020207d0a7d0af88eb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227daf7b2276616c7565223a22666c6f772d6e6f64652e746573743a33353639222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f903bbf903b7b902e4696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f204368616e67657320746865206e6574776f726b696e67206164647265737320666f722074686520737065636966696564206e6f64650a0a7472616e73616374696f6e286e6f646549443a20537472696e672c206e6577416464726573733a20537472696e6729207b0a202020200a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a202020207d0a0a2020202065786563757465207b0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e5265662e7570646174654e6574776f726b696e6741646472657373286e6f646549443a206e6f646549442c206e6577416464726573733a206e657741646472657373290a202020207d0a7d0af88eb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227daf7b2276616c7565223a22666c6f772d6e6f64652e746573743a33353639222c2274797065223a22537472696e67227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "02cc163008980bb5651dad75697beb263505c24f027bdd375ab7e9105da710fca5bffd96e1dfbdd84526b77e3056a0f54999c593b4db10f864d6b1461edac265ed557064617465204e6574776f726b696e6720416464726573730002044e6f6465204944000004416464726573730001",
    "hash": "bffd96e1dfbdd84526b77e3056a0f54999c593b4db10f864d6b1461edac265ed"
  },
  {
    "title": "SCO.17 - Register Node with PoP",
    "valid": true,
    "chainID": "Mainnet",
    "payloadMessage": {
      "script": "import Crypto\nimport FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Registers a delegator in the staking collection resource\n/// for the specified node information and the amount of tokens to commit\n\ntransaction(id: String,\n            role: UInt8,\n            networkingAddress: String,\n            networkingKey: String,\n            stakingKey: String,\n            stakingKeyPoP: String,\n            amount: UFix64,\n            machineAccountKey: String, \n            machineAccountKeySignatureAlgorithm: UInt8, \n            machineAccountKeyHashAlgorithm: UInt8) {\n\n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        pre {\n\t\t\tmachineAccountKeySignatureAlgorithm == 1 || machineAccountKeySignatureAlgorithm == 2:\n                \"Cannot register node with provided machine account key: Must provide a signature algorithm raw value that corresponds to \"\n                .concat(\"one of the available signature algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(machineAccountKeySignatureAlgorithm.toString())\n                .concat(\" but the options are either 1 (ECDSA_P256) or 2 (ECDSA_secp256k1).\")\n\t\t\tmachineAccountKeyHashAlgorithm == 1 || machineAccountKeyHashAlgorithm == 3:\n                \"Cannot register node with provided machine account key: Must provide a hash algorithm raw value that corresponds to \"\n                .concat(\"one of of the available hash algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(machineAccountKeyHashAlgorithm.toString())\n                .concat(\" but the options are either 1 (SHA2_256) or 3 (SHA3_256).\")\n\t\t}\n\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n\n        if let machineAccount = self.stakingCollectionRef.registerNode(\n            id: id,\n            role: role,\n            networkingAddress: networkingAddress,\n            networkingKey: networkingKey,\n            stakingKey: stakingKey,\n            stakingKeyPoP: stakingKeyPoP,\n            amount: amount,\n            payer: account\n        ) {\n            let sigAlgo = SignatureAlgorithm(rawValue: machineAccountKeySignatureAlgorithm)!\n\n            let hashAlgo = HashAlgorithm(rawValue: machineAccountKeyHashAlgorithm)!\n            \n            let publicKey = PublicKey(\n\t\t\t    publicKey: machineAccountKey.decodeHex(),\n\t\t\t    signatureAlgorithm: sigAlgo\n\t\t    )\n            machineAccount.keys.add(publicKey: publicKey, hashAlgorithm: hashAlgo, weight: 1000.0)\n        }\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "flow-node.test:3569",
          "type": "String"
        },
        {
          "value": "1348307bc77c688e80049de9d081aa09755da33e6997605fa059db2144fc85e560cbe6f7da8d74b453f5916618cb8fd392c2db856f3e78221dc68db1b1d914e4",
          "type": "String"
        },
        {
          "value": "8dec36ed8a91e3e5d737b06434d94a8a561c7889495d6c7081cd5e123a42124415b9391c9b9aa165c2f71994bf9607cb0ea262ad162fec74146d1ebc482a33b9dad203d16a83bbfda89b3f6e1cd1d8fb2e704a162d259a0ac9f26bc8635d74f6",
          "type": "String"
        },
        {
          "value": "828a68a2be392804044d85888100462702a422901da3269fb6512defabad07250aad24f232671e4ac8ae531f54e062fc",
          "type": "String"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        },
        {
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164",
          "type": "String"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": [
        {
          "address": "f19c161bc24cf4b4",
          "keyId": 4,
          "sig": "f7225388c1d69d57e6251c9fda50cbbf9e05131e5adb81e5aa0422402f048162"
        }
      ]
    },
    "envelopeMessage": {
      "script": "import Crypto\nimport FlowStakingCollection from 0x8d0e87b65159ae63\n\n/// Registers a delegator in the staking collection resource\n/// for the specified node information and the amount of tokens to commit\n\ntransaction(id: String,\n            role: UInt8,\n            networkingAddress: String,\n            networkingKey: String,\n            stakingKey: String,\n            stakingKeyPoP: String,\n            amount: UFix64,\n            machineAccountKey: String, \n            machineAccountKeySignatureAlgorithm: UInt8, \n            machineAccountKeyHashAlgorithm: UInt8) {\n\n    let stakingCollectionRef: auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection\n\n    prepare(account: auth(BorrowValue) &Account) {\n        pre {\n\t\t\tmachineAccountKeySignatureAlgorithm == 1 || machineAccountKeySignatureAlgorithm == 2:\n                \"Cannot register node with provided machine account key: Must provide a signature algorithm raw value that corresponds to \"\n                .concat(\"one of the available signature algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(machineAccountKeySignatureAlgorithm.toString())\n                .concat(\" but the options are either 1 (ECDSA_P256) or 2 (ECDSA_secp256k1).\")\n\t\t\tmachineAccountKeyHashAlgorithm == 1 || machineAccountKeyHashAlgorithm == 3:\n                \"Cannot register node with provided machine account key: Must provide a hash algorithm raw value that corresponds to \"\n                .concat(\"one of of the available hash algorithms for Flow keys.\")\n                .concat(\"You provided \").concat(machineAccountKeyHashAlgorithm.toString())\n                .concat(\" but the options are either 1 (SHA2_256) or 3 (SHA3_256).\")\n\t\t}\n\n        self.stakingCollectionRef = account.storage.borrow<auth(FlowStakingCollection.CollectionOwner) &FlowStakingCollection.StakingCollection>(from: FlowStakingCollection.StakingCollectionStoragePath)\n            ?? panic(FlowStakingCollection.getCollectionMissingError(nil))\n\n        if let machineAccount = self.stakingCollectionRef.registerNode(\n            id: id,\n            role: role,\n            networkingAddress: networkingAddress,\n            networkingKey: networkingKey,\n            stakingKey: stakingKey,\n            stakingKeyPoP: stakingKeyPoP,\n            amount: amount,\n            payer: account\n        ) {\n            let sigAlgo = SignatureAlgorithm(rawValue: machineAccountKeySignatureAlgorithm)!\n\n            let hashAlgo = HashAlgorithm(rawValue: machineAccountKeyHashAlgorithm)!\n            \n            let publicKey = PublicKey(\n\t\t\t    publicKey: machineAccountKey.decodeHex(),\n\t\t\t    signatureAlgorithm: sigAlgo\n\t\t    )\n            machineAccount.keys.add(publicKey: publicKey, hashAlgorithm: hashAlgo, weight: 1000.0)\n        }\n    }\n}\n",
      "arguments": [
        {
          "type": "String",
          "value": "88549335e1db7b5b46c2ad58ddb70b7a45e770cc5fe779650ba26f10e6bae5e6"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "flow-node.test:3569",
          "type": "String"
        },
        {
          "value": "1348307bc77c688e80049de9d081aa09755da33e6997605fa059db2144fc85e560cbe6f7da8d74b453f5916618cb8fd392c2db856f3e78221dc68db1b1d914e4",
          "type": "String"
        },
        {
          "value": "8dec36ed8a91e3e5d737b06434d94a8a561c7889495d6c7081cd5e123a42124415b9391c9b9aa165c2f71994bf9607cb0ea262ad162fec74146d1ebc482a33b9dad203d16a83bbfda89b3f6e1cd1d8fb2e704a162d259a0ac9f26bc8635d74f6",
          "type": "String"
        },
        {
          "value": "828a68a2be392804044d85888100462702a422901da3269fb6512defabad07250aad24f232671e4ac8ae531f54e062fc",
          "type": "String"
        },
        {
          "value": "92233720368.54775808",
          "type": "UFix64"
        },
        {
          "value": "f845b8406e4f43f79d3c1d8cacb3d5f3e7aeedb29feaeb4559fdb71a97e2fd0438565310e87670035d83bc10fe67fe314dba5363c81654595d64884b1ecad1512a64e65e020164",
          "type": "String"
        },
        {
          "value": "1",
          "type": "UInt8"
        },
        {
          "value": "1",
          "type": "UInt8"
        }
      ],
      "refBlock": "f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b",
      "gasLimit": 42,
      "proposalKey": {
        "address": "f19c161bc24cf4b4",
        "keyId": 4,
        "sequenceNum": 10
      },
      "payer": "f19c161bc24cf4b4",
      "authorizers": [
        "f19c161bc24cf4b4"
      ],
      "payloadSigs": []
    },
    "encodedTransactionPayloadHex": "f90ef7b90af5696d706f72742043727970746f0a696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f2052656769737465727320612064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e207265736f757263650a2f2f2f20666f722074686520737065636966696564206e6f646520696e666f726d6174696f6e20616e642074686520616d6f756e74206f6620746f6b656e7320746f20636f6d6d69740a0a7472616e73616374696f6e2869643a20537472696e672c0a202020202020202020202020726f6c653a2055496e74382c0a2020202020202020202020206e6574776f726b696e67416464726573733a20537472696e672c0a2020202020202020202020206e6574776f726b696e674b65793a20537472696e672c0a2020202020202020202020207374616b696e674b65793a20537472696e672c0a2020202020202020202020207374616b696e674b6579506f503a20537472696e672c0a202020202020202020202020616d6f756e743a205546697836342c0a2020202020202020202020206d616368696e654163636f756e744b65793a20537472696e672c200a2020202020202020202020206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d3a2055496e74382c200a2020202020202020202020206d616368696e654163636f756e744b657948617368416c676f726974686d3a2055496e743829207b0a0a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a2020202020202020707265207b0a0909096d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d203d3d2031207c7c206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d203d3d20323a0a202020202020202020202020202020202243616e6e6f74207265676973746572206e6f646520776974682070726f7669646564206d616368696e65206163636f756e74206b65793a204d7573742070726f766964652061207369676e617475726520616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f662074686520617661696c61626c65207369676e617475726520616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e636174286d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e7320617265206569746865722031202845434453415f5032353629206f722032202845434453415f736563703235366b31292e22290a0909096d616368696e654163636f756e744b657948617368416c676f726974686d203d3d2031207c7c206d616368696e654163636f756e744b657948617368416c676f726974686d203d3d20333a0a202020202020202020202020202020202243616e6e6f74207265676973746572206e6f646520776974682070726f7669646564206d616368696e65206163636f756e74206b65793a204d7573742070726f766964652061206861736820616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f66206f662074686520617661696c61626c65206861736820616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e636174286d616368696e654163636f756e744b657948617368416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e73206172652065697468657220312028534841325f32353629206f7220332028534841335f323536292e22290a09097d0a0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a0a20202020202020206966206c6574206d616368696e654163636f756e74203d2073656c662e7374616b696e67436f6c6c656374696f6e5265662e72656769737465724e6f6465280a20202020202020202020202069643a2069642c0a202020202020202020202020726f6c653a20726f6c652c0a2020202020202020202020206e6574776f726b696e67416464726573733a206e6574776f726b696e67416464726573732c0a2020202020202020202020206e6574776f726b696e674b65793a206e6574776f726b696e674b65792c0a2020202020202020202020207374616b696e674b65793a207374616b696e674b65792c0a2020202020202020202020207374616b696e674b6579506f503a207374616b696e674b6579506f502c0a202020202020202020202020616d6f756e743a20616d6f756e742c0a20202020202020202020202070617965723a206163636f756e740a202020202020202029207b0a2020202020202020202020206c657420736967416c676f203d205369676e6174757265416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d29210a0a2020202020202020202020206c65742068617368416c676f203d2048617368416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b657948617368416c676f726974686d29210a2020202020202020202020200a2020202020202020202020206c6574207075626c69634b6579203d205075626c69634b6579280a090909202020207075626c69634b65793a206d616368696e654163636f756e744b65792e6465636f646548657828292c0a090909202020207369676e6174757265416c676f726974686d3a20736967416c676f0a090920202020290a2020202020202020202020206d616368696e654163636f756e742e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2068617368416c676f2c207765696768743a20313030302e30290a20202020202020207d0a202020207d0a7d0af903bcb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227daf7b2276616c7565223a22666c6f772d6e6f64652e746573743a33353639222c2274797065223a22537472696e67227db89c7b2276616c7565223a223133343833303762633737633638386538303034396465396430383161613039373535646133336536393937363035666130353964623231343466633835653536306362653666376461386437346234353366353931363631386362386664333932633264623835366633653738323231646336386462316231643931346534222c2274797065223a22537472696e67227db8dc7b2276616c7565223a22386465633336656438613931653365356437333762303634333464393461386135363163373838393439356436633730383163643565313233613432313234343135623933393163396239616131363563326637313939346266393630376362306561323632616431363266656337343134366431656263343832613333623964616432303364313661383362626664613839623366366531636431643866623265373034613136326432353961306163396632366263383633356437346636222c2274797065223a22537472696e67227db87c7b2276616c7565223a22383238613638613262653339323830343034346438353838383130303436323730326134323239303164613332363966623635313264656661626164303732353061616432346632333236373165346163386165353331663534653036326663222c2274797065223a22537472696e67227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227db8aa7b2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634222c2274797065223a22537472696e67227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4",
    "encodedTransactionEnvelopeHex": "f90efbf90ef7b90af5696d706f72742043727970746f0a696d706f727420466c6f775374616b696e67436f6c6c656374696f6e2066726f6d203078386430653837623635313539616536330a0a2f2f2f2052656769737465727320612064656c656761746f7220696e20746865207374616b696e6720636f6c6c656374696f6e207265736f757263650a2f2f2f20666f722074686520737065636966696564206e6f646520696e666f726d6174696f6e20616e642074686520616d6f756e74206f6620746f6b656e7320746f20636f6d6d69740a0a7472616e73616374696f6e2869643a20537472696e672c0a202020202020202020202020726f6c653a2055496e74382c0a2020202020202020202020206e6574776f726b696e67416464726573733a20537472696e672c0a2020202020202020202020206e6574776f726b696e674b65793a20537472696e672c0a2020202020202020202020207374616b696e674b65793a20537472696e672c0a2020202020202020202020207374616b696e674b6579506f503a20537472696e672c0a202020202020202020202020616d6f756e743a205546697836342c0a2020202020202020202020206d616368696e654163636f756e744b65793a20537472696e672c200a2020202020202020202020206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d3a2055496e74382c200a2020202020202020202020206d616368696e654163636f756e744b657948617368416c676f726974686d3a2055496e743829207b0a0a202020206c6574207374616b696e67436f6c6c656374696f6e5265663a206175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e0a0a2020202070726570617265286163636f756e743a206175746828426f72726f7756616c75652920264163636f756e7429207b0a2020202020202020707265207b0a0909096d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d203d3d2031207c7c206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d203d3d20323a0a202020202020202020202020202020202243616e6e6f74207265676973746572206e6f646520776974682070726f7669646564206d616368696e65206163636f756e74206b65793a204d7573742070726f766964652061207369676e617475726520616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f662074686520617661696c61626c65207369676e617475726520616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e636174286d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e7320617265206569746865722031202845434453415f5032353629206f722032202845434453415f736563703235366b31292e22290a0909096d616368696e654163636f756e744b657948617368416c676f726974686d203d3d2031207c7c206d616368696e654163636f756e744b657948617368416c676f726974686d203d3d20333a0a202020202020202020202020202020202243616e6e6f74207265676973746572206e6f646520776974682070726f7669646564206d616368696e65206163636f756e74206b65793a204d7573742070726f766964652061206861736820616c676f726974686d207261772076616c7565207468617420636f72726573706f6e647320746f20220a202020202020202020202020202020202e636f6e63617428226f6e65206f66206f662074686520617661696c61626c65206861736820616c676f726974686d7320666f7220466c6f77206b6579732e22290a202020202020202020202020202020202e636f6e6361742822596f752070726f76696465642022292e636f6e636174286d616368696e654163636f756e744b657948617368416c676f726974686d2e746f537472696e672829290a202020202020202020202020202020202e636f6e63617428222062757420746865206f7074696f6e73206172652065697468657220312028534841325f32353629206f7220332028534841335f323536292e22290a09097d0a0a202020202020202073656c662e7374616b696e67436f6c6c656374696f6e526566203d206163636f756e742e73746f726167652e626f72726f773c6175746828466c6f775374616b696e67436f6c6c656374696f6e2e436f6c6c656374696f6e4f776e6572292026466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e3e2866726f6d3a20466c6f775374616b696e67436f6c6c656374696f6e2e5374616b696e67436f6c6c656374696f6e53746f7261676550617468290a2020202020202020202020203f3f2070616e696328466c6f775374616b696e67436f6c6c656374696f6e2e676574436f6c6c656374696f6e4d697373696e674572726f72286e696c29290a0a20202020202020206966206c6574206d616368696e654163636f756e74203d2073656c662e7374616b696e67436f6c6c656374696f6e5265662e72656769737465724e6f6465280a20202020202020202020202069643a2069642c0a202020202020202020202020726f6c653a20726f6c652c0a2020202020202020202020206e6574776f726b696e67416464726573733a206e6574776f726b696e67416464726573732c0a2020202020202020202020206e6574776f726b696e674b65793a206e6574776f726b696e674b65792c0a2020202020202020202020207374616b696e674b65793a207374616b696e674b65792c0a2020202020202020202020207374616b696e674b6579506f503a207374616b696e674b6579506f502c0a202020202020202020202020616d6f756e743a20616d6f756e742c0a20202020202020202020202070617965723a206163636f756e740a202020202020202029207b0a2020202020202020202020206c657420736967416c676f203d205369676e6174757265416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b65795369676e6174757265416c676f726974686d29210a0a2020202020202020202020206c65742068617368416c676f203d2048617368416c676f726974686d2872617756616c75653a206d616368696e654163636f756e744b657948617368416c676f726974686d29210a2020202020202020202020200a2020202020202020202020206c6574207075626c69634b6579203d205075626c69634b6579280a090909202020207075626c69634b65793a206d616368696e654163636f756e744b65792e6465636f646548657828292c0a090909202020207369676e6174757265416c676f726974686d3a20736967416c676f0a090920202020290a2020202020202020202020206d616368696e654163636f756e742e6b6579732e616464287075626c69634b65793a207075626c69634b65792c2068617368416c676f726974686d3a2068617368416c676f2c207765696768743a20313030302e30290a20202020202020207d0a202020207d0a7d0af903bcb85c7b2274797065223a22537472696e67222c2276616c7565223a2238383534393333356531646237623562343663326164353864646237306237613435653737306363356665373739363530626132366631306536626165356536227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227daf7b2276616c7565223a22666c6f772d6e6f64652e746573743a33353639222c2274797065223a22537472696e67227db89c7b2276616c7565223a223133343833303762633737633638386538303034396465396430383161613039373535646133336536393937363035666130353964623231343466633835653536306362653666376461386437346234353366353931363631386362386664333932633264623835366633653738323231646336386462316231643931346534222c2274797065223a22537472696e67227db8dc7b2276616c7565223a22386465633336656438613931653365356437333762303634333464393461386135363163373838393439356436633730383163643565313233613432313234343135623933393163396239616131363563326637313939346266393630376362306561323632616431363266656337343134366431656263343832613333623964616432303364313661383362626664613839623366366531636431643866623265373034613136326432353961306163396632366263383633356437346636222c2274797065223a22537472696e67227db87c7b2276616c7565223a22383238613638613262653339323830343034346438353838383130303436323730326134323239303164613332363966623635313264656661626164303732353061616432346632333236373165346163386165353331663534653036326663222c2274797065223a22537472696e67227db07b2276616c7565223a2239323233333732303336382e3534373735383038222c2274797065223a22554669783634227db8aa7b2276616c7565223a2266383435623834303665346634336637396433633164386361636233643566336537616565646232396665616562343535396664623731613937653266643034333835363533313065383736373030333564383362633130666536376665333134646261353336336338313635343539356436343838346231656361643135313261363465363565303230313634222c2274797065223a22537472696e67227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227d9c7b2276616c7565223a2231222c2274797065223a2255496e7438227da0f0e4c2f76c58916ec258f246851bea091d14d4247a2fc3e18694461b1816e13b2a88f19c161bc24cf4b4040a88f19c161bc24cf4b4c988f19c161bc24cf4b4c0",
    "metadata": "0215face232abba7795997f06ec6f07a4e7d14743e6ed4f33d9e26ad02017b917f88bdc9bb28ce734d1edc4b64ae5adf99ff3ac572dbe0d09090795bf78c7c31a65265676973746572204e6f6465207769746820506f50000a044e6f64652049440000074e6f646520526f6c650001044e6574772e20416464726573730002044e6574772e204b65790003045374616b696e67204b65790004045374616b696e67204b657920506f50000501416d6f756e7400065546697836340003044d41205075622e204b65790007064d41205369676e2e20416c672e0008054d41204861736820416c672e0009",
    "hash": "88bdc9bb28ce734d1edc4b64ae5adf99ff3ac572dbe0d09090795bf78c7c31a6"
  }
]